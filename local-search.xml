<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ts-vue2.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>默认选择安装了vue2.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091304.png" alt="image-20210720091255782"></p></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091318.png" alt="image-20210720091317087"></p></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091346.png" alt="image-20210720091346033"></p><h2 id="三、vue2-0特点"><a href="#三、vue2-0特点" class="headerlink" title="三、vue2.0特点"></a>三、vue2.0特点</h2><ol><li><p>vue2.0的组件导入方式，采用注解</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091554.png" alt="image-20210720091553890"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br>Vue.use(ElementUI)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、实现功能"><a href="#四、实现功能" class="headerlink" title="四、实现功能"></a>四、实现功能</h2><ol><li><p>点击新增，实现弹框</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720092454.png" alt="image-20210720092453563"></p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-vue3.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>选择安装了vue3.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720093125.png" alt="image-20210720093124295"></p></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091318.png" alt="image-20210720091317087"></p></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091346.png" alt="image-20210720091346033"></p><h2 id="三、vue3-0特点"><a href="#三、vue3-0特点" class="headerlink" title="三、vue3.0特点"></a>三、vue3.0特点</h2><ol><li><p>vue3.0的组件导入方式</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720092859.png" alt="image-20210720092858938"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;Elementplus&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./element-ui&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><br><span class="hljs-keyword">const</span> app = createApp(App);<br><span class="hljs-comment">// 调用</span><br>Elementplus(app);<br><span class="hljs-comment">// 使用</span><br>createApp(App).use(Elementplus).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>vue3.0采用按需引入的方式，安装插件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;babel-plugin-import&quot;</span>: <span class="hljs-string">&quot;^1.13.3&quot;</span>,<br><span class="hljs-built_in">npm</span> install babel-plugin-<span class="hljs-keyword">import</span> -D<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、实现功能"><a href="#四、实现功能" class="headerlink" title="四、实现功能"></a>四、实现功能</h2>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-便签项目</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、搭建项目环境"><a href="#一、搭建项目环境" class="headerlink" title="一、搭建项目环境"></a>一、搭建项目环境</h2><ol><li><p>本人安装的是vue 2.x的环境,先卸载本地的vue-cli</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm uninstall vue-cli -g<br>npm uninstall vue-cli<br></code></pre></td></tr></table></figure></li><li><p>安装 vue 3.x的脚手架</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm install <span class="hljs-meta">@vue</span>/cli -g<br></code></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">vue create XXX(xxx可任意取名，是自己的项目名)<br></code></pre></td></tr></table></figure></li><li><p>创建完成,在vscode环境下，编译</p></li><li><p>安装vue/typescript</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">vue add <span class="hljs-meta">@vue</span>/typescript<br></code></pre></td></tr></table></figure></li><li><p>安装vuex</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm i vuex<br></code></pre></td></tr></table></figure></li><li><p>npm run serve 运行项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111441.png" alt="image-20210718111431874"></p></li></ol><h2 id="二、MenuBar组件"><a href="#二、MenuBar组件" class="headerlink" title="二、MenuBar组件"></a>二、MenuBar组件</h2><ol><li><p>public文件导入imgs、common.css 文件</p></li><li><p>index.html引入相关配置</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111817.png" alt="image-20210718111814438"></p></li><li><p>创建MenuBar.vue 文件，将MenuBar组件抛出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111932.png" alt="image-20210718111929831"></p></li><li><p>在App.vue中引入组件</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112034.png" alt="image-20210718112031898"></p></li><li><p>运行</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112114.png" alt="image-20210718112112983"></p></li></ol><h2 id="三、ItemData、CateEnum数据模型"><a href="#三、ItemData、CateEnum数据模型" class="headerlink" title="三、ItemData、CateEnum数据模型"></a>三、ItemData、CateEnum数据模型</h2><ol><li><p>ItemData封装了便签所有内容的类</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121305.png" alt="image-20210718121304705"></p></li><li><p>对日期进行处理，封装一个toSelfDataStr的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121412.png" alt="image-20210718121411435"></p></li><li><p>将ItemData、CateEnum以模块的形式导出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121449.png" alt="image-20210718121445269"></p></li><li><p>CateEnum对分类进行枚举</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121506.png" alt="image-20210718121504968"></p></li><li><p>在main.ts 进行测试</p><p>导入2个数据模型：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121631.png" alt="image-20210718121630607"></p><p>测试数据：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121654.png" alt="image-20210718121653652"></p><p>结果：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121716.png" alt="image-20210718121715646"></p></li></ol><h2 id="四、封装操作类：ActionHelper、DataHelper"><a href="#四、封装操作类：ActionHelper、DataHelper" class="headerlink" title="四、封装操作类：ActionHelper、DataHelper"></a>四、封装操作类：ActionHelper、DataHelper</h2><ol><li><p>DataHelper用评论项目的</p></li><li><p>ActionHelper主要进行业务逻辑的操作</p><p>定义一个memoList，处理便签数组，初始化时，将本地的数组赋值给memoList</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124923.png" alt="image-20210718124922846"></p><p>封装读取本地数据的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124958.png" alt="image-20210718124957796"></p></li><li><p>main.ts 测试数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125512.png" alt="image-20210718125511997"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125525.png" alt="image-20210718125525035"></p></li></ol><h2 id="五、ActionHelper增加业务逻辑，add、edit、remove"><a href="#五、ActionHelper增加业务逻辑，add、edit、remove" class="headerlink" title="五、ActionHelper增加业务逻辑，add、edit、remove"></a>五、ActionHelper增加业务逻辑，add、edit、remove</h2><ol><li><p>ActionHelper增加对文件add、edit、remove操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155200.png" alt="image-20210718155159203"></p></li><li><p>在main.ts中测试</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155501.png" alt="image-20210718155459058"></p></li></ol><h2 id="六、组件之间可以共享数据，基于Vuex"><a href="#六、组件之间可以共享数据，基于Vuex" class="headerlink" title="六、组件之间可以共享数据，基于Vuex"></a>六、组件之间可以共享数据，基于Vuex</h2><ol><li><pre><code>  state共享对象和数据，mutations共享方法</code></pre></li></ol><p>   <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162101.png" alt="image-20210718162100273"></p><ol start="2"><li><p>在main.ts 全局注册</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162141.png" alt="image-20210718162140393"></p></li><li><p>使用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162205.png" alt="image-20210718162205010"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162236.png" alt="image-20210718162234966"></p></li></ol><h2 id="七、构建便签列表组件ItemList"><a href="#七、构建便签列表组件ItemList" class="headerlink" title="七、构建便签列表组件ItemList"></a>七、构建便签列表组件ItemList</h2><ol><li><p>创建ItemList文件</p></li><li><p>编写组件类，获取便签的数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718164042.png" alt="image-20210718164041544"></p></li></ol><h2 id="八、构建便签项MemoItem"><a href="#八、构建便签项MemoItem" class="headerlink" title="八、构建便签项MemoItem"></a>八、构建便签项MemoItem</h2><ol><li><p>MemoItem是MemoList 的子组件</p></li><li><p>创建prop接收父组件的传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718170807.png" alt="image-20210718170806446"></p></li><li><p>父组件传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171108.png" alt="image-20210718171107567"></p></li><li><p>ActionHelper添加翻译分类的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171241.png" alt="image-20210718171240621"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171305.png" alt="image-20210718171304877"></p></li></ol><h2 id="九、MemoItem的删除"><a href="#九、MemoItem的删除" class="headerlink" title="九、MemoItem的删除"></a>九、MemoItem的删除</h2><ol><li><p>创建删除方法，绑定到按钮</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718172923.png" alt="image-20210718172920028"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718173036.png" alt="image-20210718173035896"></p></li></ol><h2 id="十、创建新增对话框的组件"><a href="#十、创建新增对话框的组件" class="headerlink" title="十、创建新增对话框的组件"></a>十、创建新增对话框的组件</h2><ol><li><p>创建MemoEditor组件</p></li><li><p>创建全局的isshow属性</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195415.png" alt="image-20210718195414493"></p></li><li><p>设置新增按钮，展示新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210719000857.png" alt="image-20210719000856425"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195700.png" alt="image-20210718195659454"></p></li><li><p>MemoEditor的退出按钮，取消div的展示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195614.png" alt="image-20210718195613690"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195636.png" alt="image-20210718195633344"></p></li><li><p>实现新增：界面的按钮、文本框需要和memo建立关系，采用v-model实现双向绑定</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203130.png" alt="image-20210718203108285"></p></li><li><p>新增保存：0.进行数据校验，1.将数据保存到localstorage 2.隐藏新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203322.png" alt="image-20210718203321636"></p></li></ol><h2 id="十一、编写Edit功能"><a href="#十一、编写Edit功能" class="headerlink" title="十一、编写Edit功能"></a>十一、编写Edit功能</h2><ol><li><p>对编辑来说，第一步：获取已经有的数据</p></li><li><p>编辑内容</p></li><li><p>将编辑的内容保存到本地</p></li><li><p>使用vuex进行数据传递</p></li><li><p>点击编辑的时候，创建数据副本，并且传到vuex中</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224828.png" alt="image-20210718224827848"></p></li><li><p>vuex中建立方法，供组件调用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224936.png" alt="image-20210718224935837"></p></li><li><p>MemoEditor创建的时候，拿到数据，赋值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225115.png" alt="image-20210718225114919"></p></li><li><p>对新增和修改保存操作的梳理</p><p>新增的时候，初始化了参数id是-1，通过id判断操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225408.png" alt="image-20210718225406704"></p></li></ol><h2 id="十二、点击分类，展示页面"><a href="#十二、点击分类，展示页面" class="headerlink" title="十二、点击分类，展示页面"></a>十二、点击分类，展示页面</h2><ol><li><p>在vuex里创建全局数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234840.png" alt="image-20210718234839548"></p></li><li><p>写doFilterByCateId()方法，当点击不同的li,展示不同的分类list</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234938.png" alt="image-20210718234937947"></p></li><li><p>计算分类数封装doFilter()</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718235205.png" alt="image-20210718235204119"></p></li></ol><h2 id="十三、创建gitee、放到仓库上"><a href="#十三、创建gitee、放到仓库上" class="headerlink" title="十三、创建gitee、放到仓库上"></a>十三、创建gitee、放到仓库上</h2><p><a href="https://gitee.com/porous-crystal/vue-ts-memo-item.git">https://gitee.com/porous-crystal/vue-ts-memo-item.git</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue2.x总结</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-vue2.x%20%E6%80%BB%E7%BB%93/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-vue2.x%20%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue的安装"><a href="#一、vue的安装" class="headerlink" title="一、vue的安装"></a>一、vue的安装</h2><ol><li>在官网下载vue.min.js 然后在script标签中引入。</li><li>使用CDN方法，下载，然后在script标签中引入。</li><li>使用npm安装。</li></ol><h2 id="二、vue的目录结构"><a href="#二、vue的目录结构" class="headerlink" title="二、vue的目录结构"></a>二、vue的目录结构</h2><ol><li>build：是项目打包后的文件夹</li><li>config：配置目录，包括端口号等</li><li>node_modules: 项目的依赖模块</li><li>src：开发目录<ol><li>assets：放置图片等</li><li>components:组件文件</li><li>App.vue 项目入口文件</li><li>main.js 项目的核心文件</li></ol></li><li>static:静态资源目录，图片</li><li>test:测试目录，可以删除</li><li>.xxx文件：都是配置文件</li><li>index.html：首页入口文件</li><li>package.json:项目配置文件</li><li>README.md :项目的说明文档</li></ol><h2 id="三、Vue-js-起步"><a href="#三、Vue-js-起步" class="headerlink" title="三、Vue.js 起步"></a>三、Vue.js 起步</h2><ol><li>每个Vue应用都需要通过实例化Vue来实现。</li><li>Vue构造器中有一个el参数，他是DOM元素的id</li><li>data用于定义属性</li><li>methods用于定义函数</li><li>Vue实例被创建时，它向Vue的响应式系统中加入其data对象中能找到的所有属性</li></ol><h2 id="四、Vue-js-计算属性"><a href="#四、Vue-js-计算属性" class="headerlink" title="四、Vue.js 计算属性"></a>四、Vue.js 计算属性</h2><ol><li><p>methods和computed在效果上是一样的，</p></li><li><p>computed基于他的依赖缓存，只有相关依赖发生改变的时候才会重新获取值</p></li><li><p>methods在重新渲染的时候，函数会重新被调用执行</p></li><li><p>computed只有getter，但是在需要的时候可以加入set</p></li><li><p>computed和methods的比较</p></li><li><p>computed的依赖发生变化，会实时更新，methods只有触发才会调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        长度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;length&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        宽度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;width&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        面积：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;areas&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        和的值为:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">length</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">areas</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> areas = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    areas = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> areas;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144528.png" alt="image-20210716095112614"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144532.png" alt="image-20210716095200442"></p></li></ol><h2 id="五、Vue-js的监听属性"><a href="#五、Vue-js的监听属性" class="headerlink" title="五、Vue.js的监听属性"></a>五、Vue.js的监听属性</h2><ol><li><p>watch 监听响应数据的变化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        千米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;kilometers&quot;</span> /&gt;</span><br>        米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;meters&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#main&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-number">0</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.meters = <span class="hljs-built_in">this</span>.kilometers * <span class="hljs-number">1000</span>;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val / <span class="hljs-number">1000</span>;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        demo.$watch(<span class="hljs-string">&#x27;kilometers&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;info&quot;</span>).innerHTML = <span class="hljs-string">&quot;修改前值为: &quot;</span> + oldValue + <span class="hljs-string">&quot;，修改后值为: &quot;</span> + newValue;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="六、Vue-js-事件处理器"><a href="#六、Vue-js-事件处理器" class="headerlink" title="六、Vue.js 事件处理器"></a>六、Vue.js 事件处理器</h2><ol><li>v-on：进行事件的监听</li></ol><h2 id="七、Vue-js-组件"><a href="#七、Vue-js-组件" class="headerlink" title="七、Vue.js 组件"></a>七、Vue.js 组件</h2><ol><li><p>注册一个全局组件的语法</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">Vue.component(tagName, options)<br><span class="hljs-comment">// 组件</span><br><span class="hljs-params">&lt;tagName&gt;</span><span class="hljs-params">&lt;/tagName&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>prop子组件接受父组件传递的数据</p></li><li><p>动态props，使用v-bind在父组件绑定props的值，当父组件的值变化时，子组件也会变化</p></li><li><p>props提供验证，可以定制props的验证方式</p></li></ol><h2 id="八、自定义事件"><a href="#八、自定义事件" class="headerlink" title="八、自定义事件"></a>八、自定义事件</h2><ol><li>父组件通过props把值传给子组件</li><li>子组件想要把值传回去，就需要自定义事件</li><li>父组件使用v-on 监听子组件值的变化</li><li>子组件通过$emit触发事件</li><li>data必须是一个函数</li></ol><h2 id="九、Vue-js-路由"><a href="#九、Vue-js-路由" class="headerlink" title="九、Vue.js 路由"></a>九、Vue.js 路由</h2><ol><li><p>router的相关属性</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 同上 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;home&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;register&#x27;, query: &#123; plan: &#x27;private&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>replace 当点击时，会调用router.replace ,而不是router.push ，导航不会留下历史记录</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/abc&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">replace</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>append  在当前路径前添加路径，例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;relative/path&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">append</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>tag 将<router-link>渲染成某种标签</p></li><li><p>event 声明用来触发导航的事件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span> = <span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/route1&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">event</span> = <span class="hljs-string">&quot;mouseover&quot;</span>&gt;</span>Router Link 1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="十、Vue-js-混入"><a href="#十、Vue-js-混入" class="headerlink" title="十、Vue.js 混入"></a>十、Vue.js 混入</h2><ol><li>混入定义了一些可复用的方法或者计算属性</li><li>当组件混入对象时,所有混入对象选项将被混入组件本身</li><li>慎用全局混入</li></ol><h2 id="十一、ajax和axios的区别"><a href="#十一、ajax和axios的区别" class="headerlink" title="十一、ajax和axios的区别"></a>十一、ajax和axios的区别</h2><ol><li><p>ajax</p><p>优点：</p><p>传统的Ajax指的是XMLHttpRequest，最早出现的发送后端请求技术，核心使用的是XMLHttpRequest对象</p><p>JQuery ajax是对原生XHR的封装，除此之外还提供了对JSONP的支持</p><p>缺点：</p><p>本身是针对MVC编程，不符合现在前端MVVM的浪潮</p><p>基于原生的XHR开发， XHR本身的架构不清晰</p><p>JQuery整个项目太大，为了使用Ajax就引入JQuery非常的不合理</p><p>不关注分离原则</p><p>配置和调用非常混乱</p><p>用法：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$.ajax(&#123;<br>    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url:url,<br>    <span class="hljs-keyword">data</span>:<span class="hljs-keyword">data</span>,<br>    dataType:dataType,<br>    success:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;,<br>    error:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>axios</p><p>优点：</p><p>基于promise用于浏览器和nodejs的HTTP客户端</p><p>本质也是对原生XHR的封装，但是是Promise的实现，</p><p>从浏览器创建XMLHttpRequest</p><p>支持promise API</p><p>客户端支持防止CSRF</p><p>提供一些并发请求的接口</p><p>从nodejs创建http请求</p><p>转换请求数据和响应数据</p><p>取消请求</p><p>自动转换json数据</p><p>用法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">axios(&#123;<br>method:<span class="hljs-string">&#x27;post&#x27;</span>,<br>ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;/user/1245&#x27;</span>,<br>dat<span class="hljs-variable">a:</span>&#123;<br>firstname:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>lastname:<span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;,<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(response)</span>&#123;</span><br><br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span>&#123;</span><br><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"><a href="#十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）" class="headerlink" title="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"></a>十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）</h2><p>MVVM</p><ol><li><p>MVVM源自经典的MVC模式</p></li><li><p>MVVM的核心是viewmodel层</p></li><li><p>viewmodel层是一个中转站，向上与视图层进行双向的数据绑定，向下与model层通过接口进行数据交互</p></li><li><p>view层展示的不是model层的数据，而是viewmodel层的数据</p></li><li><p>viewmodel层进行数据交互，这就完全解耦了view层和model层</p></li><li><p>这种解耦是前后端分离方案最重要的一环</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144545.png" alt="img"></p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144548.jpg" alt="562c11dfa9ec8a13ab6935fbfc03918fa0ecc0be"></p><p>MVC</p><ol><li>controller负责将model的数据用view展示出来</li><li>model是数据的管理者，负责存放数据</li><li>model提供接口，可以使得controller去调用他存放的数据</li><li>view：数据的显示部分，视图是根据模型创建的</li><li>controller 负责从视图读取数据，控制用户输入，并且向模型发送数据</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144552.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144559.png" alt="img"></p><h2 id="十三、css伪类和伪元素的区别"><a href="#十三、css伪类和伪元素的区别" class="headerlink" title="十三、css伪类和伪元素的区别"></a>十三、css伪类和伪元素的区别</h2><ol><li>伪类与伪元素的区别在于：有没有创建一个文档树之外的元素、</li><li>伪类是在已有的DOM元素下操作：:hover、:active</li><li>伪元素是创建一些不在DOM树存在的元素 ： ::after、::before</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_42068550/article/details/89480350">MVC和MVVM的区别</a></p><p><a href="https://blog.csdn.net/hyld_lzw/article/details/91346726?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;amp;spm=1001.2101.3001.4242">ajax和axios、fetch的区别</a></p><p><a href="https://www.html.cn/qa/css3/11853.html">css伪类和伪元素的区别是什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-创建vue项目</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建（vue2-X）"><a href="#一、环境搭建（vue2-X）" class="headerlink" title="一、环境搭建（vue2.X）"></a>一、环境搭建（vue2.X）</h2><ol><li><p>安装node.js 官网下载（本人是解压版，解压后是如图所示）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714202421911.png" alt="image-20210714202421911"></p></li><li><p>安装vue-cli （vue 2.x）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203045168.png" alt="image-20210714203045168"></p></li><li><p>输入命令 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">vue init webpack <span class="hljs-keyword">my</span>-project<br></code></pre></td></tr></table></figure></li><li><p>设置默认属性</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203426287.png" alt="image-20210714203426287"></p></li><li><p>创建项目成功</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203451146.png" alt="image-20210714203451146"></p></li><li><p>访问项目<a href="http://localhost:8080/#/">http://localhost:8080/#/</a></p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203547293.png" alt="image-20210714203547293"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue教程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-vue%E6%95%99%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue-vue%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue-js-教程"><a href="#一、vue-js-教程" class="headerlink" title="一、vue.js 教程"></a>一、vue.js 教程</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;hello vue.js&#x27;</span></span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;)</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">// 结果：hello vue.js</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-声明合并</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数的合并"><a href="#一、函数的合并" class="headerlink" title="一、函数的合并"></a>一、函数的合并</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、接口的合并"><a href="#二、接口的合并" class="headerlink" title="二、接口的合并"></a>二、接口的合并</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts">interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br>&#125;<br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 相当于：</span><br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 注意，合并的属性的类型必须是唯一的</span><br></code></pre></td></tr></table></figure><h2 id="三、接口中方法的合并"><a href="#三、接口中方法的合并" class="headerlink" title="三、接口中方法的合并"></a>三、接口中方法的合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    weight: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、类的合并"><a href="#四、类的合并" class="headerlink" title="四、类的合并"></a>四、类的合并</h2><p>类的合并与接口的合并规则一致。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-泛型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、泛型"><a href="#一、泛型" class="headerlink" title="一、泛型"></a>一、泛型</h2><ol><li><p>小例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* 小例 */</span><br><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Array(<span class="hljs-params">length</span>: <span class="hljs-params">number</span>, <span class="hljs-params">value</span>: <span class="hljs-params">any</span>)</span>: Array&lt;any&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">[]</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>= value;<br>  &#125;<br>  return result;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-built_in">array</span> = create<span class="hljs-constructor">Array(3,&#x27;<span class="hljs-params">x</span>&#x27;)</span>;<br>console.log(<span class="hljs-built_in">array</span>); <span class="hljs-comment">// [ &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27; ]</span><br><span class="hljs-comment">// 缺点是返回值的类型没有定义，我们应该要求数组中的每一项都是value的类型</span><br></code></pre></td></tr></table></figure></li><li><p>泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArray1</span>&lt;<span class="hljs-title">T</span>&gt; (<span class="hljs-params">length:<span class="hljs-built_in">number</span>,value:T</span>):<span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">var</span> array1 = createArray1(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;y&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(array1); <span class="hljs-comment">// [ &#x27;y&#x27;, &#x27;y&#x27;, &#x27;y&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>多个类型参数</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-comment">/* 多个类型参数 */</span><br>function swap&lt;<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>&gt;(tuple:[<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>]):[<span class="hljs-symbol">U</span>,<span class="hljs-symbol">T</span>]&#123;<br>    return [tuple[<span class="hljs-number">1</span>],tuple[<span class="hljs-number">0</span>]];<br>&#125;<br>console.log(swap([<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;seven&#x27;</span>])); // [ <span class="hljs-string">&#x27;seven&#x27;</span>, <span class="hljs-number">7</span> ]<br></code></pre></td></tr></table></figure></li><li><p>泛型约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型约束 */</span><br><span class="hljs-keyword">interface</span> Lengthwise &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logging</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Lengthwise</span>&gt;(<span class="hljs-params">args: T</span>): <span class="hljs-title">T</span> </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(args.length); <span class="hljs-comment">// 3</span><br>  <span class="hljs-keyword">return</span> args;<br>&#125;<br>logging(<span class="hljs-string">&#x27;123&#x27;</span>); <br></code></pre></td></tr></table></figure></li><li><p>泛型接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型接口 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc &#123;<br>    &lt;T&gt;(length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray2: CreateArrayFunc;<br>createArray2 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">let</span> result :T[] = [];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result[i] =value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray2(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">// [ &#x27;z&#x27;, &#x27;z&#x27;, &#x27;z&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>泛型参数提前到接口上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型参数提前到泛型接口上 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc1&lt;T&gt; &#123;<br>    (length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray3: CreateArrayFunc1&lt;<span class="hljs-built_in">any</span>&gt;;<br>createArray3 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray3(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;W&#x27;</span>)); <span class="hljs-comment">// [ &#x27;W&#x27;, &#x27;W&#x27;, &#x27;W&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>泛型类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericNumber</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-attr">zeroValue</span>:T;<br>    add:<span class="hljs-function">(<span class="hljs-params">x:T,y:T</span>) =&gt;</span>T; <span class="hljs-comment">// 函数</span><br>&#125;<br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> GenericNumber&lt;<span class="hljs-built_in">number</span>&gt;();<br>myGenericNumber.zeroValue=<span class="hljs-number">0</span>;<br>myGenericNumber.add=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>泛型参数的默认类型</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/* 泛型参数的默认类型 */<br>function createArray5&lt;T = <span class="hljs-built_in">string</span>&gt;(<span class="hljs-built_in">length</span>: <span class="hljs-built_in">number</span>, value: T): Array&lt;T&gt; &#123;<br>    let <span class="hljs-literal">result</span>: T[] = [];<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-literal">result</span>[i] = value;<br>    &#125;<br><span class="hljs-built_in">    return</span> <span class="hljs-literal">result</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类与接口</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><ol><li><p>举例：</p><p>防盗门是门的子类，</p><p>防盗门有报警的功能</p><p>车有报警的功能</p><p>报警提取成接口，防盗门和车都去实现他</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/* 类和接口 */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Alarm</span> </span>&#123;<br>    alert(): <span class="hljs-type">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityDoor</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Door</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;securityDoor alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类实现多个接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类实现多个接口 */</span><br><span class="hljs-keyword">interface</span> Alarm1 &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Light&#123;<br>    lightOn():<span class="hljs-built_in">void</span>;<br>    lightOff():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car1</span> <span class="hljs-title">implements</span> <span class="hljs-title">Alarm1</span>,<span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light on&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOff</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light off&#x27;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口继承接口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/* 接口继承接口 */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Alarm2</span> &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Light2</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Alarm2</span>&#123; <span class="hljs-comment">// 除了继承父级的方法，还有定义了自己的方法</span><br>    lighton():<span class="hljs-built_in">void</span>;<br>    lightoff():<span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口继承类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> Point3d <span class="hljs-keyword">extends</span> Point &#123; <span class="hljs-comment">// Point3d 实际上继承的是Point的实例的类型</span><br>    <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> point3d: Point3d = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">z</span>: <span class="hljs-number">3</span> &#125;;<br></code></pre></td></tr></table></figure></li><li><p>接口为什么可以继承类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口为什么可以继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <span class="hljs-comment">// Point1 当做类来使用</span><br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> point1 = <span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">/*****************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printPoint</span> (<span class="hljs-params">p:Point1</span>)</span>&#123; <span class="hljs-comment">// Point1当做类型来用</span><br>    <span class="hljs-built_in">console</span>.log(p.x,p.y); <span class="hljs-comment">// 1 2 </span><br>&#125;<br>printPoint(<span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <br></code></pre></td></tr></table></figure></li><li><p>声明Point类的时候，除了会创建一个名为Point类之外，还创建了一个名为Point的类型</p></li><li><p>声明Point类的时候，创建的Point类型是不包含构造函数的</p></li><li><p>声明Point类的时候,创建的Point类型只包含其中的实例属性和实例方法</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类的概念"><a href="#一、类的概念" class="headerlink" title="一、类的概念"></a>一、类的概念</h2><ol><li><p>类：定义一个抽象物体的特点，包括他的属性和方法</p></li><li><p>对象：类的实例，通过new实现</p></li><li><p>面向对象的三大特性：封装、继承、多态</p></li><li><p>封装：将对数据操作的细节隐藏起来，只暴露对外的接口</p></li><li><p>继承：子类继承父类，而且还可以有自己更具体的特性</p></li><li><p>多态：由继承产生的相关的不同的类，对同一个方法有不同的相应。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210713143911.png" alt="image-20210713143807626"></p></li></ol><h2 id="二、ES6类的用法"><a href="#二、ES6类的用法" class="headerlink" title="二、ES6类的用法"></a>二、ES6类的用法</h2><ol><li><p>属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的属性和方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123; <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a.sayHi()); <span class="hljs-comment">//my name is Jack</span><br></code></pre></td></tr></table></figure></li><li><p>类的继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* 类的继承 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>constructor(name)&#123;<br>    <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 使用super调用父类的构造函数和方法</span><br>    console.log(<span class="hljs-keyword">this</span>.name); <span class="hljs-comment">//cat</span><br><br>&#125;<br>sayHi()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-symbol">&#x27;Meo</span>w&#x27; + <span class="hljs-keyword">super</span>.sayHi();<br>&#125;<br>&#125;<br>let cat = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>(<span class="hljs-symbol">&#x27;ca</span>t&#x27;);<br>console.log(cat.sayHi()); <span class="hljs-comment">// Meowmy name is cat</span><br></code></pre></td></tr></table></figure></li><li><p>存储器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 存取器 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Jack&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setter:&#x27;</span> + value); <span class="hljs-comment">// setter:Kitty</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> animal = <span class="hljs-keyword">new</span> Animal1(<span class="hljs-string">&#x27;Kitty&#x27;</span>);<br>animal.name = <span class="hljs-string">&#x27;tom&#x27;</span>; <span class="hljs-comment">// setter:tom</span><br></code></pre></td></tr></table></figure></li><li><p>静态方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 静态方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123; <span class="hljs-comment">// 构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">isAnimal</span>(<span class="hljs-params">a</span>)</span> &#123; <span class="hljs-comment">// 静态方法</span><br>        <span class="hljs-keyword">return</span> a <span class="hljs-keyword">instanceof</span> Animal2;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Animal2(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(Animal2.isAnimal(a1)); <span class="hljs-comment">// true //静态方法不需要实例，类直接调用</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、ES7类中的用法"><a href="#二、ES7类中的用法" class="headerlink" title="二、ES7类中的用法"></a>二、ES7类中的用法</h2><ol><li><p>实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7实例属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal3</span></span>&#123;<br>    name=<span class="hljs-string">&#x27;Jack3&#x27;</span>; <span class="hljs-comment">// 直接在类里定属性</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Animal3();<br><span class="hljs-built_in">console</span>.log(a2.name); <span class="hljs-comment">// Jack3</span><br></code></pre></td></tr></table></figure></li><li><p>静态属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7静态属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal4</span></span>&#123;<br>    <span class="hljs-keyword">static</span> num =<span class="hljs-number">42</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(Animal4.num); <span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="三、ts中类的用法"><a href="#三、ts中类的用法" class="headerlink" title="三、ts中类的用法"></a>三、ts中类的用法</h2><ol><li><p>public 修饰符（开放的属性和方法）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Animal5 &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a3 = <span class="hljs-built_in">new</span> Animal5(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a3.name); // Jack5<br>a3.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>console.log(a3.name); // tom5<br></code></pre></td></tr></table></figure></li><li><p>private修饰符（无法直接读取）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* private */</span><br><span class="hljs-keyword">class</span> Animal6 &#123;<br>    private <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a4 = <span class="hljs-built_in">new</span> Animal6(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a4.name); <br>a4.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>// 报错Property <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">is</span> private <span class="hljs-keyword">and</span> <span class="hljs-keyword">only</span> accessible <span class="hljs-keyword">within</span> <span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;Animal6&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>private（子类无法访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* private 子类*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> name;<br>    public constructor(name) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    constructor(name) &#123;<br>        <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 访问父类</span><br>        console.log(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>protected修饰符（子类可以访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* protected修饰符 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> name;<br>    public constructor(name)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    constructor(name)&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        console.log(<span class="hljs-keyword">this</span>.name);<br>        <br>    &#125;<br>&#125;<br>let cat8 = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat8</span>(<span class="hljs-symbol">&#x27;cat</span>8&#x27;)<br>console.log(cat8); <span class="hljs-comment">// Cat8 &#123; name: &#x27;cat8&#x27; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修饰符和readonly可以使用在构造函数参数中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 参数属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal9</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// tom9</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> cat9  = <span class="hljs-keyword">new</span> Animal9(<span class="hljs-string">&#x27;tom9&#x27;</span>); <br></code></pre></td></tr></table></figure></li><li><p>只读属性readonly</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* readonly 可以用在属性 构造函数  */</span><br><span class="hljs-keyword">class</span> Animal10&#123;<br>    readonly <span class="hljs-type">name</span>; <br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a10 = <span class="hljs-built_in">new</span> Animal10(<span class="hljs-string">&#x27;tom10&#x27;</span>);<br>console.log(a10.name); // tom10<br>a10.name = <span class="hljs-string">&#x27;jack 10&#x27;</span> //  Cannot assign <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;name&#x27;</span> because it <span class="hljs-keyword">is</span> a <span class="hljs-keyword">read</span>-<span class="hljs-keyword">only</span> property.<br></code></pre></td></tr></table></figure></li><li><p>readonly和其他访问修饰符同时存在，要放到后面</p></li><li><p>抽象类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 抽象类 不可以被实例化 抽象类的方法必须被子类实现 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal11</span> </span>&#123; <span class="hljs-comment">// 抽象类</span><br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> sayHi(); <span class="hljs-comment">// 抽象方法</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat11</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal11</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`meow, my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>); <span class="hljs-comment">// meow, my name is tom11</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat11 = <span class="hljs-keyword">new</span> Cat11(<span class="hljs-string">&#x27;tom11&#x27;</span>);<br>cat11.sayHi();<br></code></pre></td></tr></table></figure></li><li><p>类的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal12</span> </span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    sayHi():<span class="hljs-built_in">string</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat12:Animal12 = <span class="hljs-keyword">new</span> Animal12(<span class="hljs-string">&#x27;tom12&#x27;</span>); <span class="hljs-comment">// 指定cat12的类型是Animal12 而且进行了初始化</span><br><span class="hljs-built_in">console</span>.log(cat12.sayHi()); <span class="hljs-comment">// my name is tom12</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型别名</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型别名"><a href="#一、类型别名" class="headerlink" title="一、类型别名"></a>一、类型别名</h2><ol><li><p>使用type创建类型别名，多应用于联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> aa = <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">type</span> bb = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">let</span> a: aa = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> b: bb = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></td></tr></table></figure></li></ol><h2 id="二、字符串字面量类型"><a href="#二、字符串字面量类型" class="headerlink" title="二、字符串字面量类型"></a>二、字符串字面量类型</h2><ol><li><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 字符串字面量类型 */</span><br>type EventNames = <span class="hljs-string">&#x27;click&#x27;</span>| <span class="hljs-string">&#x27;scroll&#x27;</span>| <span class="hljs-string">&#x27;mousemove&#x27;</span>;<br><span class="hljs-keyword">function</span> handleEvent (ele:Element,event:EventNames)&#123;<br> <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br>handleEvent(document.getElementById(<span class="hljs-string">&#x27;hello&#x27;</span>),<span class="hljs-string">&#x27;scroll&#x27;</span>); <span class="hljs-regexp">//</span> 运行正常<br><span class="hljs-regexp">//</span> document is not defined (操作DOM和BOM 只能在浏览器环境下进行)<br><span class="hljs-regexp">//</span> handleEvent(document.getElementById(<span class="hljs-string">&#x27;world&#x27;</span>),<span class="hljs-string">&#x27;dbclick&#x27;</span>); <span class="hljs-regexp">//</span> 报错 因为没有<span class="hljs-string">&#x27;dbcllick&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>类型别名和字符串字面量类型都是用type来定义</p></li></ol><h2 id="三、元组"><a href="#三、元组" class="headerlink" title="三、元组"></a>三、元组</h2><ol><li><p>数组合并类型相同的对象，元组合并类型不同的对象</p></li><li><p>元组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">25</span>];<br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">0</span>]); <span class="hljs-comment">// tom</span><br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure></li><li><p>元组赋值</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">let tom1: [string, number];<br>tom1 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];  // 必须先赋值，不然报错<br>tom1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom1&#x27;</span>;<br>tom1[<span class="hljs-number">1</span>] = <span class="hljs-number">25</span>;<br>console.log(tom1[<span class="hljs-number">0</span>]);<br>console.log(tom1[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure></li><li><p>可以赋值一个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom2: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom2 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom2&#x27;</span>; <span class="hljs-comment">// 只赋值一个值</span><br><span class="hljs-built_in">console</span>.log(tom2[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></li><li><p>直接变量初始化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom3: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom3 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>]; <span class="hljs-comment">// 直接初始化，必须赋值所有项</span><br></code></pre></td></tr></table></figure></li><li><p>越界元素不允许</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom4: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom4 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom4.push(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tom4); <span class="hljs-comment">// [ &#x27;jack&#x27;, 0, &#x27;tom&#x27; ]</span><br>tom4.push(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 无法push,必须push元组中的类型</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、枚举"><a href="#四、枚举" class="headerlink" title="四、枚举"></a>四、枚举</h2><ol><li><p>枚举的关键字enum</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;Sun&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>枚举成员会被赋值从0开始递增的数字，同时也会对枚举值和枚举名进行反向映射</p></li><li><p>给枚举项手动赋值，没有赋值的会递增上一个的枚举值</p></li><li><p>手动赋值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值 */</span><br>enum Days1 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days1[<span class="hljs-string">&#x27;Wed&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>手动赋值小数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值可以是小数 */</span><br>enum Days2 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1.5</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days2[<span class="hljs-string">&#x27;Tue&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">2.5</span><br></code></pre></td></tr></table></figure></li><li><p>常数枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 常输枚举 不可以包含计算属性 <span class="hljs-operator">*/</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p>外部枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 外部枚举 <span class="hljs-operator">*/</span><br><span class="hljs-variable">declare</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions2</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions2</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span> <span class="hljs-operator">//</span> <span class="hljs-punctuation">(</span>运行时会报错 <span class="hljs-variable">Directions2</span> <span class="hljs-variable">is</span> <span class="hljs-variable">not</span> <span class="hljs-variable">defined</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-内置对象</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、内置对象"><a href="#一、内置对象" class="headerlink" title="一、内置对象"></a>一、内置对象</h2><ol><li><p>ECMAScript的内置对象:Boolean、Error、Date、RegExp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">let b:Boolean = new Boolean(1);<br>let e:Error = new Error(&#x27;Error occurred&#x27;);<br>let d:Date = new Date();<br>let r:RegExp = /[a-z]/;<br></code></pre></td></tr></table></figure></li><li><p>DOM和BOM的内置对象：Document、HTMLElement、Event、NodeList</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body: HTMLElement = <span class="hljs-built_in">document</span>.body;<br><span class="hljs-keyword">let</span> allDiv: NodeList = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e:MouseEvent</span>)</span>&#123;<br><span class="hljs-comment">// </span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-声明文件</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型断言</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型断言"><a href="#一、类型断言" class="headerlink" title="一、类型断言"></a>一、类型断言</h2><ol><li><p>类型断言可以手动指定一个值的类型</p></li><li><p>我觉得更好理解的一种说法：就是告诉编译器你不用做类型检查了，相信我，它就是这个类型</p></li><li><p>推荐使用 “值 as 类型”的写法</p></li><li><p>类型断言的用途：</p><ol><li><p>将一个联合类型指定为其中的一个类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx">/* 将一个联合类型断言为其中一个类型§ */<br>interface Cat &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br>interface Fish &#123;<br>    name: string;<br>    swim(): void;<br>&#125;<br>function getName(anmial: Cat | Fish) &#123;<br>    return anmial.name; // 只能访问公共的属性或者方法<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx">// function isFish(anmial: Cat | Fish) &#123;<br>//     if (typeof anmial.swim === &#x27;function&#x27;) &#123; // 会报错，无法访问私有的<br>//         return true;<br>//     &#125; else &#123;<br>//         return false;<br>//     &#125;<br>// &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx">function isFish2(animal: Cat | Fish) &#123;<br>    if (typeof (animal as Fish).swim === &#x27;function&#x27;) &#123; // 使用类型断言欺骗ts编译器<br>        return true;<br>    &#125;<br>    return false;<br>&#125;<br>const tom: Cat = &#123; // 定义变量<br>    name: &#x27;Tom&#x27;,<br>    run() &#123; console.log(&#x27;swim&#x27;) &#125;<br>&#125;;<br>console.log(isFish2(tom));<br></code></pre></td></tr></table></figure></li><li><p>将一个父类断言成更加具体的子类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">apiError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    code: number = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">httpError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    statusCode: number = <span class="hljs-number">200</span>;<br>&#125;<br>function isApiError(error: <span class="hljs-type">Error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (typeof (error as apiError).code === <span class="hljs-symbol">&#x27;numbe</span>r&#x27;) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将任何一个类型断言成any(慎用)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 将任何一个类型断言为 any */</span><br><span class="hljs-regexp">//</span> const foo: number =<span class="hljs-number">1</span>;<br><span class="hljs-regexp">//</span> foo.length =<span class="hljs-number">1</span>; (会报错)<br>(window as any).foo =<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>将any断言成一个具体的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 将any断言成一个具体的类型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheData</span>(<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.cache[key];<br>&#125;<br><span class="hljs-keyword">var</span> tom1 = getCacheData(<span class="hljs-string">&#x27;args&#x27;</span>);<br>tom.run();<br></code></pre></td></tr></table></figure></li></ol></li><li><p>类型断言的限制：要使得A断言为B，只需要A兼容B或者B兼容A即可</p></li><li><p>双重断言，不到万不得已，不使用</p></li><li><p>类型断言VS类型转换：类型断言更像是类型的选择，而不是类型的转换</p></li><li><p>类型断言VS 类型声明：类型声明比类型断言更加严格</p></li><li><p>类型断言VS泛型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx">/* 类型断言VS泛型 */<br>function getCacheData1&lt;T&gt;(key: string): T &#123;<br>    return (window as any).cache[key];<br>&#125;<br><br>interface Cat1 &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br><br>const tom3 = getCacheData1&lt;Cat1&gt;(&#x27;args&#x27;);<br>tom3.run();<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-函数类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数是js的一等公民"><a href="#一、函数是js的一等公民" class="headerlink" title="一、函数是js的一等公民"></a>一、函数是js的一等公民</h2><ol><li><p>js的函数声明</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">/* js函数声明 */<br><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>js的函数表达式</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">/* js函数表达式 */<br>let mySum = <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ts的函数声明</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* ts函数声明 */</span><br><span class="hljs-keyword">function</span> sum1(x: number, y: number): number &#123;<br>    return x + y;<br>&#125;<br><span class="hljs-regexp">//</span> 输入多余或者少于的参数都是不被允许的，会报错<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>ts的函数表达式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts函数表达式 */</span><br><span class="hljs-keyword">let</span> mySum1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ts的箭头函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts箭头函数 */</span><br><span class="hljs-keyword">let</span> mySum2: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>接口定义函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口定义函数 */</span><br><span class="hljs-keyword">interface</span> Func1 &#123;<br>    (source: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-keyword">let</span> myFun: Func1;<br>myFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, arg2: <span class="hljs-built_in">string</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arg1.search(arg2) !== <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/* 返回结果true */</span><br><span class="hljs-built_in">console</span>.log(myFun(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li><p>ts函数的可选参数（必须写在最后，可选参数后面不可以出现必须函数了）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts的可选参数 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat, tom);<br><span class="hljs-comment">// 结果：tomcat tom</span><br></code></pre></td></tr></table></figure></li><li><p>ts函数参数的默认值（自动识别默认值的参数是可选参数，不在受[可选参数必须在必须参数后面]的限制）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname1</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat1, tom1);<br><span class="hljs-comment">// 结果：tomcat tomcat</span><br></code></pre></td></tr></table></figure></li><li><p>ts 函数重载</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/* ts函数重载 */<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> | void &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-number">123</span>));<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li><p>重载要求函数名相同，但是参数的类型、参数的个数不相同，跟java的重载相似</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-数组类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数组的表示方法"><a href="#一、数组的表示方法" class="headerlink" title="一、数组的表示方法"></a>一、数组的表示方法</h2><ol><li><p>[类型 + 方括号] 表示法</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golo"><span class="hljs-keyword">let</span> <span class="hljs-keyword">array</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>泛型表示方法</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">let array3 <span class="hljs-symbol">:Array&lt;number&gt;</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>接口表示方法(一般表示类数组才会用到)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数值数组</span><br><span class="hljs-keyword">interface</span> NumberArray&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array4 : NumberArray = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">// 字符数组</span><br><span class="hljs-keyword">interface</span> NumberArray1&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array5 : NumberArray1 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>];<br></code></pre></td></tr></table></figure></li><li><p>类数组不是数组类型 （比如arguments、IArguments）</p></li><li><p>类数组不可以普通的数组来描述，应该用接口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 类数组(arguments是类数组,不可以用普通的方式表示，要用接口)<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> sum ()&#123;<br><span class="hljs-regexp">//</span>     let args :number[] = arguments;(会报错)<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> 正常运行<br><span class="hljs-keyword">function</span> sum ()&#123;<br>    let args : &#123;<br>        [index:number] : number;  <span class="hljs-regexp">//</span> 类型<br>        length:number; <span class="hljs-regexp">//</span> 属性<br>        callee:Function; <span class="hljs-regexp">//</span> 属性<br>    &#125; = arguments;<br>&#125;<br><span class="hljs-keyword">function</span> sum2 ()&#123;<br>    let args: IArguments = arguments; <span class="hljs-regexp">//</span> IArguments是ts定义好的类型<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>any在数组中的应用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> list : <span class="hljs-built_in">any</span>[] = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-attr">data</span>:<span class="hljs-string">&#x27;你好&#x27;</span>&#125;];<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-对象类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对象类型-接口"><a href="#一、对象类型-接口" class="headerlink" title="一、对象类型-接口"></a>一、对象类型-接口</h2><ol><li><p>ts中对象通过接口来实现</p></li><li><p>确定属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> tom:Person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">25</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义了一个接口Person,定义了一个变量：tom ,他的类型是Person，约束了变量的形状必须和接口保持一致</p></li><li><p>接口一般会大写</p></li><li><p>定义的变量比接口多一些属性或者少一些属性都是不允许的</p></li><li><p>赋值的时候，变量的形状必须和接口保持一致</p></li><li><p>可选属性：</p></li><li><p>如果我们不希望完全匹配一个形状，我们可以设置可选属性（但是并不允许添加未定义的属性）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Car &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> car1:Car = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>任意属性：</p></li><li><p>任意属性有固定的写法：[propName:string]:xxx;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Cat &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> cat:Cat = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leg</span>:<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只要定义了任意属性，那确定属性和可选属性只能是他的子属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 报错，因为number不是string的子属性</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125;<br><span class="hljs-comment">// 正常运行</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;12岁了&#x27;</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>只读属性：(只能在创建时被赋值)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 报错，因<span class="hljs-built_in">为id</span>已经被初始化，在赋值会报错<br>interface Person &#123;<br>    readonly<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> number</span>;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>    [propName:<span class="hljs-built_in"> string</span>]: any;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">89757</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    gender: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom<span class="hljs-built_in">.id</span> = <span class="hljs-number">9527</span>;<br></code></pre></td></tr></table></figure></li><li><p>只读属性的约束在第一次给对象赋值的时候，不是第一次给只读属性赋值的时候</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">number</span>;<br>    name: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>;<br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,   <span class="hljs-comment">// 第一次错误：初始化的时候，没有给只读属性赋值</span><br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom.id = <span class="hljs-number">89757</span>; <span class="hljs-comment">// 无法赋值，他是只读属性， 只能在创建时赋值</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-原始数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、boolean类型"><a href="#一、boolean类型" class="headerlink" title="一、boolean类型"></a>一、boolean类型</h2><ol><li> boolean是最基本的数据类型，boolean是js的基本类型，Boolean是js的构造函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> createdByNewBoolean = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByNewBoolean);<br>输出：<span class="hljs-built_in">object</span><br><span class="hljs-comment">//直接调用Boolean 也可以返回一个boolean类型</span><br><span class="hljs-keyword">let</span> createdByboolean :<span class="hljs-built_in">boolean</span> = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByboolean);<br>输出：<span class="hljs-built_in">boolean</span><br><span class="hljs-comment">// 但是多一个new关键字，就会报错</span><br><span class="hljs-keyword">let</span> createdByNewBoolean: <span class="hljs-built_in">boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);(报错)<br>因为使用构造函数创建的对象不是<span class="hljs-built_in">Boolean</span>值<br></code></pre></td></tr></table></figure><h2 id="二、数值"><a href="#二、数值" class="headerlink" title="二、数值"></a>二、数值</h2><h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><ol><li><p>ts生成模板string</p></li><li><p>``用来定义es6的模板字符串，${expr} 用来</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myName : <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-keyword">let</span> Myage : <span class="hljs-built_in">number</span> = <span class="hljs-number">23</span>;<br><br><span class="hljs-keyword">let</span> sentence : <span class="hljs-built_in">string</span> = <span class="hljs-string">`hello , my name is <span class="hljs-subst">$&#123;myName&#125;</span>. I am <span class="hljs-subst">$&#123;Myage+<span class="hljs-number">1</span>&#125;</span> years old`</span><br><span class="hljs-built_in">console</span>.log(sentence)<br><span class="hljs-comment">// 输出hello , my name is Tom. I am 24 years old</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、空值"><a href="#四、空值" class="headerlink" title="四、空值"></a>四、空值</h2><ol><li>js中没有空值的概念，在ts中可以用void表示没有任何返回值的函数</li></ol><h2 id="五、null和undefined"><a href="#五、null和undefined" class="headerlink" title="五、null和undefined"></a>五、null和undefined</h2><ol><li>ts里可以定义null和undefined两种数据类型</li><li>null和undefined是所有类型的子类型（undefined类型可以赋值给number类型）</li><li>void类型不可以赋值给number类型</li></ol><h2 id="六、任意值（any）"><a href="#六、任意值（any）" class="headerlink" title="六、任意值（any）"></a>六、任意值（any）</h2><ol><li><p>一个普通类型，在赋值过程中改变类型是不被允许的</p></li><li><p>但是如果是任意类型，就可以被赋值成任何类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myFavoriteNumber: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myFavoriteNumber = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>任意值上可以访问任意的属性</p></li><li><p>任意值上也可以调用任何的方法</p></li><li><p>声明一个变量是任意值以后，对他的任何操作，返回的任何类型都是任意值</p></li><li><p>如果没有声明类型的变量，识别成任意值类型</p></li></ol><h2 id="七、类型推论"><a href="#七、类型推论" class="headerlink" title="七、类型推论"></a>七、类型推论</h2><ol><li><p>如果在定义的时候没有赋值，那么会识别成any类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 会报错</span><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 不会报错</span><br><span class="hljs-keyword">let</span> myAge;<br>Myage = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myAge = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>如果在定义的时候赋值了，会进行类型推论</p></li><li><p>总结：赋值是推论，没赋值是any</p></li></ol><h2 id="八、联合类型"><a href="#八、联合类型" class="headerlink" title="八、联合类型"></a>八、联合类型</h2><ol><li><p>联合类型的写法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">let</span> myName: string | number;<br><span class="hljs-attribute">myName</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br><span class="hljs-attribute">myName</span> = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>只可以识别联合类型里有的类型，没有的类型，会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myName: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myName = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 会报错</span><br><span class="hljs-comment">// myName = true; </span><br></code></pre></td></tr></table></figure></li><li><p>访问联合类型的属性或者方法，只能访问联合类型共有的类型和方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 会报错，因为number没有length属性</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : number&#123;<br>   return something.length;<br> &#125;<br><span class="hljs-comment">// 运行成功</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : <span class="hljs-built_in">string</span>&#123;<br>    return something.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>联合类型的变量在被赋值的时候，会根据类型推断的规则推断出一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 运行成功 */</span><br><span class="hljs-keyword">let</span> myTest: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myTest = <span class="hljs-string">&#x27;server&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length);<br><span class="hljs-comment">// 根据类型推论得到myTest的类型是number，会报错</span><br>myTest = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length)<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ts.xcatliu.com/">TypeScript入门教程</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-hellots</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/</url>
    
    <content type="html"><![CDATA[<h2 id="一、第一个ts"><a href="#一、第一个ts" class="headerlink" title="一、第一个ts"></a>一、第一个ts</h2><ol><li><p>全局安装ts    npm install -g typescript</p></li><li><p>vscode 环境下运行ts文件</p></li><li><p>编写第一个ts文件，在终端输入tsc hello.ts 去编译文件 ，会自动生成hello.js 文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/* 编译成功 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br><span class="hljs-comment">/*编译出错 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span> (<span class="hljs-params">person : <span class="hljs-built_in">string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">let</span> user = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Hello.js 中的代码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></td></tr></table></figure></li><li><p>使用node hello.js 可以运行js文件</p></li><li><p>ts会在编译的时候对类型进行静态检查，如果有错，编译的时候就会报错，但是还是会生成相应的js文件，如果不想生成js，在tsconfig.json中配置noEmitOnError即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-ts简介</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ts简介"><a href="#一、ts简介" class="headerlink" title="一、ts简介"></a>一、ts简介</h2><ol><li><p>ts是添加了类型系统的js，适合任何项目</p></li><li><p>ts是一个静态类型，弱类型语言</p><p>动态类型：是运行时才做类型检查(js)</p><p>静态类型：是编译的时候就去做类型检查(ts)</p><p>弱类型：是允许隐式转换</p><p>强类型：不允许类型转换(python)</p></li><li><p>ts完全兼容js</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>师姐分享</title>
    <link href="/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/"/>
    <url>/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/60279001">前端面试：谈谈 JS 垃圾回收机制 - 知乎</a></li><li><a href="https://www.cnblogs.com/xaun/p/13673798.html">关于height:100%和height:100vh的区别 - 六人行 - 博客园</a></li><li><a href="https://www.cnblogs.com/yxkNotes/p/13931717.html">浏览器设置强缓存和协商缓存 - Judicious - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/138490697">ajax请求的五个步骤 - 知乎</a></li><li><a href="https://blog.csdn.net/qq_41261490/article/details/82966077">js中正则表达式test()方法_DiuDiu_yang的博客-CSDN博客_js test</a></li><li><a href="https://mp.weixin.qq.com/s/FnN0cIhhS8Y7mJADFCdfqQ">面经字节校招四轮技术面</a></li><li><a href="https://mp.weixin.qq.com/s/GnTIlJ80bfI28NrwwZmNLw">你真的了解 GET 和 POST 吗，它们的区别是什么？</a></li><li><a href="https://www.kwgg2020.com/">前端导航</a></li><li><a href="https://zhuanlan.zhihu.com/p/39903074">Web前端知识体系梳理 - 知乎</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>师姐分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>师姐分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试笔记</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-DOM</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsDOM/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsDOM/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-异步操作</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、异步操作"><a href="#一、异步操作" class="headerlink" title="一、异步操作"></a>一、异步操作</h2><ol><li><p>javaScript是单线程模式</p></li><li><p>好处是：实现比较简单，执行环境相对简单</p></li><li><p>坏处是: 只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行</p></li><li><p>为了解决这个问题，js的内部采用了”事件循环”机制</p></li><li><p>同步任务和异步任务</p></li><li><p>异步操作的几种模式</p><ol><li>事件回调</li><li>事件监听</li><li>发布/订阅</li></ol></li><li><p>异步操作的流程控制</p><ol><li>串行执行</li><li>并行执行</li><li>并行与串行结合</li></ol></li><li><p>定时器setTimeout 设置某个函数或者代码推迟一段时间运行，setInterval 设置任务每隔一段时间就执行</p></li><li><p>promise对象 是js的异步操作解决方案，为异步操作提供统一接口，起到了代理的作用</p></li><li><p>promise是对象，也是构造函数</p></li><li><p>promise实例的then(),用来添加回调函数</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-面向对象编程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、new"><a href="#一、new" class="headerlink" title="一、new"></a>一、new</h2><ol><li>面向对象编程的语言（c++、java）</li><li>对象是一个具体实物的抽象</li><li>对象是一个容器，包含属性和方法</li><li>c++和java都有一个类的概念，所谓类就是对象的模板，对象是类的实例</li><li>但是js的语言的对象体系不是基于类的，是基于构造函数和原型链的</li><li>js使用构造函数做为对象的模板</li><li>构造函数的特点：（1）函数的内部使用了this关键字，（2）生成对象的时候必须使用new关键字</li><li>new命令的特点：执行构造函数，返回一个实例对象</li><li>Object.create() 创建实例对象，有时候拿不到构造函数，就以现有的对象做为模板，生成新的实例对象</li></ol><h2 id="二、this"><a href="#二、this" class="headerlink" title="二、this"></a>二、this</h2><ol><li><p>this的指向，总是指向当前属性或者方法所在的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓名:&#x27;</span>+ <span class="hljs-built_in">this</span>.name;<br>&#125;<br><br><span class="hljs-keyword">var</span> A = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><span class="hljs-keyword">var</span> B = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><br>A.describe()<br><span class="hljs-string">&quot;姓名:张三&quot;</span><br>B.describe()<br><span class="hljs-string">&quot;姓名:李四&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>this的使用场合</p><p>（1）全局环境；this指的是顶层对象window</p><p>（2）构造函数；this指是的实例对象</p><p>（3）对象的方法；this指的是该方法运行时所在的对象</p></li><li><p>绑定this的方法</p><p>Function.prototype.call()</p><p>Function.prototype.apply()</p><p>Function.prototype.bind()</p></li></ol><h2 id="三、对象继承"><a href="#三、对象继承" class="headerlink" title="三、对象继承"></a>三、对象继承</h2><ol><li><p>通过构造函数为实例对象定义属性，同一个构造函数的多个实例之间无法共享属性</p></li><li><p>prototype属性的作用；属性和方法定义在原型对象上，所有的实例对象都可以共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span> (<span class="hljs-params">name</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Animal.prototype.color = <span class="hljs-string">&#x27;white&#x27;</span>;<br><span class="hljs-keyword">var</span> cat1 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;大猫&#x27;</span>);<br><span class="hljs-keyword">var</span> cat2 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;小猫&#x27;</span>);<br>cat1.name;<br><br><span class="hljs-string">&quot;大猫&quot;</span><br>cat2.name<br><span class="hljs-string">&quot;小猫&quot;</span><br>cat1.color<br><span class="hljs-string">&quot;white&quot;</span><br>cat2.color<br><span class="hljs-string">&quot;white&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>每一个函数都有一个prototype属性，指向一个对象</p></li><li><p>原型链，读取对象属性的时候，js引擎先在当前对象中找，如果找不到就去原型对象中找，直到顶层Object.prototype，找不到返回undefined</p></li><li><p>constructor属性，默认指向prototype对象的构造函数</p></li><li><p>instanceof运算符，判断对象是否是某个构造函数的实例</p></li></ol><h2 id="四、object对象"><a href="#四、object对象" class="headerlink" title="四、object对象"></a>四、object对象</h2><ol><li><p>Object.getPrototypeOf() 获取原型对象的标准方法</p><p>object的原型对象是null</p><p> 空对象的原型对象是Object</p><p>function的原型对象是Function</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(&#123;&#125;)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf((Object.<span class="hljs-params">prototype</span>)</span>)<span class="hljs-operator"> === </span>null<br><span class="hljs-literal">true</span><br><span class="hljs-keyword">function</span> F <span class="hljs-literal">()</span> &#123;&#125; ;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(F)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Function</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>Object.setPrototypeOf()可以模拟new,第一个参数是现有对象，第二个参数是原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> F ();<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> f = <span class="hljs-built_in">Object</span>.setPrototypeOf(&#123;&#125;,F.prototype);<br>f.foo<br><br><span class="hljs-literal">undefined</span><br>F.call(f);<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>Object.create () 提供一个对象做为另一个对象的原型，另一个对象继承所有属性和方法</p></li><li><p>Object.prototype.isPrototypeOf() 判断对象是不是参数对象的原型</p></li><li><p>```<br>Object.prototype.<strong>proto</strong> 实例对象的__proto__属性，返回该对象的原型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>   <br><br><span class="hljs-number">6</span>. 获取实例对象的<span class="hljs-number">3</span>种方法：<br><br>   ```js<br>   obj.__proto__ <span class="hljs-regexp">//</span> 只有浏览器才需要部署<br>   obj.constructor.prototype <span class="hljs-regexp">//</span> 如果改写了原型对象，就会失真<br>   obj.getPrototypeOf(obj) <span class="hljs-regexp">//</span> 推荐<br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames() 返回一个数组，对象是参数对象所有自身属性的键名</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Date)<br>(<span class="hljs-number">6</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>]</span><br><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Math)<br>(<span class="hljs-number">43</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;abs&quot;</span>, <span class="hljs-string">&quot;acos&quot;</span>, <span class="hljs-string">&quot;acosh&quot;</span>, <span class="hljs-string">&quot;asin&quot;</span>, <span class="hljs-string">&quot;asinh&quot;</span>, <span class="hljs-string">&quot;atan&quot;</span>, <span class="hljs-string">&quot;atanh&quot;</span>, <span class="hljs-string">&quot;atan2&quot;</span>, <span class="hljs-string">&quot;ceil&quot;</span>, <span class="hljs-string">&quot;cbrt&quot;</span>, <span class="hljs-string">&quot;expm1&quot;</span>, <span class="hljs-string">&quot;clz32&quot;</span>, <span class="hljs-string">&quot;cos&quot;</span>, <span class="hljs-string">&quot;cosh&quot;</span>, <span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;floor&quot;</span>, <span class="hljs-string">&quot;fround&quot;</span>, <span class="hljs-string">&quot;hypot&quot;</span>, <span class="hljs-string">&quot;imul&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;log1p&quot;</span>, <span class="hljs-string">&quot;log2&quot;</span>, <span class="hljs-string">&quot;log10&quot;</span>, <span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-string">&quot;min&quot;</span>, <span class="hljs-string">&quot;pow&quot;</span>, <span class="hljs-string">&quot;random&quot;</span>, <span class="hljs-string">&quot;round&quot;</span>, <span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;sin&quot;</span>, <span class="hljs-string">&quot;sinh&quot;</span>, <span class="hljs-string">&quot;sqrt&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;tanh&quot;</span>, <span class="hljs-string">&quot;trunc&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;LN10&quot;</span>, <span class="hljs-string">&quot;LN2&quot;</span>, <span class="hljs-string">&quot;LOG10E&quot;</span>, <span class="hljs-string">&quot;LOG2E&quot;</span>, <span class="hljs-string">&quot;PI&quot;</span>, <span class="hljs-string">&quot;SQRT1_2&quot;</span>, <span class="hljs-string">&quot;SQRT2&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>Object.prototype.hasOwnProperty 判断某个属性定义在对象自身还是原型链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;length&#x27;</span>)<br><span class="hljs-literal">true</span><br><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>获取对象的所有属性，不管是自身的还是继承的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritedPropertyNames</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-keyword">var</span> props = &#123;&#125;;<br><span class="hljs-keyword">while</span>(obj)&#123;<br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) </span>&#123;<br>props[p] = <span class="hljs-literal">true</span>;<br>&#125;);<br>obj = <span class="hljs-built_in">Object</span>.getPrototypeOf(obj);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.getOwnPropertyNames(props);<br>&#125;<br>inheritedPropertyNames(<span class="hljs-built_in">Date</span>);<br>(<span class="hljs-number">22</span>) [<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>, <span class="hljs-string">&quot;caller&quot;</span>, <span class="hljs-string">&quot;constructor&quot;</span>, <span class="hljs-string">&quot;apply&quot;</span>, <span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>, <span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-string">&quot;__defineGetter__&quot;</span>, <span class="hljs-string">&quot;__defineSetter__&quot;</span>, <span class="hljs-string">&quot;hasOwnProperty&quot;</span>, <span class="hljs-string">&quot;__lookupGetter__&quot;</span>, <span class="hljs-string">&quot;__lookupSetter__&quot;</span>, <span class="hljs-string">&quot;isPrototypeOf&quot;</span>, <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span>, <span class="hljs-string">&quot;valueOf&quot;</span>, <span class="hljs-string">&quot;toLocaleString&quot;</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;length&quot;</span><span class="hljs-number">1</span>: <span class="hljs-string">&quot;name&quot;</span><span class="hljs-number">2</span>: <span class="hljs-string">&quot;prototype&quot;</span><span class="hljs-number">3</span>: <span class="hljs-string">&quot;now&quot;</span><span class="hljs-number">4</span>: <span class="hljs-string">&quot;parse&quot;</span><span class="hljs-number">5</span>: <span class="hljs-string">&quot;UTC&quot;</span><span class="hljs-number">6</span>: <span class="hljs-string">&quot;arguments&quot;</span><span class="hljs-number">7</span>: <span class="hljs-string">&quot;caller&quot;</span><span class="hljs-number">8</span>: <span class="hljs-string">&quot;constructor&quot;</span><span class="hljs-number">9</span>: <span class="hljs-string">&quot;apply&quot;</span><span class="hljs-number">10</span>: <span class="hljs-string">&quot;bind&quot;</span><span class="hljs-number">11</span>: <span class="hljs-string">&quot;call&quot;</span><span class="hljs-number">12</span>: <span class="hljs-string">&quot;toString&quot;</span><span class="hljs-number">13</span>: <span class="hljs-string">&quot;__defineGetter__&quot;</span><span class="hljs-number">14</span>: <span class="hljs-string">&quot;__defineSetter__&quot;</span><span class="hljs-number">15</span>: <span class="hljs-string">&quot;hasOwnProperty&quot;</span><span class="hljs-number">16</span>: <span class="hljs-string">&quot;__lookupGetter__&quot;</span><span class="hljs-number">17</span>: <span class="hljs-string">&quot;__lookupSetter__&quot;</span><span class="hljs-number">18</span>: <span class="hljs-string">&quot;isPrototypeOf&quot;</span><span class="hljs-number">19</span>: <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span><span class="hljs-number">20</span>: <span class="hljs-string">&quot;valueOf&quot;</span><span class="hljs-number">21</span>: <span class="hljs-string">&quot;toLocaleString&quot;</span>length: 22__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-标准库</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、object对象"><a href="#一、object对象" class="headerlink" title="一、object对象"></a>一、object对象</h2><p>object对象，所有其他的对象都是继承了object对象，那些对象是object的实例</p><p>object的方法分成原生方法和实例方法</p><p>object（）函数，可以将任意类型转换成对象</p><p>object构造函数  var obj = new  Object（），主要用他来生成新的对象</p><p>Object（value）表示将一个值转换成对象，new Object （value）是新生成一个对象，值是value</p><p>object的静态方法和实例方法</p><p>静态方法是定义在object对象上，Object.keys 、Object.getOwnPropertyNames</p><p>实例方法是定义在object.prototype对象上，Object.prototype.valueOf()、Object.prototype.toString() 。。。。</p><p>所有的实例对象都可以继承实例方法</p><p>object和Object.prototype 的区别</p><p>obeject其实就是一个函数，函数是对象，但是所有的原型是对象，但是不是函数，object.prototype是对象，是js的根对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype.__proto__<br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><ol><li><p>数组的构造方法</p><p>最建议使用的方式：var arrays = [1,2,3]</p><p>var arrays = new Array（2）定义一个长度是2的数组</p></li><li><p>数组的静态方法</p><p>Array.isArray()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrays = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">Array</span>.isArray(arrays)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>数组的实例方法</p><ol><li><p>valueof()返回数组本身，toString() 返回数组的字符串形式</p></li><li><p>push()方法，在数组的尾部添加一个或者多个值，返回新数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.push(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>pop()删除数组的最后一个元素，并且返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.pop()<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>pop和push的组合构成了栈的”后进先出”</p></li><li><p>shift()在数组的头部删除一个元素，并且返回删除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.shift()<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>shift和push相结合构成队列的”先进先出”</p></li><li><p>unshift() 在数组的头部添加一个或者多个元素，返回数组长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.unshift(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>join() 以传入的参数作为分隔符，将数组连接成一个新的字符串返回，默认是逗号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.join(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-string">&quot;123&quot;</span><br>a.join(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-string">&quot;1,2,3&quot;</span><br>a.join(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-string">&quot;1-2-3&quot;</span><br>a.join()<br><span class="hljs-string">&quot;1,2,3&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>concat() 数组的连接 ，负责数组的合并，返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&#x27;hello&#x27;</span>].concat([<span class="hljs-string">&#x27;world&#x27;</span>])<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].concat([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>数组成员包含对象，concat()返回数组的一个浅拷贝，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj =&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">var</span> oldArray = [obj]<br><span class="hljs-keyword">var</span> newArray = oldArray.concat()<br>obj.a = <span class="hljs-number">2</span><br>newArray[<span class="hljs-number">0</span>].a<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>reverse() 数组倒序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.reverse()<br>[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure></li><li><p>slice()用于提取目标数组的一部分，slice(strart,end) 从strat开始，不包括end结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">2</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>slice()利用Array.prototype.slice.call()将类似数组转成数组</p></li><li><p>splice() 删除数组的部分，然后再删除的位置添加新的元素，返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>a.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>)<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">//查看a的现状</span><br>a<br>(<span class="hljs-number">7</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure></li><li><p>sort()排序，按照字典序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;love&#x27;</span>]<br>a.sort()<br>(<span class="hljs-number">3</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>]<br></code></pre></td></tr></table></figure><p>自定义的排序方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">29</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;].sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">o1,o2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> o1.age - o2.age&#125;)<br><br><span class="hljs-number">0</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>&#125;<br><span class="hljs-number">1</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>&#125;<br><span class="hljs-number">2</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br><span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure></li><li><p>map() 将数组的所有成员依次传入函数参数，把每一次的执行结果组成新的数组返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>numbers.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>)</span>&#123;<br><span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span><br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>map() 接受一个函数做为参数，并且该函数的回调函数有3个参考值 element 元素，index 元素下标，arr 原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem,ind,arr</span>)</span>&#123;<br><span class="hljs-keyword">return</span> ind * elem<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>map()接受第二个参数（index），绑定内部的this变量，数组a是map()方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[index];<br>&#125;,a)<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><p>map方法的回调函数会跳过空位，不会跳过undefined和null</p></li><li><p>forEach() 和map的用法基本一致，就是map()返回值，forEach()不返回值，只是遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">element,index,arr</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;[&#x27;</span>+index + <span class="hljs-string">&#x27;] =&#x27;</span> + element)<br>&#125;<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(log)<br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">0</span>] =<span class="hljs-number">1</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">1</span>] =<span class="hljs-number">2</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">2</span>] =<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>forEach()也可以接受第二个参数，绑定内部的this变量，空数组<code>out</code>是<code>forEach()</code>方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> out = [];<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.push(index * index);<br>&#125;,out)<br><span class="hljs-literal">undefined</span><br>out<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>forEach()会跳过空位，不会跳过undefined和null</p><p>forEach() 无法中断，总是把数组遍历完</p></li><li><p>filter(),参数是一个函数，所有成员依次执行函数，返回符合条件的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>].filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> (elem &gt;<span class="hljs-number">3</span>)<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>filter()也可以接受第二个参数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj = &#123;max :<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">var</span> myFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(item)</span></span>&#123;<br><span class="hljs-keyword">if</span>(item&gt;<span class="hljs-keyword">this</span>.max) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>arr.filter(myFilter,obj)<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>第二个参数obj可以绑定myFilter内部的this变量</p></li><li><p>some()只要数组的一个成员符合条件，就返回true</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">some</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>every()是所有成员都符合，才返回true</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">every</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。</p></li><li><p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p></li><li><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1</p></li><li><p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> user = [<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;tom@qq.com&#x27;</span>&#125;,<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;peter&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;peter@qq.com&#x27;</span>&#125;<br>];<br>user.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>)</span>&#123;<br><span class="hljs-keyword">return</span> user.email<br>&#125;).filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-regexp">/^t/</span>.test(email);<br>&#125;).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(email)<br>&#125;)<br><span class="hljs-attr">VM2562</span>:<span class="hljs-number">10</span> tom@qq.com<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、包装对象"><a href="#三、包装对象" class="headerlink" title="三、包装对象"></a>三、包装对象</h2><ol><li><p>3个原型对象的包装对象</p></li><li><p>如果使用了new 就是生成包装对象</p></li><li><p>如果只是普通的函数调用，那就是强转</p></li><li><p>js引擎会自动的把原生数据类型转成包装对象，并且在使用后自动销毁</p></li><li><p>包装对象的实例方法 valueof()，toString()</p></li><li><p>可以给包装对象自定义实例方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br><span class="hljs-string">&#x27;abc&#x27;</span>.double()<br><span class="hljs-string">&quot;abcabc&quot;</span><br><br><span class="hljs-built_in">Number</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br>(<span class="hljs-number">2</span>).double()<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="四、Boolean对象"><a href="#四、Boolean对象" class="headerlink" title="四、Boolean对象"></a>四、Boolean对象</h2><ol><li><p>Boolean转换为false的现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>Boolean转换为true的现象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-string">&#x27;false&#x27;</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">([])</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(&#123;&#125;)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(function()</span></span>&#123;&#125;)<br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(/foo/)</span></span><br>true<br></code></pre></td></tr></table></figure></li><li><p>所有对象对应的Boolean都是true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>))&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>之所以输出true，是因为false对应的包装对象实例是一个对象，进行逻辑运算时，自动转成布尔值true</p><h2 id="五、Number对象"><a href="#五、Number对象" class="headerlink" title="五、Number对象"></a>五、Number对象</h2><ol><li>Number()是原始数字类型的包装类型</li><li>有自己静态的属性，定义在Number对象上</li><li>有自己的实例化方法</li><li>也可以自定义方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>+x;<br>&#125;;<br>(<span class="hljs-number">8</span>).add(<span class="hljs-number">2</span>)<br><span class="hljs-number">10</span><br><span class="hljs-built_in">Number</span>.prototype.subtract= <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> -x;<br>&#125;;<br>(<span class="hljs-number">10</span>).subtract(<span class="hljs-number">4</span>)<br><span class="hljs-number">6</span><br><span class="hljs-built_in">Number</span>.prototype.iterate = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> result = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">this</span>;i++)&#123;<br>result.push(i);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;;<br>(<span class="hljs-number">10</span>).iterate()<br>(<span class="hljs-number">11</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="六、String对象"><a href="#六、String对象" class="headerlink" title="六、String对象"></a>六、String对象</h2><ol><li><p>String是js原生提供的三个包装对象之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span> (<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-keyword">typeof</span> s1<br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> s2<br><span class="hljs-string">&quot;object&quot;</span><br>s2.valueOf()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>字符串对象是一个类似数组对象</p></li><li><p>单独的String() 没有new 是强制转换，有new是，String包装对象</p></li><li><p>string的静态属性，定义在string对象本身,参数是一个或者多个数值，返回数值对应的Unicode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>)<br><span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>)<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>string的实例属性 Sting.prototype.length</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span><br>s1.length<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>String的实例方法</p><ol><li><p>charAt() 返回指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>s1.charAt(<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;b&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>charCodeAt() 返回指定位置的字符的Unicode的值，没有参数，默认返回首字符的Unicode值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var s1 = &#x27;abcd&#x27;;<br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt(1)</span>;<br><span class="hljs-number">98</span><br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt()</span><br><span class="hljs-number">97</span><br></code></pre></td></tr></table></figure></li><li><p>concat() 连接2个字符串，返回新字符串，可以接受多个参数，如果参数不是字符串，先转成字符串在连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> one =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> three = <span class="hljs-string">&#x27;3&#x27;</span>;<br><span class="hljs-string">&#x27;&#x27;</span>.concat(one,two,three);<br><span class="hljs-string">&quot;123&quot;</span><br>one + two + three;<br><span class="hljs-string">&quot;33&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>slice() 第一个参数是开始位置，第二个参数是结束位置 (不包括结束位置) 返回子串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>substring() 跟slice的作用相同，就是当第一个参数 &gt; 第二个参数的时候，会自动换位置，如果是负数，会自动转成0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,<span class="hljs-number">10</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;JavaSCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>substr() 第一个参数是开始的位置，第二个参数是子字符串的长度，如果第一个参数是负数，表示倒数开始，如果第二个参数是负数，返回空字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;S&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>,<span class="hljs-number">0</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>indexof() 表示一个字符串在另一个字符串中第一次出现的位置，如果匹配返回下标，如果不匹配，返回-1</p><p>可以接受第二个参数，第二个参数代表从指定位置开始匹配</p><p>lastIndexof() 表示从尾部开始匹配</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">4</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;x&#x27;</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li><li><p>trim() 用于去除字符串两端的空格，返回一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27; hello world &#x27;</span>.trim()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;\r\nabc \t&#x27;</span>.trim()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>toLowerCase() 将字符串全部小写，toUpperCase() 将字符串全部大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;Hello World&#x27;</span>.toLowerCase()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;Hello World&#x27;</span>.toUpperCase()<br><span class="hljs-string">&quot;HELLO WORLD&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>match() 确定原字符串是否匹配某个子字符串，</p><p>返回一个数组，成员是匹配的第一个字符串，index是匹配的下标，input是原数组，</p><p>如果没有匹配，返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;e&#x27;</span>);<br>[<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;e&quot;</span>groups: undefinedindex: 1input: <span class="hljs-string">&quot;hello world&quot;</span>length: 1__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li><p>search() 和match() 方法基本相似，但是返回匹配值的第一个位置（下标）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.search(<span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>replace() 用于替换匹配的子字符串，默认只替换第一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;aaa&#x27;</span>.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-string">&quot;baa&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>split() 方法，按照指定的规则分割字符串，返回一个分割出来的子字符串组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split()<br>[<span class="hljs-string">&quot;a|b|c&quot;</span>]<br><span class="hljs-string">&#x27;a||c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">3</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">2</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="七、json对象"><a href="#七、json对象" class="headerlink" title="七、json对象"></a>七、json对象</h2><ol><li><p>Json格式</p><p>复杂类型只能是数组或者对象，不能是函数、正则对象，日期对象</p><p>原始类型只有4种，字符串、数值、布尔值和null</p><p>字符串必须使用双引号，不能使用单引号</p><p>对象的键名必须在双引号里</p><p>数组或者对象最后一个成员后面不能加逗号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>]<br><br>&#123; <span class="hljs-attr">&quot;one&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;two&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">&quot;three&quot;</span>: <span class="hljs-number">3</span> &#125;<br><br>&#123;<span class="hljs-attr">&quot;names&quot;</span>: [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>] &#125;<br><br>[ &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>&#125;, &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;李四&quot;</span>&#125; ]<br></code></pre></td></tr></table></figure></li><li><p>JSON.stringify()  将一个值转成JSON字符串</p></li><li><p>如果参数对象有自定义的toJSON()方法，会使用这个方法作为返回值，忽略其他的属性</p></li><li><p>JSON.parse()  将JSON字符串转成对应的值</p></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-语法</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、强制转换"><a href="#一、强制转换" class="headerlink" title="一、强制转换"></a>一、强制转换</h2><p>强制转化的基本类型 Number、String、Boolean</p><h2 id="二、Number比parseInt更加严格"><a href="#二、Number比parseInt更加严格" class="headerlink" title="二、Number比parseInt更加严格"></a>二、Number比parseInt更加严格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-literal">NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><ol><li><p>自动转换，背后有比较复杂的转换预原则</p></li><li><p>错误处理机制</p></li><li><p>编码风格</p></li><li><p>console.log()</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-运算符</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、加法运算符（算术运算符）"><a href="#一、加法运算符（算术运算符）" class="headerlink" title="一、加法运算符（算术运算符）"></a>一、加法运算符（算术运算符）</h2><p>boolean会转换成数值型，在做加法</p><p>string类型做加法就是进行连接操作</p><p>到底是执行加法还是连接会在运行时决定，这种现象叫做”重载”,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-string">&quot;75&quot;</span><br><span class="hljs-string">&#x27;3&#x27;</span> + <span class="hljs-number">4</span> +<span class="hljs-number">5</span><br><span class="hljs-string">&quot;345&quot;</span><br></code></pre></td></tr></table></figure><p>只有加法有重载，其他的算术运算没有</p><p>对象相加会先转换成原始类型的值在相加</p><p>对象转换成原始类型的原则是先调用valuesof（），</p><p>valuesof（）总是返回对象本身，在调用对象的toString（）方法，将其转成字符串</p><h2 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h2><p>相等比较的是值</p><p>严格相等比较的是类型和值</p><p>当都是原始类型值的时候，转成数值在比较</p><p>如果是对象，转成原始类型在比较</p><p>undefined和null他们自身比较，或者互相比较是true，其他时候都是false</p><p>相等运算符存在问题，推荐使用严格相等</p><p>比如: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2</span> == <span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-number">2</span> == <span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><h2 id="三、布尔运算符"><a href="#三、布尔运算符" class="headerlink" title="三、布尔运算符"></a>三、布尔运算符</h2><p>! 取反   !! x 等价于 Boolean（x）</p><p>&amp;&amp; 且  如果第一个表示式是false ，返回第一个表达式的值，如果第一个是true，返回第二个表达式的值</p><p>if（x） { doSometing（x） } 等价于 x &amp;&amp; doSomething（x） （短路写法）</p><p>|| 或     如果第一个表达式的值是true，返回第一个表达式的值，如果第一个表达式的值是false，返回第二个表达式  </p><p>text == text || ‘’ （短路写法）</p><p>？ ： 三目运算符</p><h2 id="四、二进制运算符"><a href="#四、二进制运算符" class="headerlink" title="四、二进制运算符"></a>四、二进制运算符</h2><p>| 或 </p><p>&amp; 与</p><p>~ 否 （取反 0 变1 1 变0 ）</p><p>^ 异或 （不同取1 相同取0）</p><p>&lt;&lt; 左移 变大 左移一位乘以2</p><p>&lt;&lt; 右移 变小 右移一位除以2</p><p>&lt;&lt;&lt; 头部补零 得到的都是正数，不管符号位</p><h2 id="五、其他运算符"><a href="#五、其他运算符" class="headerlink" title="五、其他运算符"></a>五、其他运算符</h2><p>void（）：执行一个表达式，不返回任何值，或者说返回的是undefined</p><p>逗号：返回最后一个表达式的值</p><p>圆括号：运算级最高</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的数据类型"><a href="#一、js的数据类型" class="headerlink" title="一、js的数据类型"></a>一、js的数据类型</h2><p>（1）Number (整数和小数) </p><p>（2）String </p><p>（3）Boolean </p><p>（4）null </p><p>（5）undefine </p><p>（6）object（狭义的对象、Array、function）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span><br><span class="hljs-string">&quot;number&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&quot;boolean&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> [] <br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">typeof</span> f<br><span class="hljs-string">&quot;function&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、null和undefined"><a href="#二、null和undefined" class="headerlink" title="二、null和undefined"></a>二、null和undefined</h2><p>null 在转换成数值是0，undefined 在转换成数值是NaN</p><p>null和undefined的比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span> <br>    <br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>只有这6种类型被认为是false：null、undefined、””、’’、0、NaN</p><h2 id="三、数值型"><a href="#三、数值型" class="headerlink" title="三、数值型"></a>三、数值型</h2><p>parseInt将字符串转换成数值型，</p><p>parseInt的返回值类型只可能是数值或者NaN，</p><p>如果一个参数不是字符串，会先转成字符串再转换成数值</p><p>parseFloat将字符串转成字符型</p><p>isFinite() 返回布尔值，判断一个值是不是正常的数值</p><h2 id="四、字符型"><a href="#四、字符型" class="headerlink" title="四、字符型"></a>四、字符型</h2><p>字符串和字符数组，转义字符，base64转码，js返回的字符串长度可能是不一样的</p><h2 id="五、对象"><a href="#五、对象" class="headerlink" title="五、对象"></a>五、对象</h2><p>(for …in ) 遍历对象的属性，但是in无法区别自身的属性，可以加入hasOwnProperty判断是不是自身的属性</p><p>with语句不建议使用</p><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><ul><li><p>函数是一种特殊的值</p></li><li><p>函数的特点是子集可以一直调用父级的内部变量，js特有的链式作用域</p></li><li><p>闭包是函数内部和外部连接起来的桥梁</p></li><li><p>闭包：在函数内部定义一个函数</p></li><li><p>闭包作用：读取外部函数内部的变量，</p></li><li><p>```js<br>function a (){<br>var n =1;<br>function b () {<br> console.log(n)<br>}<br>return b<br>}<br>var res = a();<br>res()</p><p>VM2106:4 1</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><br>  <br><br>- 让这些变量一些保留在内存中，<br><br>- 封装对象的私有属性和私有方法<br><br>- ```js<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span> <span class="hljs-params">(name)</span></span>&#123;<br>  <span class="hljs-keyword">var</span> _age ;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAge</span> <span class="hljs-params">(n)</span></span>&#123;<br>  _age = n;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span> <span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">return</span> _age;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>  name:name,<br>  getAge:getAge,<br>  setAge:setAge<br>  &#125;;<br>  &#125;<br>  <br>  <span class="hljs-keyword">var</span> p1 = person(<span class="hljs-string">&quot;张三&quot;</span>);<br>  p1.setAge(<span class="hljs-number">25</span>);<br>  p1.getAge()<br>  <br>  <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="七、数组"><a href="#七、数组" class="headerlink" title="七、数组"></a>七、数组</h2><p>数组的本质是一种对象，</p><p>数组的遍历可以用forEach方法，</p><p>任何类型都可以放入数组中，</p><p>可以使用Array.prototype.sclice.call() 把类似数组转成数组，</p><p>可以使用Array.prototype.forEach.call()把类似数组转成数组</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-入门介绍</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的概念"><a href="#一、js的概念" class="headerlink" title="一、js的概念"></a>一、js的概念</h2><p>js是一种轻量级的脚本语言，所谓脚本语言就是他不能去开发操作系统，只能编写控制其他大型应用程序的“脚本”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span> (<span class="hljs-params">val</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>+ val)<br>&#125;<br>first(<span class="hljs-string">&#x27;world&#x27;</span>)<br> helloworld<br></code></pre></td></tr></table></figure><h2 id="二、js的优势"><a href="#二、js的优势" class="headerlink" title="二、js的优势"></a>二、js的优势</h2><ul><li>js操作浏览器的能力</li><li>js广泛的使用领域</li><li>js的易学性</li><li>js的语法的灵活性</li><li>js强大的性能</li><li>js的开放性</li><li>js的社区支持和就业机会</li></ul><ol><li><p>js的历史</p><p>js和java是2种不同的语言，最大的区别：</p><p>（1）js的函数是一种独立的数据类型，</p><p>（2）是基于原型对象的继承链，</p><p>（3）js不需要编译，解释器直接运行</p><p>（4）ES和js的关系是：ES是js基本语法的规范，js是ES的体现</p><p>Augular是微软发布的，React是FaceBook发布的</p><h2 id="三、js的基础语法"><a href="#三、js的基础语法" class="headerlink" title="三、js的基础语法"></a>三、js的基础语法</h2><p>js存在变量提升，</p><p>js用var代表声明一个变量，</p><p>js运行的原理是先获取所有被声明的变量，然后再一行一行运行</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/</url>
    
    <content type="html"><![CDATA[<h2 id="一、html基础"><a href="#一、html基础" class="headerlink" title="一、html基础"></a>一、html基础</h2><h3 id="1-html简介"><a href="#1-html简介" class="headerlink" title="1.html简介"></a>1.html简介</h3><p>（1）doctype的声明不区分大小写，用来告知浏览器用的哪个版本</p><p>（2）对于中文页面需要使用<meta charset="utf-8">声明编码，否则会出现乱码。有的浏览器支持GBK为默认编码，则设置<meta charset="gbk"></p><p>（3）在大部分浏览器中，直接输出中文会出现乱码现象，需要在头部设置字符为UTF-8</p><p>（4）HTML 的格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、html编译器"><a href="#2、html编译器" class="headerlink" title="2、html编译器"></a>2、html编译器</h3><p>介绍几种好用的html编译器：VS code ：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>Sublime text：<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p><h3 id="3、html超连接和照片"><a href="#3、html超连接和照片" class="headerlink" title="3、html超连接和照片"></a>3、html超连接和照片</h3><p><a href="http://www.baidu.com.cn">点击进入百度</a></p><img src="E:/学习笔记/html+css/image/1.jpg"/><h3 id="4、html元素"><a href="#4、html元素" class="headerlink" title="4、html元素"></a>4、html元素</h3><p>（1）html的元素可以嵌套，并且大多数html元素都嵌套</p><p>（2）html在未来都会强制要求有开始标签和结束标签</p><p>（3）有空元素<br>换行的意思，但是在未来最好规范写法<br/></p><p>（4）html的元素有<p></p>   <body></body>   <br/></p><h3 id="5、html属性"><a href="#5、html属性" class="headerlink" title="5、html属性"></a>5、html属性</h3><p>（1）html有常用的属性 class=” “、id=” “、style=” “、title=” “</p><p>（2）属性要名称/值对的形式出现 比如：name=”value”</p><p>（3）一般是双引号，但是如果有双引号的，用单引号 比如：name=’John “ShotGun” Nelson’</p><h3 id="6、html标题"><a href="#6、html标题" class="headerlink" title="6、html标题"></a>6、html标题</h3><p>（1）HTML标题分为h1-h6 </p><p>（2）添加水平线 </p><p>（3）注释的格式<!--.....--></p><p>（4）浏览器会在标题前后自动加入空行</p><h3 id="7、html段落"><a href="#7、html段落" class="headerlink" title="7、html段落"></a>7、html段落</h3><p>（1）浏览器会自动地在段落的前后添加空行</p><p>（2）浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格</p><h3 id="8、html格式化"><a href="#8、html格式化" class="headerlink" title="8、html格式化"></a>8、html格式化</h3><p>（1）<b></b> 定义加粗的字体、<i></i> 定义斜体</p><p>（2）<sub></sub> 定义下标字 <sup></sup>定义上标字</p><h3 id="9、html链接"><a href="#9、html链接" class="headerlink" title="9、html链接"></a>9、html链接</h3><p>（1）html超链接的格式<a href="''"></a></p><p>（2）html的target属性设置为_blank ,可以在新的窗口打开一个网页</p><p>（3）在本页内实现调转，设置id属性</p><h3 id="10、html头部head"><a href="#10、html头部head" class="headerlink" title="10、html头部head"></a>10、html头部head</h3><p>（1）html 的头部可以添加 <title>, <style>, <meta>, <link>, <script>, <noscript> 和 <base>标签</p><p>（2）title标签：定义页面的标题</p><p>（3）style标签：定义了html样式文件的引用地址，也可以在style标签中直接设置样式</p><p>（4)meta标签：使用meta标签描述文档的属性，比如关键词、作者、字符集等，meta标签的内容不会显示，但是会被浏览器解析。</p><p>（5）link标签：定义html文档与外部资源的关系，只要用于链接样式表</p><p>（6）script标签：加载脚本语言，比如javascript</p><p>（7）base标签：标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>html的base标签学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;images/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这里的照片可以正常访问，是因为在base标签里定义了目标网址<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面会在新的窗口打开，因为在base标签定义了target的属性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;images/1.jpg&quot;&gt;表示此代码所在html文件路径下的images文件中的1.jpg文件--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;..images/1.jpg&quot;&gt;表示此代码所在html文件路径的上一级文件images文件中的1.jpg文件--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11、html-css"><a href="#11、html-css" class="headerlink" title="11、html css"></a>11、html css</h3><p>（1）css来设置html的文本样式</p><p>（2）内联样式:使用style标签 <p style="color:red;margin-left: 10px">内联样式</p></p><p>（3）内部样式表：在head属性中设置 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b3d4fc</span>&#125;</span><br><span class="css">  <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: black&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）引入外部样式表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12、html图像"><a href="#12、html图像" class="headerlink" title="12、html图像"></a>12、html图像</h3><p>（1）alt=“ ” 用来定义图片的含义，如果图片没有正确显示，会有相应的文字提示，得到失去的内容</p><p>（2）图片的映射</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;img src=<span class="hljs-string">&quot;planets.gif&quot;</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;145&quot;</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">&quot;126&quot;</span> alt=<span class="hljs-string">&quot;Planets&quot;</span> usemap=<span class="hljs-string">&quot;#planetmap&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">map</span> name=<span class="hljs-string">&quot;planetmap&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> coords=<span class="hljs-string">&quot;0,0,82,126&quot;</span> alt=<span class="hljs-string">&quot;Sun&quot;</span> href=<span class="hljs-string">&quot;sun.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;90,58,3&quot;</span> alt=<span class="hljs-string">&quot;Mercury&quot;</span> href=<span class="hljs-string">&quot;mercur.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;124,58,8&quot;</span> alt=<span class="hljs-string">&quot;Venus&quot;</span> href=<span class="hljs-string">&quot;venus.htm&quot;</span>&gt;<br>&lt;/<span class="hljs-built_in">map</span>&gt;<br></code></pre></td></tr></table></figure><p>（3）sharp设置可点击区域的性状，coords是指链接区域在图片中的坐标</p><h3 id="13、html的表格"><a href="#13、html的表格" class="headerlink" title="13、html的表格"></a>13、html的表格</h3><p>（1）表格的构成 <table></table> ,<tr></tr> ,<td></td> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表格练习--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一行一列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>两行三列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2) <th></th> 设置表头信息</p><p>（3）表格还有很多的属性，包括利用css样式，设计一个漂亮的表格</p><p>（4）&lt;td colspan=”2”&gt; </td> 实现横跨两列的效果</p><h3 id="14、html列表"><a href="#14、html列表" class="headerlink" title="14、html列表"></a>14、html列表</h3><p>（1）无序列表：</p><!--HTML的列表--><h4>无序列表</h4><ul>  <li>苹果</li>  <li>香蕉</li>  <li>栗子</li> </ul><p>（2）有序列表</p> <h4>有序列表</h4> <ul>   <li>第一名</li>   <li>第二名</li>   <li>第三名</li> </ul><p>（3）可以设置不同类型的列表，有序列表用type=“A”，无序列表用 style=”list-style-type:circle”</p><h3 id="15、html块区"><a href="#15、html块区" class="headerlink" title="15、html块区"></a>15、html块区</h3><p>（1）HTML的块级元素 <div></div></p><p>(2)html的内联元素 <span></span></p><h3 id="16、HTML布局"><a href="#16、HTML布局" class="headerlink" title="16、HTML布局"></a>16、HTML布局</h3><p>（1）div和table都可以实现网页的布局。一般选用div</p><h3 id="17、html表单"><a href="#17、html表单" class="headerlink" title="17、html表单"></a>17、html表单</h3><p>（1）简单的表单</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>   firstname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;firstname&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;<br>  lastname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;lastname&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><p>（2）单选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Male<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Female<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（3）复选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;apple&quot;&gt;苹果<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;egg&quot;&gt;鸡蛋<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;banana&quot;&gt;香蕉<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（4）下拉列表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eat&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;egg&quot;</span>&gt;</span>egg<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;apple&quot;</span>&gt;</span>apple<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;water&quot;</span>&gt;</span>water<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banana&quot;</span>&gt;</span>banana<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rice&quot;</span>&gt;</span>rice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（5）表单的提交</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;http://www.baidu.com.cn&quot;&gt;<br>  First <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;FirstName&quot; <span class="hljs-keyword">value</span>=&quot;Mickey&quot;&gt;&lt;br&gt;<br>  Last <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;LastName&quot; <span class="hljs-keyword">value</span>=&quot;Mouse&quot;&gt;&lt;br&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提交&quot;&gt;<br>  &lt;p&gt;会提交服务器的百度地址上&lt;/p&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（6）表单这里有很多知识点还要进一步的学习深入</p><h3 id="18、html框架"><a href="#18、html框架" class="headerlink" title="18、html框架"></a>18、html框架</h3><p>（1）<frame></frame>设置HTML的框架</p><p>（2）框架可以和超链接结合，达到想要的效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--html的框架--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test1.html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com.cn&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span>点击进入百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>因为target的属性设置是iframe_a所以跳转的页面会显示在框架内<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="19、html颜色"><a href="#19、html颜色" class="headerlink" title="19、html颜色"></a>19、html颜色</h3><p>（1）html的颜色是RGB构成、红绿蓝  216+40 （微软和MAC各20种）256种颜色</p><h3 id="20、html-颜色名"><a href="#20、html-颜色名" class="headerlink" title="20、html 颜色名"></a>20、html 颜色名</h3><p>（1）html一共有141种颜色名、17（标准颜色）+124</p><p>（2）标准颜色：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色</p><h3 id="21、html的颜色值"><a href="#21、html的颜色值" class="headerlink" title="21、html的颜色值"></a>21、html的颜色值</h3><p>（1）3位的表示#RGB，6位的表示#RRGGBB</p><h3 id="22、html脚本"><a href="#22、html脚本" class="headerlink" title="22、html脚本"></a>22、html脚本</h3><p>（1）javascript主要用于图片操作、表单验证、内容的动态更新</p><p>（2）script直接在html输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--javascript写入html的输出流--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;p&gt;这是一个段落&lt;/p&gt;&quot;</span>)</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;这是一级标题&lt;/h1&gt;&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只能在html的输出流中使用<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>document.write<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）script进行事件响应的处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script的事件响应--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第一个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>javascript可以完成事件的响应<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>).innerHTML=<span class="hljs-string">&quot;hello world ,hello html&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）script改变html的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script处理HTML的样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第二个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>点击按钮实现样式的修改<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test2&quot;</span>)</span><br><span class="javascript">     x.style.color=<span class="hljs-string">&quot;#a12&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f1()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="23、html字符实体"><a href="#23、html字符实体" class="headerlink" title="23、html字符实体"></a>23、html字符实体</h3><p>(1) 想显示&lt;&gt; 需要用的字符符号 &amp;lt、&amp;gt</p><p>（2）连续不间断的空格 &amp;nbsp</p><p>（3）实体名称对大小写敏感</p><p>24、html的URL</p><p>（1）URL统一资源定位器</p><p>（2）Web浏览器通过URL从Web服务器请求页面。</p><p>当您点击 HTML 页面中的某个链接时，对应的 <a> 标签指向万维网上的一个地址。</p><p>一个统一资源定位器(URL) 用于定位万维网上的文档。</p><p>（3）URL 只能使用 [ASCII URL 只能使用 ASCII 字符集.</p><p>来通过因特网进行发送。由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。</p><p>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</p><p>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/</url>
    
    <content type="html"><![CDATA[<h2 id="一、网页布局的本质"><a href="#一、网页布局的本质" class="headerlink" title="一、网页布局的本质"></a>一、网页布局的本质</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li>网页元素都是盒子</li><li>利用css设置盒子的样式和位置</li><li>往盒子里装内容</li><li>网页核心的本质就是摆盒子</li></ol><h3 id="盒子模型的内容"><a href="#盒子模型的内容" class="headerlink" title="盒子模型的内容"></a>盒子模型的内容</h3><ul><li>盒子包括4个部分：边框、内容、内边距、外边距</li><li>边框控制盒子的边缘border</li><li>内容content</li><li>内边距控制盒子和内容的距离padding</li><li>外边距控制盒子和盒子的距离margin</li></ul><h3 id="边框设置"><a href="#边框设置" class="headerlink" title="边框设置"></a>边框设置</h3><ul><li>边框的主要3个属性：粗细、样式、颜色</li><li>边框的复合写法特别常用：border：1px solid gery</li><li>合并相邻边框(主要针对表格) border-collapse</li><li>边框的设置会影响盒子的大小，（变大）</li></ul><h3 id="内边距设置"><a href="#内边距设置" class="headerlink" title="内边距设置"></a>内边距设置</h3><ul><li>padding 5px 上下左右都是5px</li><li>padding 5px 10px 上下5px 左右10px</li><li>padding 5px 10px 20px 上5px 左右10px 下20px</li><li>padding 5px 10px 15px 20px 上5px 右10px 下15px 左20px、</li><li>内边距会影响盒子的大小（变大）在设置了宽高的情况下</li><li>遇到不同的文字显示，最应该使用padding将盒子撑开</li><li>不设置width/height属性，不会撑开盒子</li></ul><h3 id="外边距设置"><a href="#外边距设置" class="headerlink" title="外边距设置"></a>外边距设置</h3><ul><li>margin的复合写法和padding代表的含义一模一样</li><li>外边距实现块级元素水平居中</li><li>必须设置width，左右边距必须设置成auto  margin ：0 auto</li><li>行内元素或者行内块元素实现水平居中，给父级元素加上text-align</li><li>相邻盒子的外边距垂直合并的现象，选择大的为准</li><li>嵌套盒子的塌陷问题，在父子盒子都有外边距的情况下，会出现</li><li>解决办法：父盒子设置边框、设置内边距、设置 overflow：hidden</li><li>border：1px solid transparent 设置边框透明色</li></ul><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><ul><li>行内元素尽量只设置左右的内外边距，不要设置上下的</li><li>去掉li的小圆点 list-style：none</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jAVA"><span class="hljs-comment">//css的第一行代码</span><br>*&#123;<br>margin :<span class="hljs-number">0</span><br>padding:<span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ul><li>border-radius : 10px;</li><li>原理是矩形和圆做交集</li><li>正方形变圆形 高度或者宽度的一半</li><li>矩形变成圆角形，设置为高度的一半</li><li>四个角可以分开变化</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li>box-shadow : h-shadow v-shadow blur spread color inset </li><li>box-shadow : 10px 10px 10px -4px rgba(0,0 ,0 .3)</li><li>h-shadow :水平阴影</li><li>v-shadow：垂直阴影</li><li>blur：阴影是实在的还是虚的</li><li>spread：阴影的大小</li><li>color：颜色</li><li>inset：内阴影 默认外阴影 不用写 </li></ul><h2 id="二、css浮动"><a href="#二、css浮动" class="headerlink" title="二、css浮动"></a>二、css浮动</h2><h3 id="网页布局的3种方式"><a href="#网页布局的3种方式" class="headerlink" title="网页布局的3种方式"></a>网页布局的3种方式</h3><p><img src="G:\htmlProject\image\1.png"></p><p><img src="G:\htmlProject\image\2.png" alt="2"></p><p><img src="G:\htmlProject\image\3.png" alt="3"></p><ul><li><p>标准流：</p><ul><li><p>标签的3大类：块级元素、行内元素、行内块元素</p><p>块级元素的特点：自己独占一行；可以设置宽高；在不设置宽高的情况下，被内容撑开</p><p>行内元素的特点：和其他在一行，长度和宽度由内容决定</p></li></ul></li><li><p>浮动：</p><ul><li>多个块级元素纵向找标准流，多个块级元素横向排列找浮动</li><li>特性：<ol><li>脱标，脱离标准流；浮动的盒子不在保留原来的位置</li><li>多个盒子浮动，总是一行内显示，并且顶端对齐</li><li>浮动有行内块元素的属性，可以设置宽和高</li><li>行内块元素的宽度是内容撑开的</li><li>先设置div 的大小，在设置位置</li><li>浮动的盒子只会影响后面的盒子位置</li><li>先用标准流做上下位置，在用浮动做左右位置</li></ol></li></ul></li><li><p>定位：</p></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li>额外标签法：添加一个空标签在设置clear：both，空标签必须是块级元素</li><li>父级添加overflow：overflow：hidden</li><li>父级添加after</li><li><img src="G:\htmlProject\image\4.png"></li><li>父级添加双伪元素</li><li><img src="G:\htmlProject\image\6.png"></li></ol><h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3><p>定位=定位模式+边偏移</p><p>定位模式：position : relative absoulte fixed static </p><p>边偏移：top bottom left right </p><p>相对定位：</p><ol><li>相对自己原来的位置来进行移动的，和浏览器和父级都没有关系</li><li>不脱标，原来的位置继续保留</li><li>典型应用是给绝对位置做父级</li></ol><p>绝对定位</p><ol><li>如果没有祖先元素，或者祖先元素没有定位，那么绝对位置以浏览器为标准，进行移动</li><li>祖先有定位。以最近的一级作为参考</li><li>绝对定位脱标，不在占有原来的位置</li><li>子绝父相（在学成在线的页面中可以完善）</li></ol><p>固定定位</p><ol><li>以浏览器的可视窗口为参考</li><li>不在占有原来的位置，脱标</li><li>可以看成特殊的绝对定位</li><li>小技巧在版心的右侧：在浏览器的50%，在版心的margin-left：一半</li></ol><p>粘性定位</p><p>不常用，兼容性太差</p><h3 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h3><p>盒子加了固定或者绝对定位，不设置宽高，默认内容的大小</p><p>浮动的盒子不会压住文字，绝对位置的盒子会</p><h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><p>display：none ,block  隐藏以后位置不会保留</p><p>visibility：visible，hidden 掩藏后，位置会保留</p><p>overflow：溢出的部分隐藏，auto：在需要的时候才显示滚动条，scroll：无论怎样都显示滚动条</p><h2 id="三、css高级技巧"><a href="#三、css高级技巧" class="headerlink" title="三、css高级技巧"></a>三、css高级技巧</h2><h3 id="精灵技术："><a href="#精灵技术：" class="headerlink" title="精灵技术："></a>精灵技术：</h3><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210712235808.jpg" alt="example"></p><p>为了减少服务器接收和发送的次数，提高响应的速度</p><p>核心就是background-position的用法</p><h3 id="字体图标："><a href="#字体图标：" class="headerlink" title="字体图标："></a>字体图标：</h3><h3 id="css三角："><a href="#css三角：" class="headerlink" title="css三角："></a>css三角：</h3><p>没有大小的div，在加上3个透明边框，一个有颜色的边框</p><h3 id="css用户界面样式："><a href="#css用户界面样式：" class="headerlink" title="css用户界面样式："></a>css用户界面样式：</h3><p>鼠标的移动样式：cursor</p><p>轮廓线：outline：0</p><p>文本域防止拖拽：resize：none</p><p>行内元素或行内块元素：文字和图片垂直居中 vertical-align：middle</p><p>溢出文本的省略号：单行和多行</p><h2 id="四、布局技巧："><a href="#四、布局技巧：" class="headerlink" title="四、布局技巧："></a>四、布局技巧：</h2><p>margin-left的负值 </p><p>品优购的项目搭建</p><h2 id="五、css例子"><a href="#五、css例子" class="headerlink" title="五、css例子"></a>五、css例子</h2><p>1、/* 设置背景图片 * 50% 50% 水平位置 垂直位置*/</p><p>  background: url(../img/bg.jpg) 50% 50% no-repeat;</p><p>2、  /* perspective 属性定义 3D 元素距视图的距离 */</p><p>  perspective: 120px;</p><p>3、  /* 阴影设置 水平位移 垂直位移 阴影半径 阴影颜色*/</p><p>  box-shadow: 0px 0px 5px #333;</p><p>4、  /* 设置居中 */</p><p>  position: absolute;</p><p>  /* 是以左上角为原点，故不处于中心位置 */</p><p>  top: 50%;</p><p>  left: 50%;</p><p>  /* 往上（x轴）,左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */</p><p>  transform: translate(-50%, -50%);</p><p>5、  /* 生成绝对定位的元素，相对于浏览器窗口进行定位。 */</p><p>  display: flex;</p><p>6、  /* flex的子项都是居中 */</p><p>  align-items: center;</p><p>7、  /* 其他灵活的项目进行扩展的量 */</p><p>  flex-grow: 1;</p><p>8、  /* 轮廓线 */</p><p>  outline: none;</p><p>9、  /* 透明情况 0 完全透明，1 完全不透明 */</p><p>  opacity: 0;</p><p>10、  /* 设置过渡的效果 代表4个属性*/</p><p>  transition: 0.5s;</p><p>11、  /* 指定背景图像 */</p><p>  background-size: 20px 20px;</p><p>12、  /* :root跟伪类，方便我们重复使用同一属性，自定义var（）调用 */</p><p>   :root {</p><p>​    /* 颜色 */</p><p>​    –white: #e9e9e9;</p><p>​    –gray: #333;</p><p>​    –blue: #0367a6;</p><p>​    –lightblue: #008997;</p><p>​    /* 外边框圆角 */</p><p>​    –button-radius: 0.7rem;</p><p>​    –max-width: 758px;</p><p>​    –max-height: 420px;</p><p>​    /* 字体样式 */</p><p>​    font-size: 16px;</p><p>​    font-family: -apple-system, BlinkMacSystemFont, ‘Segoe UI’, Roboto, Oxygen, Ubuntu, Cantarell, ‘Open Sans’, ‘Helvetica Neue’, sans-serif;</p><p>  }</p><p>13、    /* 定义背景图片随滚动轴的移动方式 随着页面的滚动轴背景图片不会移动 */</p><p>​    background-attachment: fixed;</p><p>14、    /* background-position 为每一个背景图片设置初始位置 */</p><p>​    background-position: center;</p><p>15、    /* 属性设置是否及如何重复背景图像 */</p><p>​    background-repeat: no-repeat;</p><p>16、    /* background-size中，100% (可以看到完整的照片，但是图片了能会变形)</p><p>​    cover（不一定看到完整的图片，但是图片比例不会变化）</p><p>​    都是用于将图片扩大或者缩放来适应整个容器 */</p><p>​    background-size: cover;</p><p>17、  /* 指定一个容器采用网格布局 */</p><p>​    display: grid;</p><p>18、    /* height:100vh == height:100%; </p><p>​    但是当元素没有内容时候，设置height:100%，该元素不会被撑开，此时高度为0，</p><p>​    但是设置height:100vh，该元素会被撑开屏幕高度一致。 */</p><p>​    height: 100vh;</p><p>19、    /* align-items属性控制垂直位置，</p><p>​    justify-items属性控制水平位置。</p><p>​    这两个属性的值一致时，就可以合并写成一个值。</p><p>​    所以，place-items: center; */</p><p>​    place-items: center;</p><p>20、    /* 如果为正数，则离用户更近，为负数则表示离用户更远。 */</p><p>​    z-index: 2;</p><p>21、    /* translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</p><p>​    translateX(x)仅水平方向移动（X轴移动）</p><p>​    translateY(Y)仅垂直方向移动（Y轴移动） */</p><p>​    transform: translateX(100%);</p><p>22、    /* 调用show函数 */</p><p>​    /* 动画完成一个周期所需的时间。 */</p><p>​    animation: show 0.6s;</p><p>22、  @keyframes show {</p><p>​    /* 0%是动画的开始 */</p><p>​    0%,</p><p>​    49.99% {</p><p>​      /* 完全透明 */</p><p>​      opacity: 0;</p><p>​      z-index: 1;</p><p>​    }</p><p>​    50%,</p><p>​    /* 100%是动画的结束 */</p><p>​    100% {</p><p>​      /* 完全显示 */</p><p>​      opacity: 1;</p><p>​      z-index: 5;</p><p>​    }</p><p>  }</p><p>23、    /* 这个百分比是以父元素内容长度的百分比 移到最左侧*/</p><p>​    left: -100%;</p><p>24、 /* 弹性布局 */</p><p>​    display: flex;</p><p>25、    /* 主轴为垂直方向，起点在上沿 */</p><p>​    flex-direction: column;</p><p>26、    /* 定义粗体字符。 */</p><p>​    font-weight: bold;</p><p>27、    /* letter-spacing 属性增加或减少字符间的空白（字符间距） */</p><p>​    letter-spacing: 0.1rem;</p><p>28、   /* text-transform 属性控制文本的大小写。 */</p><p>​    text-transform: uppercase;</p><p>29、  /* E &gt; F 表示选择E元素的所有子F元素 E F选择所有后代元素，&gt;只选择一代。*/</p><p>  .form&gt;.btn {</p><p>​    margin-top: 1.5rem;</p><p>  }</p><p>30、    /* 定义 2D 缩放转换。 */</p><p>​    transform: scale(0.95);</p><p>31、    /* 背景颜色渐变 */</p><p>​    background-image: linear-gradient(90deg, var(–blue) 0%, var(–lightblue) 74%);</p><p>32、总结</p><p>网格布局：</p><p>  display: grid;</p><p>align-items：center</p><p> justify-items：center</p><p>place-items: center; </p><p>弹性布局：</p><p>display：fixed；</p><p>text-align: center;</p><p>justify-content: center;</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue简介"><a href="#一、vue简介" class="headerlink" title="一、vue简介"></a>一、vue简介</h2><ol><li><p>vue是javascript框架</p></li><li><p>简化了Dom操作</p></li><li><p>响应式的数据交互</p></li><li><p>组件开发</p></li></ol><h2 id="二、第一个vue程序"><a href="#二、第一个vue程序" class="headerlink" title="二、第一个vue程序"></a>二、第一个vue程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;第一个vue程序&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br>    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;第一个vue程序&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="三、el-挂载点"><a href="#三、el-挂载点" class="headerlink" title="三、el:挂载点"></a>三、el:挂载点</h2><p>可以使用id、class、标签选择器，但是一般选择id选择器</p><h2 id="四、data：数据对象"><a href="#四、data：数据对象" class="headerlink" title="四、data：数据对象"></a>四、data：数据对象</h2><p>vue用到的数据定义在data中</p><p>data中可以写复杂的数据类型</p><p>渲染复杂的数据类型，遵守js语法即可</p><h2 id="五、本地应用"><a href="#五、本地应用" class="headerlink" title="五、本地应用"></a>五、本地应用</h2><h2 id="六、vue指令"><a href="#六、vue指令" class="headerlink" title="六、vue指令"></a>六、vue指令</h2><p>一组带v-xxx的vue指令</p><h2 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h2><p>v-text 会覆盖h2内部的值 </p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h2><p>v-html和v-text的属性一样，但是在有html属性的时候，会渲染成html标签</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><p>为元素绑定事件，</p><p>可以传入自定义的参数</p><p>@keyup.enter=”” 按回车键触发事件</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show:"></a>v-show:</h2><p>v-show 实质操纵的是元素的dispaly属性，在频繁显示和隐藏的时候，推荐使用</p><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if:"></a>v-if:</h2><p>v-if实质操纵的是Dom树，会有内存的损耗，一般不要用</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h2><p>可以设置元素的属性值，</p><h2 id="v-for："><a href="#v-for：" class="headerlink" title="v-for："></a>v-for：</h2><p>一般和数组联合使用，实现循环</p><p>v-for= “item in intArr  “    </p><p>v-for=” （item,index ）in intArr”</p><p>item代表的就是intArr里的值，</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model:"></a>v-model:</h2><p>便捷的设置和获取表单元素的值</p><p>绑定的数据会和表单元素的值相关联</p><p>一变全变，相互影响</p><h2 id="七、总结："><a href="#七、总结：" class="headerlink" title="七、总结："></a>七、总结：</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">v-text：可以表示成<span class="hljs-comment">&#123;&#123; &#125;</span>&#125;<br><br>v-<span class="hljs-keyword">on</span>：可以表示成@ 为元素绑定事件的 绑定<span class="hljs-function"><span class="hljs-keyword">method</span>里的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">bind</span>：可以表示成：可以改变元素的值 绑定<span class="hljs-title">data</span>里的数据</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">model</span>：实现数据的双向绑定</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svg</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentsvg/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentsvg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手写svg组件"><a href="#一、手写svg组件" class="headerlink" title="一、手写svg组件"></a>一、手写svg组件</h2><ol><li><p>手写一个svg组件（在componment文件下，新建文件SvgIcon）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;svg class=&quot;svg-icon&quot; aria-hidden=&quot;true&quot;&gt;<br>        &lt;use :xlink:href=&quot;iconName&quot;/&gt;<br>    &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;svg-icon&#x27;,<br>        props: &#123;<br>            iconClass: &#123;<br>                type: String,<br>                required: true<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            iconName() &#123;<br>                return `#icon-$&#123;this.iconClass&#125;`<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>    .svg-icon &#123;<br>        width: 1em;<br>        height: 1em;<br>        vertical-align: -0.15em;<br>        fill: currentColor;<br>        overflow: hidden;<br>        margin-right: 10px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在iconfont生成xxx.js文件，（这个文件里包含需要的svg图片），导入index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;&quot;&gt;<br>...<br>&lt;!--    引入svg(password)图标--&gt;<br>&lt;!--    &lt;script src=&quot;//at.alicdn.com/t/font_2648240_79u0g7z36jm.js&quot;&gt;&lt;/script&gt;--&gt;<br>    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;<br>  &lt;/head&gt;<br>...<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;svg-icon icon-class=&quot;password&quot;/&gt;<br>&lt;!--    svg原生写法--&gt;<br>&lt;!--    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;--&gt;<br>&lt;!--      &lt;use xlink:href=&quot;#icon-password&quot;&gt;&lt;/use&gt;--&gt;<br>&lt;!--    &lt;/svg&gt;--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>优化实现自动导入，在src文件下新建icons/svg文件，新建index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import SvgIcon from &quot;@/components/SvgIcon.vue&quot;;<br><br>Vue.component(&#x27;svg-icon&#x27;, SvgIcon)<br><br>// 自动导入<br>const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)<br>const req = require.context(&#x27;./svg&#x27;, false, /\.svg$/)<br>// 打印以.svg命名的所有文件<br>// console.log(req.keys())<br>const result = requireAll(req)<br>console.log(&#x27;********result*****&#x27;)<br>console.log(result)<br></code></pre></td></tr></table></figure></li><li><p>环境安装，基于webpack将svg打包成svg-sprite，安装 npm install svg-sprite-loader -D , 安装 npm install svgo-D</p></li><li><p>配置vue.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> path.join(__dirname, dir)<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1. 取消默认 file-loader 对 svg 文件的处理</span><br>        config.module<br>            .rule(<span class="hljs-string">&#x27;svg&#x27;</span>) <span class="hljs-comment">// 对 svg 规则的配置</span><br>            .exclude <span class="hljs-comment">// 添加忽略文件夹, 忽略file-loader对这个文件夹下的svg文件处理</span><br>            <span class="hljs-comment">// 建议使用绝对路径</span><br>            <span class="hljs-comment">// .add(&#x27;./src/assets/icons/svg&#x27;) // 相对路径</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>)) <span class="hljs-comment">// 绝对路径</span><br>            .end()<br>        config.module<br>            .rule(<span class="hljs-string">&#x27;icons&#x27;</span>) <span class="hljs-comment">// 配置 icons 的规则</span><br>            .test(<span class="hljs-regexp">/\.svg$/</span>) <span class="hljs-comment">// 匹配以 .svg 结尾的文件</span><br>            .include <span class="hljs-comment">// 添加要处理的文件夹</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>))<br>            .end()<br>            .use(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>) <span class="hljs-comment">// 使用 svg-sprite-loader 处理</span><br>            .loader(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>            .options(&#123;<br>                <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span> <span class="hljs-comment">// 配置 symbol id, 需要使用这个 id 来使用 svg 图标</span><br>            &#125;)<br>            .end()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>vue.config.js 是基于vue的webpack配置文件，放在项目的根目录下</p></li><li><p>webpack.config.js是webpack的配置文件，vue/react都可以使用</p></li><li><p>vue-cli 2.0时代，webpack的配置文件写在config/index.js 文件</p></li><li><p>vue-cli 3.0 时代，没有了config文件夹，vue.config.js 放在根目录下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>component</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/</url>
    
    <content type="html"><![CDATA[<h2 id="一、webpack基础"><a href="#一、webpack基础" class="headerlink" title="一、webpack基础"></a>一、webpack基础</h2><ol><li>webpack是前端资源加载或者打包的工具</li><li>webpack 3.0 的版本没有问题</li><li>webpack4.0 的版本需要安装webpack-cli </li><li>全局安装在任何项目中都可以使用，如果是局部安装（本地安装）只能在当前项目中使用</li><li>webpack可以打包js，json文件</li><li>如果需要打包其他类型的文件，需要loader</li><li>loader解决不了的问题，需要plugin插件</li><li>webpack有entry入口文件，output出口文件。可以有多个入口，但是只能有一个出口</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
