<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>css</title>
    <link href="/2021/07/09/css/"/>
    <url>/2021/07/09/css/</url>
    
    <content type="html"><![CDATA[<h2 id="一、网页布局的本质"><a href="#一、网页布局的本质" class="headerlink" title="一、网页布局的本质"></a>一、网页布局的本质</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li>网页元素都是盒子</li><li>利用css设置盒子的样式和位置</li><li>往盒子里装内容</li><li>网页核心的本质就是摆盒子</li></ol><h3 id="盒子模型的内容"><a href="#盒子模型的内容" class="headerlink" title="盒子模型的内容"></a>盒子模型的内容</h3><ul><li>盒子包括4个部分：边框、内容、内边距、外边距</li><li>边框控制盒子的边缘border</li><li>内容content</li><li>内边距控制盒子和内容的距离padding</li><li>外边距控制盒子和盒子的距离margin</li></ul><h3 id="边框设置"><a href="#边框设置" class="headerlink" title="边框设置"></a>边框设置</h3><ul><li>边框的主要3个属性：粗细、样式、颜色</li><li>边框的复合写法特别常用：border：1px solid gery</li><li>合并相邻边框(主要针对表格) border-collapse</li><li>边框的设置会影响盒子的大小，（变大）</li></ul><h3 id="内边距设置"><a href="#内边距设置" class="headerlink" title="内边距设置"></a>内边距设置</h3><ul><li>padding 5px 上下左右都是5px</li><li>padding 5px 10px 上下5px 左右10px</li><li>padding 5px 10px 20px 上5px 左右10px 下20px</li><li>padding 5px 10px 15px 20px 上5px 右10px 下15px 左20px、</li><li>内边距会影响盒子的大小（变大）在设置了宽高的情况下</li><li>遇到不同的文字显示，最应该使用padding将盒子撑开</li><li>不设置width/height属性，不会撑开盒子</li></ul><h3 id="外边距设置"><a href="#外边距设置" class="headerlink" title="外边距设置"></a>外边距设置</h3><ul><li>margin的复合写法和padding代表的含义一模一样</li><li>外边距实现块级元素水平居中</li><li>必须设置width，左右边距必须设置成auto  margin ：0 auto</li><li>行内元素或者行内块元素实现水平居中，给父级元素加上text-align</li><li>相邻盒子的外边距垂直合并的现象，选择大的为准</li><li>嵌套盒子的塌陷问题，在父子盒子都有外边距的情况下，会出现</li><li>解决办法：父盒子设置边框、设置内边距、设置 overflow：hidden</li><li>border：1px solid transparent 设置边框透明色</li></ul><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><ul><li>行内元素尽量只设置左右的内外边距，不要设置上下的</li><li>去掉li的小圆点 list-style：none</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jAVA"><span class="hljs-comment">//css的第一行代码</span><br>*&#123;<br>margin :<span class="hljs-number">0</span><br>padding:<span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ul><li>border-radius : 10px;</li><li>原理是矩形和圆做交集</li><li>正方形变圆形 高度或者宽度的一半</li><li>矩形变成圆角形，设置为高度的一半</li><li>四个角可以分开变化</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li>box-shadow : h-shadow v-shadow blur spread color inset </li><li>box-shadow : 10px 10px 10px -4px rgba(0,0 ,0 .3)</li><li>h-shadow :水平阴影</li><li>v-shadow：垂直阴影</li><li>blur：阴影是实在的还是虚的</li><li>spread：阴影的大小</li><li>color：颜色</li><li>inset：内阴影 默认外阴影 不用写 </li></ul><h2 id="二、css浮动"><a href="#二、css浮动" class="headerlink" title="二、css浮动"></a>二、css浮动</h2><h3 id="网页布局的3种方式"><a href="#网页布局的3种方式" class="headerlink" title="网页布局的3种方式"></a>网页布局的3种方式</h3><p><img src="G:\htmlProject\image\1.png"></p><p><img src="G:\htmlProject\image\2.png" alt="2"></p><p><img src="G:\htmlProject\image\3.png" alt="3"></p><ul><li><p>标准流：</p><ul><li><p>标签的3大类：块级元素、行内元素、行内块元素</p><p>块级元素的特点：自己独占一行；可以设置宽高；在不设置宽高的情况下，被内容撑开</p><p>行内元素的特点：和其他在一行，长度和宽度由内容决定</p></li></ul></li><li><p>浮动：</p><ul><li>多个块级元素纵向找标准流，多个块级元素横向排列找浮动</li><li>特性：<ol><li>脱标，脱离标准流；浮动的盒子不在保留原来的位置</li><li>多个盒子浮动，总是一行内显示，并且顶端对齐</li><li>浮动有行内块元素的属性，可以设置宽和高</li><li>行内块元素的宽度是内容撑开的</li><li>先设置div 的大小，在设置位置</li><li>浮动的盒子只会影响后面的盒子位置</li><li>先用标准流做上下位置，在用浮动做左右位置</li></ol></li></ul></li><li><p>定位：</p></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li>额外标签法：添加一个空标签在设置clear：both，空标签必须是块级元素</li><li>父级添加overflow：overflow：hidden</li><li>父级添加after</li><li><img src="G:\htmlProject\image\4.png"></li><li>父级添加双伪元素</li><li><img src="G:\htmlProject\image\6.png"></li></ol><h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3><p>定位=定位模式+边偏移</p><p>定位模式：position : relative absoulte fixed static </p><p>边偏移：top bottom left right </p><p>相对定位：</p><ol><li>相对自己原来的位置来进行移动的，和浏览器和父级都没有关系</li><li>不脱标，原来的位置继续保留</li><li>典型应用是给绝对位置做父级</li></ol><p>绝对定位</p><ol><li>如果没有祖先元素，或者祖先元素没有定位，那么绝对位置以浏览器为标准，进行移动</li><li>祖先有定位。以最近的一级作为参考</li><li>绝对定位脱标，不在占有原来的位置</li><li>子绝父相（在学成在线的页面中可以完善）</li></ol><p>固定定位</p><ol><li>以浏览器的可视窗口为参考</li><li>不在占有原来的位置，脱标</li><li>可以看成特殊的绝对定位</li><li>小技巧在版心的右侧：在浏览器的50%，在版心的margin-left：一半</li></ol><p>粘性定位</p><p>不常用，兼容性太差</p><h3 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h3><p>盒子加了固定或者绝对定位，不设置宽高，默认内容的大小</p><p>浮动的盒子不会压住文字，绝对位置的盒子会</p><h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><p>display：none ,block  隐藏以后位置不会保留</p><p>visibility：visible，hidden 掩藏后，位置会保留</p><p>overflow：溢出的部分隐藏，auto：在需要的时候才显示滚动条，scroll：无论怎样都显示滚动条</p><h2 id="三、css高级技巧"><a href="#三、css高级技巧" class="headerlink" title="三、css高级技巧"></a>三、css高级技巧</h2><h3 id="精灵技术："><a href="#精灵技术：" class="headerlink" title="精灵技术："></a>精灵技术：</h3><p>为了减少服务器接收和发送的次数，提高响应的速度</p><p>核心就是background-position的用法</p><h3 id="字体图标："><a href="#字体图标：" class="headerlink" title="字体图标："></a>字体图标：</h3><h3 id="css三角："><a href="#css三角：" class="headerlink" title="css三角："></a>css三角：</h3><p>没有大小的div，在加上3个透明边框，一个有颜色的边框</p><h3 id="css用户界面样式："><a href="#css用户界面样式：" class="headerlink" title="css用户界面样式："></a>css用户界面样式：</h3><p>鼠标的移动样式：cursor</p><p>轮廓线：outline：0</p><p>文本域防止拖拽：resize：none</p><p>行内元素或行内块元素：文字和图片垂直居中 vertical-align：middle</p><p>溢出文本的省略号：单行和多行</p><h2 id="四、布局技巧："><a href="#四、布局技巧：" class="headerlink" title="四、布局技巧："></a>四、布局技巧：</h2><p>margin-left的负值 </p><p>品优购的项目搭建</p><h2 id="五、css例子"><a href="#五、css例子" class="headerlink" title="五、css例子"></a>五、css例子</h2><p>1、/* 设置背景图片 * 50% 50% 水平位置 垂直位置*/</p><p>  background: url(../img/bg.jpg) 50% 50% no-repeat;</p><p>2、  /* perspective 属性定义 3D 元素距视图的距离 */</p><p>  perspective: 120px;</p><p>3、  /* 阴影设置 水平位移 垂直位移 阴影半径 阴影颜色*/</p><p>  box-shadow: 0px 0px 5px #333;</p><p>4、  /* 设置居中 */</p><p>  position: absolute;</p><p>  /* 是以左上角为原点，故不处于中心位置 */</p><p>  top: 50%;</p><p>  left: 50%;</p><p>  /* 往上（x轴）,左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */</p><p>  transform: translate(-50%, -50%);</p><p>5、  /* 生成绝对定位的元素，相对于浏览器窗口进行定位。 */</p><p>  display: flex;</p><p>6、  /* flex的子项都是居中 */</p><p>  align-items: center;</p><p>7、  /* 其他灵活的项目进行扩展的量 */</p><p>  flex-grow: 1;</p><p>8、  /* 轮廓线 */</p><p>  outline: none;</p><p>9、  /* 透明情况 0 完全透明，1 完全不透明 */</p><p>  opacity: 0;</p><p>10、  /* 设置过渡的效果 代表4个属性*/</p><p>  transition: 0.5s;</p><p>11、  /* 指定背景图像 */</p><p>  background-size: 20px 20px;</p><p>12、  /* :root跟伪类，方便我们重复使用同一属性，自定义var（）调用 */</p><p>   :root {</p><p>​    /* 颜色 */</p><p>​    –white: #e9e9e9;</p><p>​    –gray: #333;</p><p>​    –blue: #0367a6;</p><p>​    –lightblue: #008997;</p><p>​    /* 外边框圆角 */</p><p>​    –button-radius: 0.7rem;</p><p>​    –max-width: 758px;</p><p>​    –max-height: 420px;</p><p>​    /* 字体样式 */</p><p>​    font-size: 16px;</p><p>​    font-family: -apple-system, BlinkMacSystemFont, ‘Segoe UI’, Roboto, Oxygen, Ubuntu, Cantarell, ‘Open Sans’, ‘Helvetica Neue’, sans-serif;</p><p>  }</p><p>13、    /* 定义背景图片随滚动轴的移动方式 随着页面的滚动轴背景图片不会移动 */</p><p>​    background-attachment: fixed;</p><p>14、    /* background-position 为每一个背景图片设置初始位置 */</p><p>​    background-position: center;</p><p>15、    /* 属性设置是否及如何重复背景图像 */</p><p>​    background-repeat: no-repeat;</p><p>16、    /* background-size中，100% (可以看到完整的照片，但是图片了能会变形)</p><p>​    cover（不一定看到完整的图片，但是图片比例不会变化）</p><p>​    都是用于将图片扩大或者缩放来适应整个容器 */</p><p>​    background-size: cover;</p><p>17、  /* 指定一个容器采用网格布局 */</p><p>​    display: grid;</p><p>18、    /* height:100vh == height:100%; </p><p>​    但是当元素没有内容时候，设置height:100%，该元素不会被撑开，此时高度为0，</p><p>​    但是设置height:100vh，该元素会被撑开屏幕高度一致。 */</p><p>​    height: 100vh;</p><p>19、    /* align-items属性控制垂直位置，</p><p>​    justify-items属性控制水平位置。</p><p>​    这两个属性的值一致时，就可以合并写成一个值。</p><p>​    所以，place-items: center; */</p><p>​    place-items: center;</p><p>20、    /* 如果为正数，则离用户更近，为负数则表示离用户更远。 */</p><p>​    z-index: 2;</p><p>21、    /* translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</p><p>​    translateX(x)仅水平方向移动（X轴移动）</p><p>​    translateY(Y)仅垂直方向移动（Y轴移动） */</p><p>​    transform: translateX(100%);</p><p>22、    /* 调用show函数 */</p><p>​    /* 动画完成一个周期所需的时间。 */</p><p>​    animation: show 0.6s;</p><p>22、  @keyframes show {</p><p>​    /* 0%是动画的开始 */</p><p>​    0%,</p><p>​    49.99% {</p><p>​      /* 完全透明 */</p><p>​      opacity: 0;</p><p>​      z-index: 1;</p><p>​    }</p><p>​    50%,</p><p>​    /* 100%是动画的结束 */</p><p>​    100% {</p><p>​      /* 完全显示 */</p><p>​      opacity: 1;</p><p>​      z-index: 5;</p><p>​    }</p><p>  }</p><p>23、    /* 这个百分比是以父元素内容长度的百分比 移到最左侧*/</p><p>​    left: -100%;</p><p>24、 /* 弹性布局 */</p><p>​    display: flex;</p><p>25、    /* 主轴为垂直方向，起点在上沿 */</p><p>​    flex-direction: column;</p><p>26、    /* 定义粗体字符。 */</p><p>​    font-weight: bold;</p><p>27、    /* letter-spacing 属性增加或减少字符间的空白（字符间距） */</p><p>​    letter-spacing: 0.1rem;</p><p>28、   /* text-transform 属性控制文本的大小写。 */</p><p>​    text-transform: uppercase;</p><p>29、  /* E &gt; F 表示选择E元素的所有子F元素 E F选择所有后代元素，&gt;只选择一代。*/</p><p>  .form&gt;.btn {</p><p>​    margin-top: 1.5rem;</p><p>  }</p><p>30、    /* 定义 2D 缩放转换。 */</p><p>​    transform: scale(0.95);</p><p>31、    /* 背景颜色渐变 */</p><p>​    background-image: linear-gradient(90deg, var(–blue) 0%, var(–lightblue) 74%);</p><p>32、总结</p><p>网格布局：</p><p>  display: grid;</p><p>align-items：center</p><p> justify-items：center</p><p>place-items: center; </p><p>弹性布局：</p><p>display：fixed；</p><p>text-align: center;</p><p>justify-content: center;</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/2021/07/09/vue/"/>
    <url>/2021/07/09/vue/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue简介"><a href="#一、vue简介" class="headerlink" title="一、vue简介"></a>一、vue简介</h2><ol><li><p>vue是javascript框架</p></li><li><p>简化了Dom操作</p></li><li><p>响应式的数据交互</p></li><li><p>组件开发</p></li></ol><h2 id="二、第一个vue程序"><a href="#二、第一个vue程序" class="headerlink" title="二、第一个vue程序"></a>二、第一个vue程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;第一个vue程序&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br>    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;第一个vue程序&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="三、el-挂载点"><a href="#三、el-挂载点" class="headerlink" title="三、el:挂载点"></a>三、el:挂载点</h2><p>可以使用id、class、标签选择器，但是一般选择id选择器</p><h2 id="四、data：数据对象"><a href="#四、data：数据对象" class="headerlink" title="四、data：数据对象"></a>四、data：数据对象</h2><p>vue用到的数据定义在data中</p><p>data中可以写复杂的数据类型</p><p>渲染复杂的数据类型，遵守js语法即可</p><h2 id="五、本地应用"><a href="#五、本地应用" class="headerlink" title="五、本地应用"></a>五、本地应用</h2><h2 id="六、vue指令"><a href="#六、vue指令" class="headerlink" title="六、vue指令"></a>六、vue指令</h2><p>一组带v-xxx的vue指令</p><h2 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h2><p>v-text 会覆盖h2内部的值 </p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h2><p>v-html和v-text的属性一样，但是在有html属性的时候，会渲染成html标签</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><p>为元素绑定事件，</p><p>可以传入自定义的参数</p><p>@keyup.enter=”” 按回车键触发事件</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show:"></a>v-show:</h2><p>v-show 实质操纵的是元素的dispaly属性，在频繁显示和隐藏的时候，推荐使用</p><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if:"></a>v-if:</h2><p>v-if实质操纵的是Dom树，会有内存的损耗，一般不要用</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h2><p>可以设置元素的属性值，</p><h2 id="v-for："><a href="#v-for：" class="headerlink" title="v-for："></a>v-for：</h2><p>一般和数组联合使用，实现循环</p><p>v-for= “item in intArr  “    </p><p>v-for=” （item,index ）in intArr”</p><p>item代表的就是intArr里的值，</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model:"></a>v-model:</h2><p>便捷的设置和获取表单元素的值</p><p>绑定的数据会和表单元素的值相关联</p><p>一变全变，相互影响</p><h2 id="七、总结："><a href="#七、总结：" class="headerlink" title="七、总结："></a>七、总结：</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">v-text：可以表示成<span class="hljs-comment">&#123;&#123; &#125;</span>&#125;<br><br>v-<span class="hljs-keyword">on</span>：可以表示成@ 为元素绑定事件的 绑定<span class="hljs-function"><span class="hljs-keyword">method</span>里的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">bind</span>：可以表示成：可以改变元素的值 绑定<span class="hljs-title">data</span>里的数据</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">model</span>：实现数据的双向绑定</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svg</title>
    <link href="/2021/07/09/svg/"/>
    <url>/2021/07/09/svg/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手写svg组件"><a href="#一、手写svg组件" class="headerlink" title="一、手写svg组件"></a>一、手写svg组件</h2><ol><li><p>手写一个svg组件（在componment文件下，新建文件SvgIcon）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;svg class=&quot;svg-icon&quot; aria-hidden=&quot;true&quot;&gt;<br>        &lt;use :xlink:href=&quot;iconName&quot;/&gt;<br>    &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;svg-icon&#x27;,<br>        props: &#123;<br>            iconClass: &#123;<br>                type: String,<br>                required: true<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            iconName() &#123;<br>                return `#icon-$&#123;this.iconClass&#125;`<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>    .svg-icon &#123;<br>        width: 1em;<br>        height: 1em;<br>        vertical-align: -0.15em;<br>        fill: currentColor;<br>        overflow: hidden;<br>        margin-right: 10px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在iconfont生成xxx.js文件，（这个文件里包含需要的svg图片），导入index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;&quot;&gt;<br>...<br>&lt;!--    引入svg(password)图标--&gt;<br>&lt;!--    &lt;script src=&quot;//at.alicdn.com/t/font_2648240_79u0g7z36jm.js&quot;&gt;&lt;/script&gt;--&gt;<br>    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;<br>  &lt;/head&gt;<br>...<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;svg-icon icon-class=&quot;password&quot;/&gt;<br>&lt;!--    svg原生写法--&gt;<br>&lt;!--    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;--&gt;<br>&lt;!--      &lt;use xlink:href=&quot;#icon-password&quot;&gt;&lt;/use&gt;--&gt;<br>&lt;!--    &lt;/svg&gt;--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>优化实现自动导入，在src文件下新建icons/svg文件，新建index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import SvgIcon from &quot;@/components/SvgIcon.vue&quot;;<br><br>Vue.component(&#x27;svg-icon&#x27;, SvgIcon)<br><br>// 自动导入<br>const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)<br>const req = require.context(&#x27;./svg&#x27;, false, /\.svg$/)<br>// 打印以.svg命名的所有文件<br>// console.log(req.keys())<br>const result = requireAll(req)<br>console.log(&#x27;********result*****&#x27;)<br>console.log(result)<br></code></pre></td></tr></table></figure></li><li><p>环境安装，基于webpack将svg打包成svg-sprite，安装 npm install svg-sprite-loader -D , 安装 npm install svgo-D</p></li><li><p>配置vue.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> path.join(__dirname, dir)<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1. 取消默认 file-loader 对 svg 文件的处理</span><br>        config.module<br>            .rule(<span class="hljs-string">&#x27;svg&#x27;</span>) <span class="hljs-comment">// 对 svg 规则的配置</span><br>            .exclude <span class="hljs-comment">// 添加忽略文件夹, 忽略file-loader对这个文件夹下的svg文件处理</span><br>            <span class="hljs-comment">// 建议使用绝对路径</span><br>            <span class="hljs-comment">// .add(&#x27;./src/assets/icons/svg&#x27;) // 相对路径</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>)) <span class="hljs-comment">// 绝对路径</span><br>            .end()<br>        config.module<br>            .rule(<span class="hljs-string">&#x27;icons&#x27;</span>) <span class="hljs-comment">// 配置 icons 的规则</span><br>            .test(<span class="hljs-regexp">/\.svg$/</span>) <span class="hljs-comment">// 匹配以 .svg 结尾的文件</span><br>            .include <span class="hljs-comment">// 添加要处理的文件夹</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>))<br>            .end()<br>            .use(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>) <span class="hljs-comment">// 使用 svg-sprite-loader 处理</span><br>            .loader(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>            .options(&#123;<br>                <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span> <span class="hljs-comment">// 配置 symbol id, 需要使用这个 id 来使用 svg 图标</span><br>            &#125;)<br>            .end()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>vue.config.js 是基于vue的webpack配置文件，放在项目的根目录下</p></li><li><p>webpack.config.js是webpack的配置文件，vue/react都可以使用</p></li><li><p>vue-cli 2.0时代，webpack的配置文件写在config/index.js 文件</p></li><li><p>vue-cli 3.0 时代，没有了config文件夹，vue.config.js 放在根目录下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>component</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2021/07/09/webpack/"/>
    <url>/2021/07/09/webpack/</url>
    
    <content type="html"><![CDATA[<h2 id="一、webpack基础"><a href="#一、webpack基础" class="headerlink" title="一、webpack基础"></a>一、webpack基础</h2><ol><li>webpack是前端资源加载或者打包的工具</li><li>webpack 3.0 的版本没有问题</li><li>webpack4.0 的版本需要安装webpack-cli </li><li>全局安装在任何项目中都可以使用，如果是局部安装（本地安装）只能在当前项目中使用</li><li>webpack可以打包js，json文件</li><li>如果需要打包其他类型的文件，需要loader</li><li>loader解决不了的问题，需要plugin插件</li><li>webpack有entry入口文件，output出口文件。可以有多个入口，但是只能有一个出口</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
