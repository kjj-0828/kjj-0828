<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue-admin-03router</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003Router/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003Router/</url>
    
    <content type="html"><![CDATA[<ol><li><p>push()方法的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;home&#x27;</span>) <span class="hljs-comment">// 跳转到home界面 字符串</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;home&#x27;</span>&#125;) <span class="hljs-comment">// 跳转到home界面 对象</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">userId</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;) <span class="hljs-comment">// 命名路由</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;register&#x27;</span>,<span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">plan</span>:private&#125;&#125;) <span class="hljs-comment">// 查询参数</span><br></code></pre></td></tr></table></figure></li><li><p>如果提供了path，param会被忽略，可以理解成==path—&gt;query==   ==name—&gt;params==</p></li><li><p>代替的是下面的这种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userId = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;userId&#125;</span>`</span>&#125;)  <span class="hljs-comment">// /user/123</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;userId&#125;) <span class="hljs-comment">// user/123</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;userId&#125;&#125;) <span class="hljs-comment">// /user params不生效</span><br></code></pre></td></tr></table></figure></li><li><p>路由的传参方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>、手写完整的 path:<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">$&#123;userId&#125;</span>`</span>&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.params.userId<br><span class="hljs-number">2</span>、用 params 传递：<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">userId</span>: <span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.params.userId<br> <br>    url 形式：url 不带参数，http:localhost:<span class="hljs-number">8080</span>/#/user<br><span class="hljs-number">3</span>、用 query 传递：<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">userId</span>: <span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.query.userId<br> <br>    url 形式：url 带参数，http:localhost:<span class="hljs-number">8080</span>/#/user?userId=<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>==query== 相当于 ==get== 请求，页面跳转的时候可以在地址栏看到请求参数，==params== 相当于 ==post== 请求，参数不在地址栏中显示。</p><p>以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。</p><p><code>code</code></p><p><code>code</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03路由拦截</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、分析permission-js"><a href="#一、分析permission-js" class="headerlink" title="一、分析permission.js"></a>一、分析permission.js</h2><ol><li><p>分析导入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> NProgress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span> <span class="hljs-comment">// progress bar 进度条插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="hljs-comment">// progress bar style 进度条样式</span><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">// get token from cookie 拿到token</span><br><span class="hljs-keyword">import</span> getPageTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/get-page-title&#x27;</span> <span class="hljs-comment">// 更改页面title</span><br></code></pre></td></tr></table></figure></li><li><p>路由拦截逻辑</p><ul><li><p>判断是否有token,有进行后续操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (hasToken) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果有token，说明用户已经登录，如果用户要跳转去login，一律跳转到home界面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123; <span class="hljs-comment">// 在登录的情况下，用户在导航栏输入login，统一重定向到home界面</span><br>      <span class="hljs-comment">// if is logged in, redirect to the home page</span><br>      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br>      NProgress.done()<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>如果用户输入其他页面的地址，就需要判断权限</p><ul><li><p>获取用户信息，如果有用户信息，放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hasGetUserInfo = store.getters.name<br>     <span class="hljs-keyword">if</span> (hasGetUserInfo) &#123; <span class="hljs-comment">// 如果用户name存在state中，放行</span><br>         next()<br>     &#125;<br></code></pre></td></tr></table></figure></li><li><p>没有用户信息，获取用户信息，如果成功，放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">// 获取用户信息之后，放行</span><br>                   <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)<br>                   next()<br>               &#125;<br></code></pre></td></tr></table></figure></li><li><p>如果没有成功，重置Token，跳转到login</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">catch</span> (error) &#123;<br>                    <span class="hljs-comment">// remove token and go to login page to re-login</span><br>                    <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)<br>                    Message.error(error || <span class="hljs-string">&#x27;Has Error&#x27;</span>)<br>                    next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>                    NProgress.done()<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>没有token，查看是否在白名单里,如果在白名单里，放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* has no token*/</span> <span class="hljs-comment">// 如果没登录，查看用户去的地方在不在白名单</span><br>        <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 白名单中是不需要登录就可以访问的界面</span><br>            <span class="hljs-comment">// in the free login whitelist, go directly</span><br>            next()<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果没有在白名单里，一律跳转到登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 既没有token又没在白名单，直接定位到login界面</span><br>            next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>            NProgress.done()<br>        &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03动态菜单栏</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E5%8A%A8%E6%80%81%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E5%8A%A8%E6%80%81%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、得到路由表"><a href="#一、得到路由表" class="headerlink" title="一、得到路由表"></a>一、得到路由表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">routes</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">// 得到路由表</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$router.options.routes[<span class="hljs-number">2</span>].children;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="二、循环路由表"><a href="#二、循环路由表" class="headerlink" title="二、循环路由表"></a>二、循环路由表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-menu-item v-for=&quot;route in routes&quot; :key=&quot;route.path&quot; :index=&quot;route.path&quot;&gt;<br>  &lt;svg-icon :icon-class=&quot;route.meta.icon&quot;&gt;&lt;/svg-icon&gt;<br>  &lt;span slot=&quot;title&quot;&gt;&#123;&#123; route.meta.title &#125;&#125;&lt;/span&gt;<br>&lt;/el-menu-item&gt;<br></code></pre></td></tr></table></figure><h2 id="三、实现刷新时，高亮不变"><a href="#三、实现刷新时，高亮不变" class="headerlink" title="三、实现刷新时，高亮不变"></a>三、实现刷新时，高亮不变</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">activeMenu</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">//页面刷新后，还是高亮选择的菜单项</span><br>  <span class="hljs-keyword">const</span> route = <span class="hljs-built_in">this</span>.$route;<br>  <span class="hljs-keyword">const</span> &#123; meta, path &#125; = route;<br>  <span class="hljs-keyword">return</span> path;<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-menu<br>  class=&quot;el-menu-vertical-demo&quot;<br>  background-color=&quot;#304156&quot;<br>  text-color=&quot;#BFCBD9&quot;<br>  router<br>  :default-active=&quot;activeMenu&quot;<br>  active-text-color=&quot;#409EFF&quot;<br>&gt;<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li> this.$router:我们可以在任何组件内，通过 this.$router访问路由器</li><li> this.$route:可以通过 this.$route访问当前路由</li></ul>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u014395524/article/details/88194842">Vue 中 this.$router 与 this.$route 的区别 以及 push() 方法</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin 03退出登录</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2003%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、退出"><a href="#一、退出" class="headerlink" title="一、退出"></a>一、退出</h2><ol><li><p>先发出退出请求</p></li><li><p>退出时，清空cookie</p></li><li><p>退出时，重置路由表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params">&#123; commit, state &#125;</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        logout(state.token).then(<span class="hljs-function">() =&gt;</span> &#123;<br>            removeToken(); <span class="hljs-comment">//  移出token</span><br>            resetRouer(); <span class="hljs-comment">// 重置路由表</span><br>            commit(<span class="hljs-string">&#x27;RESET_STATE&#x27;</span>);<br>            resolve();<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>            reject(error);<br>        &#125;)<br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>完成后，跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;user/logout&quot;</span>);<br>  <span class="hljs-comment">// this.$router.push(&quot;/&quot;);</span><br>  <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.$route.fullPath&#125;</span>`</span>);<br>&#125;,<br></code></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-02实现mockjs</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2002%E5%AE%9E%E7%8E%B0mockjs/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2002%E5%AE%9E%E7%8E%B0mockjs/</url>
    
    <content type="html"><![CDATA[<h2 id="一、在根目录下新建mock文件夹"><a href="#一、在根目录下新建mock文件夹" class="headerlink" title="一、在根目录下新建mock文件夹"></a>一、在根目录下新建mock文件夹</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811181345.png" alt="image-20210811181344216"></p><h2 id="二、模块分类"><a href="#二、模块分类" class="headerlink" title="二、模块分类"></a>二、模块分类</h2><p>├── mock                      // mock 模拟数据 与src同级<br>│   ├── index.js              // 数据总入口<br>│   ├── mock-server.js        // 数据服务层<br>│   ├── table.js              // 数据块</p><h2 id="三、分析-mock-server-js"><a href="#三、分析-mock-server-js" class="headerlink" title="三、分析 mock-server.js"></a>三、分析 mock-server.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> chokidar = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chokidar&#x27;</span>) <span class="hljs-comment">// 监听文件的变化</span><br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>) <span class="hljs-comment">// j解析http请求</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chalk&#x27;</span>) <span class="hljs-comment">// 颜色插件</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>) <span class="hljs-comment">// 模块提供了一些用于处理文件路径的小工具</span><br><span class="hljs-keyword">const</span> Mock = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mockjs&#x27;</span>)<br><span class="hljs-comment">// process.cwd() 方法返回 Node.js 进程的当前工作目录</span><br><span class="hljs-comment">// path.join(path1，path2，path3.......)将路径片段使用特定的分隔符（window：\）连接起来形成路径，并规范化生成的路径</span><br><span class="hljs-keyword">const</span> mockDir = path.join(process.cwd(), <span class="hljs-string">&#x27;mock&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li><p>路由的批量注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registerRoutes</span>(<span class="hljs-params">app</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> mockLastIndex<br>    <span class="hljs-keyword">const</span> &#123; mocks &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index.js&#x27;</span>)<br>    <span class="hljs-keyword">const</span> mocksForServer = mocks.map(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> responseFake(route.url, route.type, route.response)<br>    &#125;)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> mock <span class="hljs-keyword">of</span> mocksForServer) &#123;<br>      app[mock.type](mock.url, mock.response)<br>      mockLastIndex = app._router.stack.length<br>    &#125;<br>    <span class="hljs-keyword">const</span> mockRoutesLength = <span class="hljs-built_in">Object</span>.keys(mocksForServer).length<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">mockRoutesLength</span>: mockRoutesLength,<br>      <span class="hljs-attr">mockStartIndex</span>: mockLastIndex - mockRoutesLength<br>    &#125;<br>  &#125;<br><span class="hljs-comment">//删除路由</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unregisterRoutes</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">require</span>.cache).forEach(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (i.includes(mockDir)) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">require</span>.cache[<span class="hljs-built_in">require</span>.resolve(i)]<br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>返回对应的请求值，针对中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> responseFake = <span class="hljs-function">(<span class="hljs-params">url, type, respond</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">url</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.VUE_APP_BASE_API&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>),<br>     <span class="hljs-attr">type</span>: type || <span class="hljs-string">&#x27;get&#x27;</span>,<br>     <span class="hljs-function"><span class="hljs-title">response</span>(<span class="hljs-params">req, res</span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request invoke:&#x27;</span> + req.path)<br>       res.json(Mock.mock(respond <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span> ? respond(req, res) : respond))<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>实现步骤</p><p>├──vue.config.js配置devServer</p><p> <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811183213.png" alt="image-20210811183212659"></p><p>​    ├──mock文件中配置mock-server.js和index.js</p><p>​            ├──main.js配置（暂时没分析出作用）<img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811183329.png" alt="image-20210811183328460"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_41597258/article/details/86534076">【Vue】Vue-cli之Mock.js 模拟数据实现及构建</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin 02vue文件配置</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2002vue%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2002vue%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、端口的配置"><a href="#一、端口的配置" class="headerlink" title="一、端口的配置"></a>一、端口的配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> port = process.env.port || process.env.npm_config_port || <span class="hljs-number">9528</span> <span class="hljs-comment">// process.env.port 环境变量的端口，环境变量要是设置了端口，就用环境变量的</span><br><br></code></pre></td></tr></table></figure><p>在根目录文件夹下创建3个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// .env.development</span><br>NODE_ENV = production<br><br># just a flag<br>ENV = <span class="hljs-string">&#x27;staging&#x27;</span><br><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/stage-api&#x27;</span><br>#port<br>port = <span class="hljs-number">8088</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//.env.production</span><br># just a flag<br>ENV = <span class="hljs-string">&#x27;production&#x27;</span><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//.env.staging</span><br># just a flag<br>ENV = <span class="hljs-string">&#x27;production&#x27;</span><br><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li> 当我们使用<code>npm run dev</code>的时候环境变量使用的是.env.development 中的配置</li><li> 使用<code>npm run build</code> 的时候使用的是.env.production中的配置</li></ul>          </div><h2 id="二、测试："><a href="#二、测试：" class="headerlink" title="二、测试："></a>二、测试：</h2><p>如果在环境变量中配置了端口，那么就会使用配置的端口(本人配置的8088)，如果没有配置，就使用默认的赋值（本人配置的9528）</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811180059.png" alt="image-20210811180051771"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811180115.png" alt="image-20210811180115129"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/zcy_csdn123/article/details/100736846">VUE 环境变量 process process.env</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Vue Admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin 01权限控制</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="（vue-element-admin）"><a href="#（vue-element-admin）" class="headerlink" title="（vue-element-admin）"></a>（vue-element-admin）</h2><h2 id="一、登录成功，进行路由拦截"><a href="#一、登录成功，进行路由拦截" class="headerlink" title="一、登录成功，进行路由拦截"></a>一、登录成功，进行路由拦截</h2><ol><li><p>用户登录成功后，在全局钩子router.brforeEach中拦截路由，实现获取用户信息和动态显示菜单</p><ul><li><p>判断是否有token，有token，如果是登录页直接放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>   <span class="hljs-comment">// if is logged in, redirect to the home page</span><br>   next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)<br>   NProgress.done() <span class="hljs-comment">// hack: https://github.com/PanJiaChen/vue-element-admin/pull/2939</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>不是登录页，进行判断，是否有角色，有角色，直接放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// determine whether the user has obtained his permission roles through getInfo</span><br>      <span class="hljs-keyword">const</span> hasRoles = store.getters.roles &amp;&amp; store.getters.roles.length &gt; <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> (hasRoles) &#123;<br>        next()<br>      &#125;<br></code></pre></td></tr></table></figure></li><li><p>没有角色，去获取用户信息，拿到角色信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// get user info</span><br>          <span class="hljs-comment">// note: roles must be a object array! such as: [&#x27;admin&#x27;] or ,[&#x27;developer&#x27;,&#x27;editor&#x27;]</span><br>          <span class="hljs-keyword">const</span> &#123; roles &#125; = <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>获取用户信息,获得用户的角色、姓名、头像、介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params">&#123;commit, state&#125;</span>)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>     getInfo(state.token).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>       <span class="hljs-keyword">const</span> &#123;data&#125; = response<br>       <br>       <span class="hljs-keyword">if</span> (!data) &#123;<br>         reject(<span class="hljs-string">&#x27;Verification failed, please Login again.&#x27;</span>)<br>       &#125;<br>       <br>       <span class="hljs-keyword">const</span> &#123;roles, name, avatar, introduction&#125; = data<br>       <br>       <span class="hljs-comment">// roles must be a non-empty array</span><br>       <span class="hljs-keyword">if</span> (!roles || roles.length &lt;= <span class="hljs-number">0</span>) &#123;<br>         reject(<span class="hljs-string">&#x27;getInfo: roles must be a non-null array!&#x27;</span>)<br>       &#125;<br>       <br>       commit(<span class="hljs-string">&#x27;SET_ROLES&#x27;</span>, roles)<br>       commit(<span class="hljs-string">&#x27;SET_NAME&#x27;</span>, name)<br>       commit(<span class="hljs-string">&#x27;SET_AVATAR&#x27;</span>, avatar)<br>       commit(<span class="hljs-string">&#x27;SET_INTRODUCTION&#x27;</span>, introduction)<br>       resolve(data)<br>     &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>       reject(error)<br>     &#125;)<br>   &#125;)<br> &#125;,<br></code></pre></td></tr></table></figure></li></ul></li><li><p>根据角色生成路由表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// generate accessible routes map based on roles</span><br><span class="hljs-keyword">const</span> accessRoutes = <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;permission/generateRoutes&#x27;</span>, roles)<br></code></pre></td></tr></table></figure><ul><li><p>判断角色是admin，路由表就是所有动态加载的路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (roles.includes(<span class="hljs-string">&#x27;admin&#x27;</span>)) &#123;<br>      accessedRoutes = asyncRoutes || []<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>如果角色是其他，就要进行过滤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>       accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)<br>     &#125;<br></code></pre></td></tr></table></figure><ul><li><p>根据角色过滤路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterAsyncRoutes</span>(<span class="hljs-params">routes, roles</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> res = []<br><br>  routes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> tmp = &#123; ...route &#125;<br>    <span class="hljs-keyword">if</span> (hasPermission(roles, tmp)) &#123;<br>      <span class="hljs-keyword">if</span> (tmp.children) &#123;<br>        tmp.children = filterAsyncRoutes(tmp.children, roles)<br>      &#125;<br>      res.push(tmp)<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>判断权限的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasPermission</span>(<span class="hljs-params">roles, route</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;<br>    <span class="hljs-keyword">return</span> roles.some(<span class="hljs-function"><span class="hljs-params">role</span> =&gt;</span> route.meta.roles.includes(role))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">/* 如果没有设置meta含义是界面没有权限，所有人都可以访问*/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// dynamically add accessible routes</span><br>router.addRoutes(accessRoutes)<br></code></pre></td></tr></table></figure></li><li><p>进行放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></td></tr></table></figure></li><li><p>如果没有token，查看是否在免登录的白名单,如果在，放行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-comment">// in the free login whitelist, go directly</span><br>  next()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>没有在白名单，重定向到登录页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// other pages that do not have permission to access are redirected to the login page.</span><br>  next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>  NProgress.done()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、侧边栏"><a href="#二、侧边栏" class="headerlink" title="二、侧边栏"></a>二、侧边栏</h2><ol><li><p>根据生成的路由表，v-for循环出菜单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-menu<br>  :default-active=&quot;activeMenu&quot;<br>  :collapse=&quot;isCollapse&quot;<br>  :background-color=&quot;variables.menuBg&quot;<br>  :text-color=&quot;variables.menuText&quot;<br>  :unique-opened=&quot;false&quot;<br>  :active-text-color=&quot;variables.menuActiveText&quot;<br>  :collapse-transition=&quot;false&quot;<br>  mode=&quot;vertical&quot;<br>&gt;<br>  &lt;sidebar-item v-for=&quot;route in permission_routes&quot; :key=&quot;route.path&quot; :item=&quot;route&quot; :base-path=&quot;route.path&quot;/&gt;<br>&lt;/el-menu&gt;<br></code></pre></td></tr></table></figure></li><li><p>递归组件，实现下拉菜单的嵌套</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-submenu v-else ref=&quot;subMenu&quot; :index=&quot;resolvePath(item.path)&quot; popper-append-to-body&gt;<br>  &lt;template slot=&quot;title&quot;&gt;<br>    &lt;item v-if=&quot;item.meta&quot; :icon=&quot;item.meta &amp;&amp; item.meta.icon&quot; :title=&quot;item.meta.title&quot; /&gt;<br>  &lt;/template&gt;<br>  &lt;sidebar-item<br>    v-for=&quot;child in item.children&quot;<br>    :key=&quot;child.path&quot;<br>    :is-nest=&quot;true&quot;<br>    :item=&quot;child&quot;<br>    :base-path=&quot;resolvePath(child.path)&quot;<br>    class=&quot;nest-menu&quot;<br>  /&gt;<br>&lt;/el-submenu&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、路由挂载"><a href="#三、路由挂载" class="headerlink" title="三、路由挂载"></a>三、路由挂载</h2></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210809171503.png" alt="image-20210809171455407"></p><h2 id="四、路由格式包含菜单需要的信息"><a href="#四、路由格式包含菜单需要的信息" class="headerlink" title="四、路由格式包含菜单需要的信息"></a>四、路由格式包含菜单需要的信息</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210809171728.png"></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Vue Admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin 01登录逻辑</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h2 id="（vue-element-admin）"><a href="#（vue-element-admin）" class="headerlink" title="（vue-element-admin）"></a>（vue-element-admin）</h2><h2 id="一、登录界面的login发请求"><a href="#一、登录界面的login发请求" class="headerlink" title="一、登录界面的login发请求"></a>一、登录界面的login发请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">handleLogin</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs.loginForm.validate(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (valid) &#123;<br>      <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span><br>      <span class="hljs-comment">// 提交到store的action方法中</span><br>      <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;user/login&#x27;</span>, <span class="hljs-built_in">this</span>.loginForm)<br>        .then(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-built_in">this</span>.redirect || <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">query</span>: <span class="hljs-built_in">this</span>.otherQuery&#125;)<br>          <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span><br>        &#125;)<br>        .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error submit!!&#x27;</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;)<br>&#125;,<br>    <br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li><p> this.$store.dispatch(‘user/login’, this.loginForm)</p></li><li><p> action中的方法是login，但是它提交的方法名是’user/login’</p></li><li><p> 因为在store的index.js中做了相关配置</p></li></ul>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://webpack.js.org/guides/dependency-management/#requirecontext</span><br><span class="hljs-keyword">const</span> modulesFiles = <span class="hljs-built_in">require</span>.context(<span class="hljs-string">&#x27;./modules&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-regexp">/\.js$/</span>)<br><br><span class="hljs-comment">// you do not need `import app from &#x27;./modules/app&#x27;`</span><br><span class="hljs-comment">// it will auto require all vuex module from modules file</span><br><span class="hljs-keyword">const</span> modules = modulesFiles.keys().reduce(<span class="hljs-function">(<span class="hljs-params">modules, modulePath</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span><br><span class="hljs-comment">/* \w 匹配包括下划线的任何单词字符。等价于&#x27;[A-Za-z0-9_]&#x27; */</span><br>  <span class="hljs-keyword">const</span> moduleName = modulePath.replace(<span class="hljs-regexp">/^\.\/(.*)\.\w+$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>)<br>  <span class="hljs-comment">/*   console.log(moduleName) //app errorLog permission settings tagsView user */</span><br>  <span class="hljs-keyword">const</span> value = modulesFiles(modulePath)<br>  modules[moduleName] = value.default<br>  <span class="hljs-keyword">return</span> modules<br>&#125;, &#123;&#125;)<br></code></pre></td></tr></table></figure><h2 id="二、请求被提交到store的action方法中"><a href="#二、请求被提交到store的action方法中" class="headerlink" title="二、请求被提交到store的action方法中"></a>二、请求被提交到store的action方法中</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-comment">// user login</span><br>    <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123;commit&#125;, userInfo</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;username, password&#125; = userInfo<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">/*  api中的login，我的理解上相当于后台的controller层 */</span><br>        login(&#123;<span class="hljs-attr">username</span>: username.trim(), <span class="hljs-attr">password</span>: password&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123;data&#125; = response<br>          <span class="hljs-comment">/* response中返回数据 更改state中的数据 */</span><br>          commit(<span class="hljs-string">&#x27;SET_TOKEN&#x27;</span>, data.token)<br>          <span class="hljs-comment">/* token保存到cookie中 */</span><br>          setToken(data.token)<br>          <span class="hljs-comment">/* 回调函数 */</span><br>          resolve()<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>          reject(error)<br>        &#125;)<br>      &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure><h2 id="三、action方法转到api请求中"><a href="#三、action方法转到api请求中" class="headerlink" title="三、action方法转到api请求中"></a>三、action方法转到api请求中</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/vue-element-admin/user/login&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、api请求根据地址找到mock"><a href="#四、api请求根据地址找到mock" class="headerlink" title="四、api请求根据地址找到mock"></a>四、api请求根据地址找到mock</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/vue-element-admin/user/login&#x27;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">response</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;username&#125; = config.body<br>    <span class="hljs-keyword">const</span> token = tokens[username]<br><br>    <span class="hljs-comment">// mock error</span><br>    <span class="hljs-keyword">if</span> (!token) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">60204</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Account and password are incorrect.&#x27;</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/*返回数据*/</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">20000</span>,<br>      <span class="hljs-attr">data</span>: token<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li><p>this.$store.dispatch()与this.$store.commit()只是存取的方式不同</p></li><li><p>两个方法都是传值给vuex的mutation改变state中的值</p></li><li><p>this.$store.dispatch() 异步操作 写法：<code>this.$store.dispatch(‘action方法名’,值)</code></p></li><li><p>this.$store.commit() 同步操作  写法：<code>this.$store.commit(‘mutations方法名’,值)</code></p></li><li><p>commit: 同步操作</p><ul><li>存储 <code>this.$store.commit(&#39;changeValue&#39;,name)</code></li><li>取值 <code>this.$store.state.changeValue</code></li></ul></li><li><p>dispatch: 异步操作</p><ul><li>存储 <code>this.$store.dispatch(&#39;getlists&#39;,name)</code></li><li>取值 <code>this.$store.getters.getlists</code></li></ul></li></ul>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_44317018/article/details/105784086">vuex中 this.$store.dispatch() 与 this.$store.commit()方法的区别</a></p><p><a href="https://blog.csdn.net/weixin_42554191/article/details/105741120">vuex里面的this.$store.dispatch方法</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Vue Admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin 01创建项目</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin%2001%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><ol><li><p>在vs code中创建项目 vue-admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">vue create vue-admin<br></code></pre></td></tr></table></figure></li><li><p>选择手动配置项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808222646.png" alt="image-20210808222638266"></p></li><li><p>选择配置，空格键选择</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223056.png" alt="image-20210808223055701"></p></li><li><p>vue版本选择2.0</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223126.png" alt="image-20210808223125394"></p></li><li><p>是否选择历史路由，选择n</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223204.png" alt="image-20210808223203364"></p></li><li><p>这一步提示我们选择配置文件的位置，因为每个插件都有自己单独的配置文件，我们选择第一个</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223312.png" alt="image-20210808223311890"></p></li><li><p>是否保存为预设，选择n</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223350.png" alt="image-20210808223349230"></p></li><li><p>下载依赖</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223409.png" alt="image-20210808223408753"></p></li><li><p>创建完成</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223527.png" alt="image-20210808223527083"></p></li><li><p>对package.json文件的注释</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;vue-admin&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,<br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>,<br>    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>  &#125;,<br><br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123; <span class="hljs-comment">// dependencies生产环境,作为依赖，会自动下载</span><br>    <span class="hljs-attr">&quot;core-js&quot;</span>: <span class="hljs-string">&quot;^3.6.5&quot;</span>, <span class="hljs-comment">// core-js 就是提供js新语法api一个集合库 core-js相当于babel-polyfil</span><br>    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.11&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;^3.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;vuex&quot;</span>: <span class="hljs-string">&quot;^3.4.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123; <span class="hljs-comment">//devDependencies开发环境</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-router&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-plugin-vuex&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-service&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/eslint-config-standard&quot;</span>: <span class="hljs-string">&quot;^5.1.2&quot;</span>, <span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;babel-eslint&quot;</span>: <span class="hljs-string">&quot;^10.1.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint&quot;</span>: <span class="hljs-string">&quot;^6.7.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-import&quot;</span>: <span class="hljs-string">&quot;^2.20.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-node&quot;</span>: <span class="hljs-string">&quot;^11.1.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-promise&quot;</span>: <span class="hljs-string">&quot;^4.2.1&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-standard&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-vue&quot;</span>: <span class="hljs-string">&quot;^6.2.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.12.0&quot;</span>, <span class="hljs-comment">// 第3步安装了CSS Pre-processors node-sass将sass文件编译成css的工具</span><br>    <span class="hljs-attr">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^8.0.2&quot;</span>, <span class="hljs-comment">// 第3步安装了CSS Pre-processors sass-loade加载 SASS/SCSS 文件并将其编译为 CSS</span><br><br>    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.6.11&quot;</span> <span class="hljs-comment">//vue-template-compiler这个包可用于将Vue 2.0模板预编译为呈现函数在vue工程中，安装依赖时，需要vue和vue-template-compiler版本必须保持一致</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/hilsf/p/14453401.html">core.js 是个什么</a></p><p><a href="https://zhuanlan.zhihu.com/p/43249121">一口（很长的）气了解 babel</a></p><p><a href="https://blog.csdn.net/hyk521/article/details/105117432/">使用vue创建项目的详细步骤</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战练习</tag>
      
      <tag>Vue Admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断是否为空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNull</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str === <span class="hljs-string">&quot;undefined&quot;</span> || str === <span class="hljs-string">&quot; &quot;</span> || str === <span class="hljs-string">&quot;null&quot;</span> || str === <span class="hljs-literal">undefined</span> || str === <span class="hljs-string">&#x27;&#x27;</span> || str === <span class="hljs-literal">null</span> || str === <span class="hljs-string">&quot;NULL&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;undefined&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;null&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;NULL&quot;</span>)); <span class="hljs-comment">// true </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间戳转化成时间2</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B42/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B42/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间戳转化成时间2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 时间戳</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回时间格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeStamp2String</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time); <span class="hljs-comment">// 时间戳转成时间</span><br>    <span class="hljs-keyword">let</span> year = dateTime.getFullYear();<br>    <span class="hljs-keyword">let</span> month = dateTime.getMonth() + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + (dateTime.getMonth() + <span class="hljs-number">1</span>) : dateTime.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = dateTime.getDate() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getDate() : dateTime.getDate();<br>    <span class="hljs-keyword">let</span> hour = dateTime.getHours() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getHours() : dateTime.getHours();<br>    <span class="hljs-keyword">let</span> minute = dateTime.getMinutes() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getMinutes() : dateTime.getMinutes();<br>    <span class="hljs-keyword">let</span> second = dateTime.getSeconds() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getSeconds() : dateTime.getSeconds();<br>    <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute + <span class="hljs-string">&quot;:&quot;</span> + second;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeStamp2String(<span class="hljs-number">1526552438244</span>)); <span class="hljs-comment">// 2018-05-17 18:20:38</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间戳转化成时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间戳转化成时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 时间戳</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回时间格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeStamp2String</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    dateTime.setTime(time); <span class="hljs-comment">//我们将向 1970年01月01日 添加 time毫秒，并显示新的日期和时间</span><br>    <span class="hljs-built_in">console</span>.log(dateTime); <span class="hljs-comment">// 2018-05-17T10:20:38.244Z</span><br>    <span class="hljs-keyword">let</span> year = dateTime.getFullYear();<br>    <span class="hljs-keyword">let</span> month = dateTime.getMonth() + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + (dateTime.getMonth() + <span class="hljs-number">1</span>) : dateTime.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = dateTime.getDate() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getDate() : dateTime.getDate();<br>    <span class="hljs-keyword">let</span> hour = dateTime.getHours() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getHours() : dateTime.getHours();<br>    <span class="hljs-keyword">let</span> minute = dateTime.getMinutes() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getMinutes() : dateTime.getMinutes();<br>    <span class="hljs-keyword">let</span> second = dateTime.getSeconds() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getSeconds() : dateTime.getSeconds();<br>    <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute + <span class="hljs-string">&quot;:&quot;</span> + second;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeStamp2String(<span class="hljs-number">1526552438244</span>)); <span class="hljs-comment">// 2018-05-17 18:20:38</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断包含关系2</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断包含关系2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>substr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>isIgnoreCase isIgnoreCase = true 会忽略大小写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsContains</span>(<span class="hljs-params">string, substr, isIgnoreCase</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (isIgnoreCase) &#123; <span class="hljs-comment">// 如果忽略大小写，则全部转成小写比较</span><br>        string = string.toLowerCase();<br>        substr = substr.toLowerCase();<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(string.split(substr));<br>    <span class="hljs-keyword">return</span> string.split(substr).length &gt; <span class="hljs-number">1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;Woder&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>, <span class="hljs-literal">true</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断包含关系</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断包含关系</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>substr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>isIgnoreCase isIgnoreCase = true 会忽略大小写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsContains</span>(<span class="hljs-params">string, substr, isIgnoreCase</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (isIgnoreCase) &#123; <span class="hljs-comment">// 如果忽略大小写，则全部转成小写比较</span><br>        string = string.toLowerCase();<br>        substr = string.toLowerCase();<br>    &#125;<br>    <span class="hljs-keyword">let</span> firstCase = substr.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 得到子串的第一个字符</span><br>    <span class="hljs-keyword">let</span> subLen = substr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; string.length - subLen + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (string.charAt(i) === firstCase) &#123; <span class="hljs-comment">// 第一个字符串匹配</span><br>            <span class="hljs-keyword">if</span> (string.substring(i, i + subLen) === substr) &#123; <span class="hljs-comment">// 判断是否匹配</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;Woder&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>,<span class="hljs-literal">true</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12生成指定位数的随机整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成指定位数的随机整数(可用于验证码)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>count 指定位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回指定位数的随机数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomNum</span>(<span class="hljs-params">count</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = []; <span class="hljs-comment">// 随机数存放到这个数组中</span><br>    <span class="hljs-keyword">let</span> strNum = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        arr[i] = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>); <span class="hljs-comment">// 生成的随机数放入数组</span><br>        strNum += <span class="hljs-built_in">String</span>(arr[i]); <span class="hljs-comment">// 随机数拼接</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> strNum;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getRandomNum(<span class="hljs-number">4</span>)); <span class="hljs-comment">// 2462</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12校验ip地址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%A1%E9%AA%8Cip%E5%9C%B0%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%A1%E9%AA%8Cip%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 匹配ip地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>ipvalue ip地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkIp</span>(<span class="hljs-params">ipvalue</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> regex = <span class="hljs-regexp">/^([1-9]|[1-9]\d|1\d&#123;2&#125;|2[0-1]\d|22[0-3])(\.(\d|[1-9]\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]))&#123;3&#125;$/</span>;<br>    <span class="hljs-keyword">let</span> b = regex.test(ipvalue);<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-comment">// 1 - 9 或者(1 - 9)(0 - 9) 或者 1(0 - 9)(0 - 9) 或者 2(0 - 1)(0 - 9) 或者 22(0 - 3) 开头</span><br><span class="hljs-comment">// . (0-9)</span><br><span class="hljs-comment">// .(1-9)(0-9)</span><br><span class="hljs-comment">// . 1 (随机的2位数)</span><br><span class="hljs-comment">// . 2 (0-4) (0-9)</span><br><span class="hljs-comment">// . 25 (0-5)</span><br><span class="hljs-comment">//匹配3次</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;1.0.0.1&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;127.0.0.1&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;1271.0.0.1&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12根据文件名获取文件格式</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8D%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8D%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据文件名获取文件格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>文件类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileTypeByFileName</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.substring(str.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>).toLowerCase();<br>&#125;<br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.html&quot;</span>)); <span class="hljs-comment">//html</span><br><br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.js&quot;</span>)); <span class="hljs-comment">// js</span><br><br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.php&quot;</span>)); <span class="hljs-comment">//php </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12忽略大小写判断字符串是否相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 忽略大小写判断字符串是否相等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str1 字符串1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str2 字符串2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEqualsIgnorecase</span>(<span class="hljs-params">str1, str2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str1.toUpperCase() === str2.toUpperCase()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&quot;ABCD&quot;</span>;<br><span class="hljs-built_in">console</span>.log(isEqualsIgnorecase(str1, str2)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12从数组中随机获取元素</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数组中获取随机元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr 数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>随机返回一个值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomOne</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arr.length)];<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];<br><span class="hljs-built_in">console</span>.log(randomOne(arr)); <span class="hljs-comment">// 9 </span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>Math.random() * arr.length 得到值是小数，需要进行向下取整</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12字符串在某字符串中出现的次数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E6%9F%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E6%9F%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串在某字符串中出现的次数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>subStr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countStr</span>(<span class="hljs-params">str, subStr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.split(subStr).length - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967&quot;</span>;<br><span class="hljs-keyword">let</span> subStr = <span class="hljs-string">&quot;blog&quot;</span>;<br><span class="hljs-built_in">console</span>.log(countStr(str, subStr)); <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12过滤字符串中的所有空格</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%A9%BA%E6%A0%BC/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤字符串中的所空格</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 带空格的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ignoreSpaces</span>(<span class="hljs-params">string</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 结果字符串</span><br>    <span class="hljs-keyword">let</span> strArr = string.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> strArr) &#123;<br>        res += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(ignoreSpaces(<span class="hljs-string">&quot;a b c d     e&quot;</span>)); <span class="hljs-comment">// abcde</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12url参数转对象</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12url%E5%8F%82%E6%95%B0%E8%BD%AC%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12url%E5%8F%82%E6%95%B0%E8%BD%AC%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * url参数转对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>url url地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回json格式的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseQueryString</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    url = url == <span class="hljs-literal">null</span> ? <span class="hljs-built_in">window</span>.location.href : url;<br>    <span class="hljs-keyword">let</span> search = url.substring(url.indexOf(<span class="hljs-string">&#x27;?&#x27;</span>) + <span class="hljs-number">1</span>); <span class="hljs-comment">// id=1&amp;name=ye21st</span><br>    <span class="hljs-keyword">if</span> (!search) &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> + <span class="hljs-built_in">decodeURIComponent</span>(search).replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class="hljs-regexp">/=/g</span>, <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>); <span class="hljs-comment">// &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ye21st&quot;&#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> + <span class="hljs-built_in">decodeURIComponent</span>(search).replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class="hljs-regexp">/=/g</span>, <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>);<br><br>&#125;<br><span class="hljs-built_in">console</span>.log(parseQueryString(<span class="hljs-string">&quot;http://www.baidu.com?id=1&amp;name=ye21st&quot;</span>)); <span class="hljs-comment">// &#123; id: &#x27;1&#x27;, name: &#x27;ye21st&#x27; &#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间格式总结</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的毫秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date2 = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// 1628348270000 不准确 只能精确到秒</span><br><span class="hljs-keyword">let</span> date3 = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf(); <span class="hljs-comment">//1628348270186</span><br><span class="hljs-keyword">let</span> date5 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-built_in">console</span>.log(date1);<br><span class="hljs-built_in">console</span>.log(date2);<br><span class="hljs-built_in">console</span>.log(date3);<br><span class="hljs-built_in">console</span>.log(date4);<br><span class="hljs-built_in">console</span>.log(date5);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的字符串形式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date11 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 2021-08-08T02:31:04.290Z 实际时间是 2021-08-08T10:31:04.290Z 差8小时</span><br><span class="hljs-keyword">let</span> date12 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString(); <span class="hljs-comment">// Sun Aug 08 2021 10:33:52 GMT+0800 (中国标准时间) 准确时间</span><br><span class="hljs-keyword">let</span> date13 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString(); <span class="hljs-comment">// 2021/8/8 上午10:36:50 准确时间</span><br><span class="hljs-comment">// 使用格式化函数</span><br><span class="hljs-keyword">let</span> date14 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 函数表达式</span><br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> year = date.getFullYear();<br>    <span class="hljs-keyword">let</span> month = date.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = add_zero(date.getDate());<br>    <span class="hljs-keyword">let</span> hour = add_zero(date.getHours());<br>    <span class="hljs-keyword">let</span> minutes = add_zero(date.getMinutes());<br>    <span class="hljs-keyword">let</span> second = add_zero(date.getSeconds());<br>    <span class="hljs-keyword">let</span> str = year + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + day + <span class="hljs-string">&#x27; &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + second;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_zero</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num = num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + num : num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(date11);<br><span class="hljs-built_in">console</span>.log(date12);<br><span class="hljs-built_in">console</span>.log(date13);<br><span class="hljs-built_in">console</span>.log(date14()); <span class="hljs-comment">// 2021-8-08 10:42:44 准确时间</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11格式化之后时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%90%8E%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%90%8E%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化之后时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>endTime 之后时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回时间字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatEndTime</span>(<span class="hljs-params">endTime</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(endTime);<br>    <span class="hljs-keyword">let</span> t = endDate.getTime() - startDate.getTime(); <span class="hljs-comment">//时间差</span><br>    <span class="hljs-keyword">let</span> d = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">let</span> h = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">let</span> m = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> % <span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">return</span> d + <span class="hljs-string">&quot;天&quot;</span> + h + <span class="hljs-string">&quot; 小时&quot;</span> + m + <span class="hljs-string">&quot;分钟&quot;</span> + s + <span class="hljs-string">&quot;秒&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(formatEndTime(<span class="hljs-string">&quot;2021-08-07 23:00&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的毫秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date2 = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// 1628348270000 不准确 只能精确到秒</span><br><span class="hljs-keyword">let</span> date3 = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf(); <span class="hljs-comment">//1628348270186</span><br><span class="hljs-keyword">let</span> date5 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-built_in">console</span>.log(date1);<br><span class="hljs-built_in">console</span>.log(date2);<br><span class="hljs-built_in">console</span>.log(date3);<br><span class="hljs-built_in">console</span>.log(date4);<br><span class="hljs-built_in">console</span>.log(date5);<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11格式化之前时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回之前时间的格式化形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>startTime 开始时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化时间字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatPassTime</span>(<span class="hljs-params">startTime</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> curTime = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());  <span class="hljs-comment">// 当前时间的毫秒数</span><br>    <span class="hljs-keyword">let</span> time = curTime - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(startTime);<br>    <span class="hljs-keyword">let</span> min = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">let</span> hour = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>));<br>    <span class="hljs-keyword">let</span> day = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">let</span> month = <span class="hljs-built_in">parseInt</span>(day / <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">let</span> year = <span class="hljs-built_in">parseInt</span>(month / <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">if</span> (year) &#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month) &#123;<br>        <span class="hljs-keyword">return</span> month + <span class="hljs-string">&quot;月前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (day) &#123;<br>        <span class="hljs-keyword">return</span> day + <span class="hljs-string">&quot;天前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (hour) &#123;<br>        <span class="hljs-keyword">return</span> hour + <span class="hljs-string">&quot;小时前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (min) &#123;<br>        <span class="hljs-keyword">return</span> min + <span class="hljs-string">&quot;分钟前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;刚刚&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-8-7 22:34&quot;</span>)); <span class="hljs-comment">// 1分钟前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-8-6 22:34&quot;</span>)); <span class="hljs-comment">//1天前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-7-6 22:34&quot;</span>)); <span class="hljs-comment">//1月前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2020-7-6 22:34&quot;</span>)); <span class="hljs-comment">//1年前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString())); <span class="hljs-comment">//刚刚</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11Base64的加密与解码</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11Base64%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E7%A0%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11Base64%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js-Base64加密与解码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>加密后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Encode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> btoa(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(str)));<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js-Base64加密与解码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>解密后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Decode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-built_in">escape</span>(atob(str)));<br>&#125;<br><span class="hljs-built_in">console</span>.log(base64Encode(<span class="hljs-string">&quot;1&quot;</span>)); <span class="hljs-comment">// MQ==</span><br><span class="hljs-built_in">console</span>.log(base64Decode(<span class="hljs-string">&quot;MQ==&quot;</span>)); <span class="hljs-comment">// 1</span><br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210807194318.png" alt="image-20210807194317688"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11数据集求交集</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B1%82%E4%BA%A4%E9%9B%86/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B1%82%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据集求交集</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 数组1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 数组2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回数组中相同的部分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intersection</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr1.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-comment">// 把重复值过滤出来，返回</span><br>        <span class="hljs-keyword">return</span> arr2.indexOf(n) != -<span class="hljs-number">1</span>; <span class="hljs-comment">// Arr2中查找是否有arr1的值</span><br>    &#125;);<br>&#125;<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(intersection(arr1, arr2)); <span class="hljs-comment">// [ 3, 4, 5 ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11是否支持transition</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81transition/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81transition/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检测某个是否支持transition属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">supportTransition</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>).style;<br>    <span class="hljs-built_in">console</span>.log(s);<br>    r = <span class="hljs-string">&#x27;transition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;WebkitTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;MozTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;msTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;OTransition&#x27;</span> <span class="hljs-keyword">in</span> s;<br>    s = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br>supportTransition();<br></code></pre></td></tr></table></figure><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210807180405.png" alt="image-20210807180352316" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11驼峰字符串转成下划线字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E9%A9%BC%E5%B3%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%88%90%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E9%A9%BC%E5%B3%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%88%90%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 驼峰字符串转成下划线字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 驼峰字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回下划线字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertCamelCase</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> str != <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;输入类型错误！&quot;</span>);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/[A-Z]/g</span>; <span class="hljs-comment">//正则</span><br>    <span class="hljs-keyword">return</span> str.replace(pattern, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, index</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (index != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;_&#x27;</span> + match.toLowerCase();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> match.toLowerCase();<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.log(convertCamelCase(<span class="hljs-string">&quot;HelloWorld&quot;</span>)); <span class="hljs-comment">// hello_world</span><br><span class="hljs-built_in">console</span>.log(convertCamelCase(<span class="hljs-string">&quot;1&quot;</span>)); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11对象转成地址栏参数形式</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *对象转换成地址栏的参数形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>obj 对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encodeFormData</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!obj) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 空对象直接返回</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> res = []; <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> name <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">if</span> (!obj.hasOwnProperty(name)) &#123; <span class="hljs-comment">//hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[name] == <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 忽略function，function没有toString方法</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> value = obj[name].toString();<br>        name = <span class="hljs-built_in">encodeURIComponent</span>(name.replace(<span class="hljs-string">&#x27;%20&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>)); <span class="hljs-comment">// 替换特殊字符 encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</span><br>        value = <span class="hljs-built_in">encodeURIComponent</span>(value.replace(<span class="hljs-string">&#x27;%20&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>));<br>        res.push(name + <span class="hljs-string">&#x27;=&#x27;</span> + value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.join(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// let obj = &#123; &#x27;id&#x27;: 1, &#x27;function&#x27;: &#x27;test&#x27; &#125;; // id=1&amp;name=test</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123; &#125;;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;name&#x27;</span>: f &#125;; <span class="hljs-comment">// id=1</span><br><span class="hljs-built_in">console</span>.log(encodeFormData(obj));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11XXS转义</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11XXS%E8%BD%AC%E4%B9%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11XXS%E8%BD%AC%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * XXS转义</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>markup 传入的字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回转义后的字符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceXss</span>(<span class="hljs-params">markup</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> regList = &#123;<br>        <span class="hljs-string">&quot;&amp;&quot;</span>: <span class="hljs-string">&quot;&amp;amp;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;&quot;</span>: <span class="hljs-string">&quot;&amp;lt;&quot;</span>,<br>        <span class="hljs-string">&quot;&gt;&quot;</span>: <span class="hljs-string">&quot;&amp;gt;&quot;</span>,<br>        <span class="hljs-string">&#x27;&quot;&#x27;</span>: <span class="hljs-string">&quot;&amp;#34;&quot;</span>,<br>        <span class="hljs-string">&quot;&#x27;&quot;</span>: <span class="hljs-string">&quot;&amp;#39;&quot;</span><br>    &#125;;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[&amp;&lt;&gt;&quot;&#x27;]/g</span>;  <span class="hljs-comment">// 正则表达式</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode_char</span>(<span class="hljs-params">c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> regList[c] || c;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> markup == <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-built_in">String</span>(markup).replace(reg, encode_char);<br>&#125;<br><span class="hljs-built_in">console</span>.log(replaceXss(<span class="hljs-string">&quot;&lt;&gt;&quot;</span>)); <span class="hljs-comment">//&amp;lt;&amp;gt;</span><br><span class="hljs-built_in">console</span>.log(replaceXss(<span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">//a</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-10生成指定范围内的随机数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-10%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-10%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成指定范围内的随机数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>minMum 最小值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>maxMum 最大值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>status // status= true表示生成整数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回生成的随机数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">minMum, maxMum, status = <span class="hljs-literal">true</span></span>) </span>&#123; <br>    <span class="hljs-keyword">let</span> result;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">arguments</span>.length) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * minMum + <span class="hljs-number">1</span>), <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum), <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">if</span> (status) &#123;<br>                result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum), <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = <span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            result = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">4</span>)); <span class="hljs-comment">// 2 </span><br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)); <span class="hljs-comment">// 8</span><br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-literal">false</span>)); <span class="hljs-comment">// 44.126143462613115</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-流体布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.left</span>,</span><br><span class="css">        <span class="hljs-selector-class">.right</span>,</span><br><span class="css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">220px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">220px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>#main<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804132231.png" alt="image-20210804132230922"></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-双飞翼布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804132256.png" alt="image-20210804132255440"></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-圣杯布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、大体布局"><a href="#一、大体布局" class="headerlink" title="一、大体布局"></a>一、大体布局</h2><p>设置大体布局模式头部和脚部，中间区域全部float:left,中间center设置width:100%,沾满屏幕</p><p>为了保证中间区域优先显示，所以将 id 为center的div优先放到前边，优先加载</p><p>其中 container 容器中 包裹着 center 、 left 、right 容器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113009.png" alt="image-20210804113001570"></p><h2 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span>,<br><span class="hljs-selector-id">#footer</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113137.png" alt="image-20210804113136448"></p><h2 id="三、利用margin负值"><a href="#三、利用margin负值" class="headerlink" title="三、利用margin负值"></a>三、利用margin负值</h2><p>利用margin将左右盒子重新布局到对应位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-id">#right</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: wheat;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113337.png" alt="image-20210804113336253"></p><h2 id="三、设置padding"><a href="#三、设置padding" class="headerlink" title="三、设置padding"></a>三、设置padding</h2><p>现在左右两边占据了中间的内容，我们给容器设置padding值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">padding</span>:  <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804114115.png" alt="image-20210804114114376"></p><h2 id="四、设置定位"><a href="#四、设置定位" class="headerlink" title="四、设置定位"></a>四、设置定位</h2><p>在设置了padding，左右元素都被挤了进来，我们设置相对定位来解决</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.column</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">left</span>:-<span class="hljs-number">200px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#right</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: wheat;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">right</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">right</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804114754.png" alt="image-20210804114753381"></p><h2 id="六、对浮动的理解"><a href="#六、对浮动的理解" class="headerlink" title="六、对浮动的理解"></a>六、对浮动的理解</h2><p>在了解什么是浮动之前我们先了解一下html元素在普通流排列方式。在普通流中，元素是按照它在 HTML 中的出现的先后顺序自上而下依次排列布局的，在排列过程中所有的行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为一整行。如果没有特殊样式指定，所有元素默认都是按照普通流方式排列布局，即普通流中元素的位置由该元素在 HTML 文档中的位置决定的。</p><p>浮动使元素脱离文档普通流，漂浮在普通流之上的。浮动元素依然按照其在普通流的位置上出现，然后尽可能的根据设置的浮动方向向左或者向右浮动，直到浮动元素的外边缘遇到包含框或者另一个浮动元素为止，且允许文本和内联元素环绕它。浮动会产生块级框（相当于设置了display:block），而不管该元素本身是什么。<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115840.png" alt="img"></p><p>就如上图的显示的div1，div2，div3就是按照普通流排列布局方式呈现的，而后面的div4，div5，div6中的div5的布局方式就不一样了，因为我给div5设置了向左浮动。此时div5脱离普通流，漂浮在普通流之上，所以导致原来div5在普通流中的位置空了出来，div6自动补上去（普通流（div6）表现的和浮动元素不存在一样）。</p><h2 id="七、清除浮动"><a href="#七、清除浮动" class="headerlink" title="七、清除浮动"></a>七、清除浮动</h2><p>浮动导致元素已不在普通流中，所以在排列布局的时候文档中的普通流表现的和浮动元素不存在一样，当浮动元素的高度超出包含框的时候，会出现包含框不会自动撑高来包裹浮动元素，即所谓的“高度塌陷”。如下图所示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115823.png" alt="img"></p><h2 id="八、清除浮动的方式"><a href="#八、清除浮动的方式" class="headerlink" title="八、清除浮动的方式"></a>八、清除浮动的方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>给父容器添加after伪类和zoom样式（推荐使用）可以写成公共样式，zoom兼容IE</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;&#125;<br><span class="hljs-selector-class">.clearfix</span>&#123;zoom: <span class="hljs-number">1</span>;&#125;<br><span class="hljs-selector-class">.clearfix</span>:after&#123;content: <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-attribute">display</span>: block;<span class="hljs-attribute">clear</span>: both;<span class="hljs-attribute">visibility</span>:hidden;<span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot; class=&quot;clearfix&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>给父元素添加样式overflow: hidden;或者overflow: auto;(不推荐该用法，使用hidden时当内容较多时会被遮挡，使用auto时内容较多会出现滚动条。构建块格式化上下（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container1</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">overflow</span>: hidden;&#125;<br><span class="hljs-selector-id">#container2</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">overflow</span>: auto;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container1&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container2&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>添加空标签，并设置clear:both的样式（不推荐使用，可能会增加很多空标签，代码冗余）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br><span class="hljs-selector-class">.clearfix</span>&#123;<span class="hljs-attribute">clear</span>: both;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;clearfix&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p>给父容器设置高度 （不推荐，当浮动元素和设置的容器高度不一样时会出现问题，适合固定高度布局时使用）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="方式五"><a href="#方式五" class="headerlink" title="方式五"></a>方式五</h3><p>让父元素一起浮动（不推荐，可能会影响父元素的兄弟元素和其父元素的排列布局）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="方式六"><a href="#方式六" class="headerlink" title="方式六"></a>方式六</h3><p>给父元素设置display:table或者display:inline-block(构建块格式化上下文（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container1</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">display</span>:table;&#125;<br><span class="hljs-selector-id">#container2</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">display</span>:inline-block;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container1&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container2&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.csdn.net/u013356907/article/details/82778480">https://blog.csdn.net/u013356907/article/details/82778480</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取day天后的秒数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96day%E5%A4%A9%E5%90%8E%E7%9A%84%E7%A7%92%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96day%E5%A4%A9%E5%90%8E%E7%9A%84%E7%A7%92%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取day天后的秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>days 天数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>day天后的秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSurplusSeconds</span>(<span class="hljs-params">days</span>) </span>&#123;<br>    days = days || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> str1 = d.getTime();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(str1).toString());<span class="hljs-comment">// Tue Aug 03 2021 22:08:10 GMT+0800 (中国标准时间)</span><br>    d.setHours(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>);<br>    <span class="hljs-keyword">var</span> str2 = d.getTime();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(str2).toString());<span class="hljs-comment">// Tue Aug 03 2021 23:59:59 GMT+0800 (中国标准时间)</span><br>    <span class="hljs-keyword">return</span> (str2 - str1) / <span class="hljs-number">1000</span> + days * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<span class="hljs-comment">//  (str2 - str1) / 1000 当前时间的秒数</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(getSurplusSeconds(<span class="hljs-number">2</span>)); <span class="hljs-comment">//179349</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取前num天的日期</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%89%8Dnum%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%89%8Dnum%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取前num天的日期</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 获取前num天</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>order  order= true  从大到小 order = false 从小到大</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumToday</span>(<span class="hljs-params">num, order = <span class="hljs-literal">false</span></span>) </span>&#123;<br>    num = <span class="hljs-built_in">Math</span>.ceil(num);<span class="hljs-comment">// num向上取整</span><br>    <span class="hljs-keyword">let</span> arr_date = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - (i * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">let</span> month = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date).getMonth() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">let</span> day = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date).getDate();<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-string">`<span class="hljs-subst">$&#123;month.toString().length &lt; <span class="hljs-number">2</span> ? <span class="hljs-string">`0<span class="hljs-subst">$&#123;month&#125;</span>`</span> : month&#125;</span> - <span class="hljs-subst">$&#123;day.toString().length &lt; <span class="hljs-number">2</span> ? <span class="hljs-string">`0<span class="hljs-subst">$&#123;day&#125;</span>`</span> : day&#125;</span>`</span>;<br>        <span class="hljs-keyword">if</span> (order) &#123; <span class="hljs-comment">// 从大到小</span><br>            arr_date.push(result);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arr_date.unshift(result);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr_date;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getNumToday(<span class="hljs-number">7</span>, <span class="hljs-literal">false</span>));<span class="hljs-comment">// [&#x27;07 - 28&#x27;,&#x27;07 - 29&#x27;,&#x27;07 - 30&#x27;,&#x27;07 - 31&#x27;,&#x27;08 - 01&#x27;,&#x27;08 - 02&#x27;,&#x27;08 - 03&#x27;]</span><br><span class="hljs-built_in">console</span>.log(getNumToday(<span class="hljs-number">7</span>, <span class="hljs-literal">true</span>));<span class="hljs-comment">// [&#x27;08 - 03&#x27;,&#x27;08 - 02&#x27;,&#x27;08 - 01&#x27;,&#x27;07 - 31&#x27;,&#x27;07 - 30&#x27;,&#x27;07 - 29&#x27;,&#x27;07 - 28&#x27; ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取当前时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回当前时间的格式化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentDate</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> year = date.getFullYear();<br>    <span class="hljs-keyword">let</span> month = date.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = add_zero(date.getDate());<br>    <span class="hljs-keyword">let</span> hour = add_zero(date.getHours());<br>    <span class="hljs-keyword">let</span> minutes = add_zero(date.getMinutes());<br>    <span class="hljs-keyword">let</span> second = add_zero(date.getSeconds());<br>    <span class="hljs-keyword">let</span> str = year + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + day + <span class="hljs-string">&#x27; &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + second;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_zero</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num = num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + num : num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getCurrentDate()); <span class="hljs-comment">//2021-8-03 21:28:44</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09替换非法字符</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E6%9B%BF%E6%8D%A2%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E6%9B%BF%E6%8D%A2%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 替换非法字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>替换值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">URLencode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">escape</span>(str).replace(<span class="hljs-regexp">/\+/g</span>, <span class="hljs-string">&#x27;%2B&#x27;</span>).replace(<span class="hljs-regexp">/\&quot;/g</span>, <span class="hljs-string">&#x27;%22&#x27;</span>).replace(<span class="hljs-regexp">/\&#x27;g/</span>, <span class="hljs-string">&#x27;%27&#x27;</span>).replace(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;%2F&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;212+113&quot;</span>));<span class="hljs-comment">//212%2B113</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;=&quot;</span>));<span class="hljs-comment">//%3D</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;&#x27;&quot;</span>)); <span class="hljs-comment">// %27</span><br><br></code></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.blogjava.net/juhongtao/archive/2007/12/19/168639.html">request.getParameter(“变量名”)获取的字符串中原来的加号变成了空格，url传值</a></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断手机类型</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS手机类型判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type <span class="hljs-type">&#123;&#123;userAgent: string, isAndroid: boolean, isIphone: boolean, isIpad: boolean, isWeixin: boolean, isChrome: boolean&#125;</span></span>&#125;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">var</span> BrowserInfo = &#123;<br>    <span class="hljs-attr">userAgent</span>: navigator.userAgent.toLowerCase(),<br>    <span class="hljs-attr">isAndroid</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/android/ig</span>)),<br>    <span class="hljs-attr">isIphone</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/iphone|ipod/ig</span>)),<br>    <span class="hljs-attr">isIpad</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/ipad/ig</span>)),<br>    <span class="hljs-attr">isWeixin</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/MicroMessenger/ig</span>)),<br>    <span class="hljs-attr">isChrome</span>:<span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/chrome/ig</span>)),<br>&#125;<br>BrowserInfo;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803210400.png" alt="image-20210803210359273"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断浏览器</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>浏览器的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOs</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 8.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE8&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 6.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE6&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 7.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE7&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;Firefox&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Firefox&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;Chrome&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chrome&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Other&quot;</span>;<br>    &#125;<br>&#125;<br>getOs();<br></code></pre></td></tr></table></figure><p> Chrome浏览器：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205112.png" alt="image-20210803205104582"></p><p>navigator.userAgent获取浏览器信息(类型及系统)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205700.png" alt="image-20210803205659555"></p><p>Microsoft Edge浏览器：微软开发的，简称ME浏览器</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205616.png" alt="image-20210803205357906"></p><p>navigator.userAgent获取浏览器信息(类型及系统)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205611.png" alt="image-20210803205610022"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09将数字转换成可以指定小数位数的字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数字转成可以指定小数位数的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numberToString</span>(<span class="hljs-params">data, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dataLen = <span class="hljs-keyword">typeof</span> len == <span class="hljs-literal">undefined</span> ? <span class="hljs-number">0</span> : len; <span class="hljs-comment">// 如果没有指定长度</span><br>    <span class="hljs-keyword">let</span> res = data + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 数字字符串化</span><br>    <span class="hljs-keyword">if</span> (res.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        res = <span class="hljs-built_in">Number</span>(res).toFixed(dataLen); <span class="hljs-comment">// 指定小数位数</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> intData = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 整数部分</span><br>        <span class="hljs-keyword">let</span> decimalData = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 小数部分</span><br>        intData = res.substring(<span class="hljs-number">0</span>, res.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>)); <span class="hljs-comment">// 整数部分</span><br>        decimalData = <span class="hljs-regexp">/\.\d+/</span>.exec(res); <span class="hljs-comment">//小数部分</span><br>        decimalData = <span class="hljs-built_in">Number</span>(decimalData);<br>        decimalData = decimalData.toPrecision(dataLen).substr(<span class="hljs-number">0</span>, dataLen + <span class="hljs-number">2</span>); <span class="hljs-comment">//会导致四舍五入</span><br>        res = intData + decimalData.substr(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.00</span><br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123.456</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.46</span><br><span class="hljs-built_in">console</span>.log( numberToString(<span class="hljs-number">123.356777</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">//123.3567770</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数字转成可以指定小数位数的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numberToString</span>(<span class="hljs-params">data, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dataLen = <span class="hljs-keyword">typeof</span> len == <span class="hljs-literal">undefined</span> ? <span class="hljs-number">0</span> : len; <span class="hljs-comment">// 如果没有指定长度</span><br>    <span class="hljs-keyword">let</span> res = data + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 数字字符串化</span><br>    res = <span class="hljs-built_in">Number</span>(res).toFixed(len);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.00</span><br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123.456</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.46</span><br><span class="hljs-built_in">console</span>.log( numberToString(<span class="hljs-number">123.356777</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">//123.3567770</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组</li><li>toPrecision() 方法以指定的精度返回该数值对象的字符串表示，四舍五入到 precision 参数指定的显示数字位数。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断是否是网址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkURL</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> strRegex = <span class="hljs-string">&quot;^((https|http|ftp|rtsp|mms)?://)&quot;</span><br>        + <span class="hljs-string">&quot;?(([0-9a-z_!~*&#x27;().&amp;=+$%-]+: )?[0-9a-z_!~*&#x27;().&amp;=+$%-]+@)?&quot;</span> <span class="hljs-comment">//ftp的user@</span><br>        + <span class="hljs-string">&quot;(([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> <span class="hljs-comment">// IP形式的URL- 199.194.52.184</span><br>        + <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-comment">// 允许IP和DOMAIN（域名）</span><br>        + <span class="hljs-string">&quot;([0-9a-z_!~*&#x27;()-]+\.)*&quot;</span> <span class="hljs-comment">// 域名- www.</span><br>        + <span class="hljs-string">&quot;([0-9a-z][0-9a-z-]&#123;0,61&#125;)?[0-9a-z]\.&quot;</span> <span class="hljs-comment">// 二级域名</span><br>        + <span class="hljs-string">&quot;[a-z]&#123;2,6&#125;)&quot;</span> <span class="hljs-comment">// first level domain- .com or .museum</span><br>        + <span class="hljs-string">&quot;(:[0-9]&#123;1,4&#125;)?&quot;</span> <span class="hljs-comment">// 端口- :80</span><br>        + <span class="hljs-string">&quot;((/?)|&quot;</span> <span class="hljs-comment">// a slash isn&#x27;t required if there is no file name</span><br>        + <span class="hljs-string">&quot;(/[0-9a-z_!~*&#x27;().;?:@&amp;=+$,%#-]+)+/?)$&quot;</span>;<br>    <span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(strRegex);<br>    <span class="hljs-keyword">if</span> (re.test(str)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkURL(<span class="hljs-string">&quot;666://www.baidu.com&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkURL(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否包含特殊字符</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断一串字符串是否有特殊字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkQuote</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> items = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>);<br>    items.push(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&lt;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&quot;||&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>);<br>    items.push(<span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;insert&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;drop&quot;</span>, <span class="hljs-string">&quot;alter&quot;</span>, <span class="hljs-string">&quot;trancate&quot;</span>);<br>    str = str.toLowerCase();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str.indexOf(items[i]) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkQuote(<span class="hljs-string">&quot;dwbdwdw&quot;</span>));<br><span class="hljs-built_in">console</span>.log(checkQuote(<span class="hljs-string">&quot;dwbdwdw~&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否是小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E6%98%AF%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E6%98%AF%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一串字符串是否是小数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkDecimal</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/^-?\d+(\.\d+)?$/g</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;1231.310391&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;-1231.310391&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;1231.310391a&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li> ? 匹配0次或者一次</li><li>+匹配一次或者多次</li><li>*匹配零次或者多次</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为英文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E8%8B%B1%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一串字符是否全是英文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEnglish</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">let</span> strTemp = str.charAt(i);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/[a-zA-Z]/</span>.test(strTemp)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isEnglish(<span class="hljs-string">&quot;abcdclkd&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(isEnglish(<span class="hljs-string">&quot;abcdclkd212&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字英文空格半角</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E7%A9%BA%E6%A0%BC%E5%8D%8A%E8%A7%92/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E7%A9%BA%E6%A0%BC%E5%8D%8A%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS检查输入的一串字符是否全部是数字或者英文或半角-或者空格</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 测试字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnNumDashOrSpace</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">let</span> strTemp = str.charAt(i);<br>        <span class="hljs-keyword">if</span> (strTemp == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(<span class="hljs-regexp">/[A-Za-z0-9-]/</span>.test(strTemp)))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkEnNumDashOrSpace(<span class="hljs-string">&quot;sdad11123 -&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkEnNumDashOrSpace(<span class="hljs-string">&quot;sdad11123 -!&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字或者英文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E8%8B%B1%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检查输入的一串字符是否全部是数字或者英文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnNum</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法一：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// return !(str.match(/^[0-9a-zA-Z]+$/) == null);</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法二：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[A-Za-z0-9]/</span>.test(str.charAt(i))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;dasdasdas&quot;</span>;<br><span class="hljs-built_in">console</span>.log(checkEnNum(str)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检查输入的一串字符是否全部是数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNum</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.match(<span class="hljs-regexp">/\D/</span>) == <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;21315，．：&quot;;//false</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;489641&quot;</span> <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkNum(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>\D匹配一个非数字字符</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证全角</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%85%A8%E8%A7%92/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%85%A8%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证全角</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str  字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkHasFull</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str.charCodeAt(i) &gt; <span class="hljs-number">65281</span> &amp;&amp; str.charCodeAt(i) &lt; <span class="hljs-number">65374</span> || str.charCodeAt(i) == <span class="hljs-number">12288</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkHasFull(<span class="hljs-string">&quot;AaBb1234@#%&amp;；，．：&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkHasFull(<span class="hljs-string">&quot;AaBb1234@#%&amp;;,.:&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>半角字符的范围：33 (0x21) ~ 126 (0x7E)</li><li>全角字符的范围：65281 (0xFF01) ~ 65374 (0xFF5E)</li><li>unicode为12288字符为全角空格(&amp;#12288)</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证正整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E6%AD%A3%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E6%AD%A3%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证正整数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>number  数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNumber</span>(<span class="hljs-params">number</span>)</span>&#123;<br>    <span class="hljs-comment">// return /^[1-9]\d*$/.test(number);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\d+$/</span>.test(number);<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkNumber(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkNumber(-<span class="hljs-number">1</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>+匹配1次或者多次</li><li>*匹配0次或者多次</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证邮政编码</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E9%82%AE%E6%94%BF%E7%BC%96%E7%A0%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E9%82%AE%E6%94%BF%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证邮政编码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 邮政编码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPostCode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/^[1-9][0-9]&#123;5&#125;$/</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// let str = &quot;423000&quot;; // true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;029000&quot;</span>; <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkPostCode(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>test()和match()方法的区别：</p><ul><li>test():是RegExp的方法，参数是字符串，返回值是布尔类型</li><li>match():是string的方法，参数是正则表达式，返回值是数组</li><li>test():用于检测一个字符串是否匹配某个模式</li><li>match():在字符串内检索指定的值，或者找到一个或者多个正则表达式的匹配</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证密码只能是数字和字母组合</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E5%8F%AA%E8%83%BD%E6%98%AF%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E5%8F%AA%E8%83%BD%E6%98%AF%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证密码必须是字母和数字的组合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>password  密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPasswordValidate</span>(<span class="hljs-params">password</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^(?!^\d+$)(?!^[a-zA-Z]+$)[0-9a-zA-Z]&#123;6,20&#125;$/</span>.test(password);<br>&#125;<br><span class="hljs-comment">// let password = &quot;kjj123&quot;; // true</span><br><span class="hljs-comment">// let password = &quot;kjj&quot;; // false</span><br><span class="hljs-keyword">let</span> password = <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkPasswordValidate(password));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>(?!正则):表示在这个位置之后不能出现这个正则</li><li>^(?!^\d+$)<br>表示字符串不能完全由数字组成，即必须包含其他字符</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证用户名</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E5%90%8D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS检查用户名是否满足要求，只能是英文或英文数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>loginName 登录名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkLoginName</span>(<span class="hljs-params">loginName</span>) </span>&#123;<br>    <span class="hljs-comment">// (^\d*$)全是数字的情况 (^\S+\s+\S+$) 用户名中间全是空白字符 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[A-Za-z0-9]*$/</span>.test(loginName) &amp;&amp; !<span class="hljs-regexp">/(^\d*$)|(^\S+\s+\S+$)/</span>.test(loginName);<br>&#125;<br><span class="hljs-comment">// let loginName = &quot;kjj&quot;; // true</span><br><span class="hljs-comment">// let loginName = &quot;kjj!&quot; // false</span><br><span class="hljs-comment">// let loginName = &quot;kjj123&quot; // true</span><br><span class="hljs-comment">// let loginName = &quot;kjj    &quot;; // false</span><br><span class="hljs-comment">// let loginName = &quot;123&quot;;// false</span><br><span class="hljs-comment">// let loginName = &quot;   &quot; // false</span><br><span class="hljs-keyword">let</span> loginName = <span class="hljs-string">&quot;kjj    kjj&quot;</span> <span class="hljs-comment">// false </span><br><span class="hljs-built_in">console</span>.log(checkLoginName(loginName));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>(^\d*$) </li><li>^表示以…开始，\d表示数字 * 表示匹配0次或者多次 $表示…结束</li><li>^用在[] 表示非的意思，反面的意思 表示不接受该方括号表达式中的字符集合</li><li>所以正则的意思是：多位数字</li><li>\s匹配任何空白字符。</li><li>\S匹配任何非空白字符。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证银行卡号</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * luhn算法验证银行卡号(操作奇数位)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>bankno 银行卡号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bankCardCheck</span>(<span class="hljs-params">bankno</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> lastNum = bankno.substr(bankno.length - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//取出校验位</span><br>    <span class="hljs-keyword">let</span> firstNum = bankno.substr(<span class="hljs-number">0</span>, bankno.length - <span class="hljs-number">1</span>); <span class="hljs-comment">// 前15位</span><br>    <span class="hljs-keyword">let</span> newArr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">//倒序的数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = firstNum.length - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>        newArr.push(firstNum.substr(i, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">let</span> arrJiShu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">// 奇数位*2 &lt;9</span><br>    <span class="hljs-keyword">let</span> arrJiShu2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">// 奇数位*2 &gt;9</span><br>    <span class="hljs-keyword">let</span> arrOuShu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 偶数位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newArr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//奇数位</span><br>            <span class="hljs-keyword">if</span> (newArr[i] * <span class="hljs-number">2</span> &lt; <span class="hljs-number">9</span>) &#123;<br>                arrJiShu.push(<span class="hljs-built_in">parseInt</span>(newArr[i]) * <span class="hljs-number">2</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                arrJiShu2.push(<span class="hljs-built_in">parseInt</span>(newArr[i]) * <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arrOuShu.push(newArr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> jishu_child1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 奇数位*2 &gt;9 d的个位数组</span><br>    <span class="hljs-keyword">let</span> jishu_child2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 奇数位*2 &gt;9 d的十位数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrJiShu2.length; i++) &#123;<br>        jishu_child1.push(<span class="hljs-built_in">parseInt</span>(arrJiShu2[i]) % <span class="hljs-number">10</span>);<br>        jishu_child2.push(<span class="hljs-built_in">parseInt</span>(arrJiShu2[i]) / <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">let</span> sum1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum4 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrOuShu.length; i++) &#123;<br>        sum1 += <span class="hljs-built_in">parseInt</span>(arrOuShu[i]); <span class="hljs-comment">// 偶数和</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrJiShu.length; i++) &#123;<br>        sum2 += <span class="hljs-built_in">parseInt</span>(arrJiShu[i]); <span class="hljs-comment">// 奇数*2&lt;9 之和</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; jishu_child1.length; i++) &#123;<br>        sum3 += <span class="hljs-built_in">parseInt</span>(jishu_child1[i]); <span class="hljs-comment">//个位和</span><br>        sum4 += <span class="hljs-built_in">parseInt</span>(jishu_child2[i]); <span class="hljs-comment">// 十位和</span><br>    &#125;<br>    total = sum1 + sum2 + sum3 + sum4;<br>    <span class="hljs-comment">// let k = total % 10 == 0 ? 10 : parseInt(total) % 10;</span><br>    <span class="hljs-comment">// let luhn = 10 - k;</span><br>    <span class="hljs-comment">// if (lastNum == luhn &amp;&amp; lastNum.length != 0) &#123;</span><br>    <span class="hljs-comment">//     return true;</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//     return false;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span> ((total + <span class="hljs-built_in">parseInt</span>(lastNum)) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// let bankno = &quot;5432123456788881&quot;; // true 69</span><br><span class="hljs-comment">// let bankno = &quot;6225365271562822&quot; // true</span><br><span class="hljs-keyword">let</span> bankno = <span class="hljs-string">&quot;622536527156283&quot;</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-built_in">console</span>.log(bankCardCheck(bankno)); <br><br><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li><p>Luhn 算法或是Luhn 公式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">luhn算法特点为：<br><span class="hljs-number">1</span>、反方向排列后，从右往左，隔位乘以<span class="hljs-number">2</span>；<br><span class="hljs-number">2</span>、清理两位数字 ： 如果乘以 <span class="hljs-number">2</span> 得到的数字是两位，即大于等于<span class="hljs-number">10</span>， 就把这两位相加得到一位数字；<br><span class="hljs-number">3</span>、相加模 <span class="hljs-number">10</span>： 把步骤<span class="hljs-number">2</span> 得到的各位数字相加， 以 <span class="hljs-number">10</span> 取模后，用 <span class="hljs-number">10</span> 相减即得到校验数字。<br></code></pre></td></tr></table></figure></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证一串字符是否是小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化的手机号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phoneToStar</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-comment">// return str.replace(/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/,&quot;$1****$2&quot;);    // $1就是第一个() 188 $2就是第二个() 9948 没有$3 </span><br>     <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/(\d&#123;3&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)/</span>,<span class="hljs-string">&quot;$1****$3&quot;</span>); <span class="hljs-comment">// $1就是第一个() 188 $2就是第二个() 3100 $3就是第三个() 9948</span><br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;18831009948&quot;</span>;<br><span class="hljs-built_in">console</span>.log(phoneToStar(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>正则表达式中的括号即可用于分组，同时也用于定义子模式串</li><li>在replace()方法中，参数二中可以使用$n(n为数字)来依次引用模式串中用括号定义的字串。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证邮箱</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证邮箱格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入的邮箱</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmail</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> emailReg = <span class="hljs-regexp">/^([a-z0-9A-Z]+[-|\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-z0-9A-Z]&#123;2,&#125;$/</span>;<br>    <span class="hljs-keyword">return</span> emailReg.test(str);<br>&#125;<br><span class="hljs-comment">// let str = &quot;11090@qq.com&quot;; //true</span><br><span class="hljs-comment">// let str = &quot;hjkjhk@645654.2121-6878.com.wcn&quot; //true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hjkjhk@645654.2121_6878.com.wcn&quot;</span> <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(isEmail(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>? 表示匹配前面的字表达式零次或者一次，是非贪婪模式的，尽可能少的匹配所搜索的字符串</li><li>邮箱的格式规定</li><li>@之前必须有内容且只能是字母（大小写）、数字、下划线(_)、减号（-）、点（.）</li><li>@和最后一个点（.）之间必须有内容且只能是字母（大小写）、数字、点（.）、减号（-），且两个点不能挨着</li><li> 最后一个点（.）之后必须有内容且内容只能是字母（大小写）、数字且长度为大于等于2个字节，小于等于6个字节</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07切割相应小数点后位数，并将小数点后多余的0清空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%87%E5%89%B2%E7%9B%B8%E5%BA%94%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%BD%8D%E6%95%B0%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E5%A4%9A%E4%BD%99%E7%9A%840%E6%B8%85%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%87%E5%89%B2%E7%9B%B8%E5%BA%94%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%BD%8D%E6%95%B0%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E5%A4%9A%E4%BD%99%E7%9A%840%E6%B8%85%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 切割相应小数点后位数并将小数点后多余的0清空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 带小数的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回制定的小数位数，且自动去除多余的0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutRoundNum</span>(<span class="hljs-params">num, len</span>) </span>&#123;<br>    num = num.toString(); <span class="hljs-comment">// 将数字转成字符串 自动去零 2.333</span><br>    num = num.substr(<span class="hljs-number">0</span>, num.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>) + num.substr(num.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>, len);<br>    <span class="hljs-keyword">let</span> regx = num.match(<span class="hljs-regexp">/\d+\.\d+/g</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> regx) &#123;<br>        num = num.replace(regx[index], <span class="hljs-built_in">parseFloat</span>(regx[index]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(cutRoundNum(<span class="hljs-number">2.333000</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">// 2.333</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07四舍五入指定位数的小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 四舍五入指定位数的小数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num  数值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 保留位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回四舍五入后指定的小数位数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRound</span>(<span class="hljs-params">num, len</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.round(num * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, len)) / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, len);<br>&#125;<br><span class="hljs-built_in">console</span>.log(getRound(<span class="hljs-number">6.123456</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">//6.1235</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07判断字符串是否为空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断字符串是否为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str  字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkIsEmpty</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str !== <span class="hljs-literal">null</span> &amp;&amp; str !== <span class="hljs-literal">undefined</span> &amp;&amp; str !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;你好&quot;; // false</span><br><span class="hljs-comment">// let str = &quot;&quot;; // true</span><br><span class="hljs-comment">// let str = undefined; // true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-literal">null</span>; <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIsEmpty(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>字符串为空的3种状态：undefined、null、””</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07只可以整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;clearNoInt(this)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearNoInt</span>(<span class="hljs-params">curObj</span>) </span>&#123;</span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/[^\d]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 清除不是数字以外的所有字符</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07只可以输入小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;clearNoFloat(this)&quot;</span>&gt;</span> // JS允许输入小数位，如果是其他字符，则会替换掉<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearNoFloat</span>(<span class="hljs-params">curObj</span>) </span>&#123;</span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/[^\d.]/g</span>, <span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//清除“数字”和“.”以外的字符</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/^\./g</span>, <span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//验证第一个字符是数字而不是.</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/\.&#123;2,&#125;/g</span>, <span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">//只保留第一个. 清除多余的.</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;$#$&quot;</span>).replace(<span class="hljs-regexp">/\./g</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;$#$&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>replace第一个参数为一个字符串时, 它其实做的是文本替换, 所以这里的’$#$’和正则表达式无关, 所以第一次replace只是把字符.替换成’$#$’, 看到后面的代码(第三次<code>replace</code>)又把它转换回来, 可以推测目的只是为了把’.’转换成一个比较特殊的字符防止被第二个正则替换给替换掉</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07现金转大写</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E7%8E%B0%E9%87%91%E8%BD%AC%E5%A4%A7%E5%86%99/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E7%8E%B0%E9%87%91%E8%BD%AC%E5%A4%A7%E5%86%99/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 现金转大写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>n  现金</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digitUppercase</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> fraction = [<span class="hljs-string">&#x27;角&#x27;</span>, <span class="hljs-string">&#x27;分&#x27;</span>];<br>    <span class="hljs-keyword">let</span> digit = [<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;壹&#x27;</span>, <span class="hljs-string">&#x27;贰&#x27;</span>, <span class="hljs-string">&#x27;叁&#x27;</span>, <span class="hljs-string">&#x27;肆&#x27;</span>, <span class="hljs-string">&#x27;伍&#x27;</span>, <span class="hljs-string">&#x27;陆&#x27;</span>, <span class="hljs-string">&#x27;柒&#x27;</span>, <span class="hljs-string">&#x27;捌&#x27;</span>, <span class="hljs-string">&#x27;玖&#x27;</span>];<br>    <span class="hljs-keyword">let</span> unit = [[<span class="hljs-string">&#x27;元&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span>], [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;拾&#x27;</span>, <span class="hljs-string">&#x27;佰&#x27;</span>, <span class="hljs-string">&#x27;仟&#x27;</span>]];<br>    <span class="hljs-keyword">let</span> head = n &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;欠&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// n&lt;0</span><br>    n = <span class="hljs-built_in">Math</span>.abs(n); <span class="hljs-comment">// n保证整数</span><br>    <span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 结果字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fraction.length; i++) &#123; <span class="hljs-comment">// 先处理小数位的角、分</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)));<br>        <span class="hljs-built_in">console</span>.log(digit[<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>] + fraction[i]);<br>        s += (digit[<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>] + fraction[i]).replace(<span class="hljs-regexp">/零./</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 去掉&#x27;零角这样的字&#x27; .匹配任何单个字符 </span><br>    &#125;<br>    s = s || <span class="hljs-string">&#x27;整&#x27;</span>; <span class="hljs-comment">// 没有零头的情况</span><br>    n = <span class="hljs-built_in">Math</span>.floor(n) <span class="hljs-comment">// 去掉零头在处理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; unit[<span class="hljs-number">0</span>].length &amp;&amp; n &gt; <span class="hljs-number">0</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> p = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; unit[<span class="hljs-number">1</span>].length &amp;&amp; n &gt; <span class="hljs-number">0</span>; j++) &#123;<br>            p = digit[n % <span class="hljs-number">10</span>] + unit[<span class="hljs-number">1</span>][j] + p; <span class="hljs-comment">// 个 十 佰 千</span><br>            n = <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-number">10</span>); <span class="hljs-comment">// 去掉一位</span><br>        &#125;<br>        s = p.replace(<span class="hljs-regexp">/(零.)*零$/</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-regexp">/^$/</span>, <span class="hljs-string">&#x27;零&#x27;</span>) + unit[<span class="hljs-number">0</span>][i] + s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head + s.replace(<span class="hljs-regexp">/(零.)*零元/</span>, <span class="hljs-string">&#x27;元&#x27;</span>)<br>        .replace(<span class="hljs-regexp">/(零.)+/g</span>, <span class="hljs-string">&#x27;零&#x27;</span>)<br>        .replace(<span class="hljs-regexp">/^整$/</span>, <span class="hljs-string">&#x27;零元整&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(digitUppercase(<span class="hljs-number">10.06</span>)); <span class="hljs-comment">//壹拾元伍角陆分</span><br><span class="hljs-built_in">console</span>.log(digitUppercase(<span class="hljs-number">10</span>)); <span class="hljs-comment">//壹拾元整</span><br><span class="hljs-built_in">console</span>.log(digitUppercase(-<span class="hljs-number">10.06</span>)); <span class="hljs-comment">//欠壹拾元陆分</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>思路：先把零头计算出来，在去计算整数部分</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06获取地址栏的参数值</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%80%BC/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取地址栏的参数值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>url // 地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>name // 参数名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回值或者null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrlParam</span>(<span class="hljs-params">url, name</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>    <span class="hljs-comment">// var r = window.location.search.substr(1).match(reg); // 基于浏览器环境</span><br>    <span class="hljs-keyword">var</span> r = url.substr(<span class="hljs-number">7</span>).match(reg); <span class="hljs-comment">// 自动获取成？之后的内容 t1=1&amp;t2=2&amp;t3=3</span><br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]); <span class="hljs-comment">// 0是t1 1是= 2是值 unescape() 函数可对通过 escape() 编码的字符串进行解码。</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;a.html?t1=1&amp;t2=2&amp;t3=3&quot;</span>;<br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;t1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(getUrlParam(url, name));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>^匹配字符串开头,&amp;就是&amp;字符 (^|&amp;)匹配字符串开头或者&amp;字符,</li><li>加上name变量的内容,[^&amp;]再加上任意个不含&amp;的字符,(&amp;|$)以&amp;或字符串结尾</li><li>*表示可以重复0或N次</li><li>这个正则是寻找&amp;+url参数名字=值+&amp;  (&amp;可以不存在)</li><li>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li><li>test() 方法用于检测一个字符串是否匹配某个模式</li><li> location是包含了相关的url的信息，它是windown的一部分。</li><li>search是一个可以查询的属性，可以查询？之后的部分。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06判断是否是中文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%AD%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是中文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isChinese</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[\u4e00-\u9fa5]+$/i</span>;<br>    <span class="hljs-keyword">if</span> (reg.test(str)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isChinese(<span class="hljs-string">&#x27;孔&#x27;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isChinese(<span class="hljs-string">&#x27;kong&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>+:表示前面的子表达式至少一次</li><li>/i：表示不区分大小写</li><li>[\u4e00-\u9fa5]是汉字unicode编码的开始和结束</li></ul>          </div><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210731225155.png" alt="image-20210731225147501"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06时间个性化输出功能</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E6%97%B6%E9%97%B4%E4%B8%AA%E6%80%A7%E5%8C%96%E8%BE%93%E5%87%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E6%97%B6%E9%97%B4%E4%B8%AA%E6%80%A7%E5%8C%96%E8%BE%93%E5%87%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间个性化输出功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 传入时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回个性化的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeFormat</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time),<br>        curDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),<br>        year = date.getFullYear(),<br>        month = date.getMonth() + <span class="hljs-number">1</span>,<br>        day = date.getDate(),<br>        hour = date.getHours(),<br>        minute = date.getMinutes(),<br>        curYear = curDate.getFullYear(),<br>        curHour = curDate.getHours(),<br>        timeStr;<br>    <span class="hljs-keyword">let</span> M = minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minute : minute;<br>    <span class="hljs-keyword">if</span> (year &lt; curYear) &#123;<br>        timeStr = year + <span class="hljs-string">&#x27;年&#x27;</span> + month + <span class="hljs-string">&#x27;月&#x27;</span> + day + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> pastTime = curDate - date,<br>            pastH = pastTime / <span class="hljs-number">3600000</span>; <span class="hljs-comment">//60*60*1000</span><br>        <span class="hljs-built_in">console</span>.log(pastH);<br>        <span class="hljs-keyword">if</span> (pastH &gt; curHour) &#123;<br>            timeStr = month + <span class="hljs-string">&#x27;月&#x27;</span> + day + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pastH &gt;= <span class="hljs-number">1</span>) &#123;<br>            timeStr = <span class="hljs-string">&#x27;今天 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M + <span class="hljs-string">&#x27;分&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> pastM = curDate.getMinutes() - M;<br>            <span class="hljs-keyword">if</span> (pastM &gt; <span class="hljs-number">1</span>) &#123;<br>                timeStr = pastM + <span class="hljs-string">&#x27;分钟前&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                timeStr = <span class="hljs-string">&#x27;刚刚&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> timeStr;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())); <span class="hljs-comment">// 刚刚</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/31 16:05:00&#x27;</span>)); <span class="hljs-comment">// 今天 16:05分</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/30 16:10:00&#x27;</span>)); <span class="hljs-comment">// 7月30日 16:10</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2020/07/30 16:05:00&#x27;</span>)); <span class="hljs-comment">// 2020年7月30日 16:05</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/31 22:05:00&#x27;</span>)); <span class="hljs-comment">// 21分钟前</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>// 使用 - 为连接符，就会转换为GMT为基准，会被解析成ISO格式的字符串</p><p>// 使用 / 为连接符，是以本地时区为准</p><p>// 如果时间字符串中存在 - ，都转为 / 之后 new Date</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05日期格式化函数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日期格式化函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>format 改写Date的format函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化后的结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">Date</span>.prototype.format = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">format</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> o = &#123;<br>        <span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//month</span><br>        <span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-built_in">this</span>.getDate(),    <span class="hljs-comment">//day</span><br>        <span class="hljs-string">&quot;h+&quot;</span>: <span class="hljs-built_in">this</span>.getHours(),   <span class="hljs-comment">//hour</span><br>        <span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-built_in">this</span>.getMinutes(), <span class="hljs-comment">//minute</span><br>        <span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-built_in">this</span>.getSeconds(), <span class="hljs-comment">//second</span><br>        <span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-built_in">Math</span>.floor((<span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>),  <span class="hljs-comment">//quarter</span><br>        <span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-built_in">this</span>.getMilliseconds() <span class="hljs-comment">//millisecond</span><br>    &#125;;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.test(format)) &#123; <span class="hljs-comment">// + 匹配前面的子表达式一次或多次</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">RegExp</span>.$1) <span class="hljs-comment">// yyyy ,RegExp.$1指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">RegExp</span>.$1.length); <span class="hljs-comment">// 4</span><br>        format = format.replace(<span class="hljs-built_in">RegExp</span>.$1, (<span class="hljs-built_in">this</span>.getFullYear() + <span class="hljs-string">&quot;&quot;</span>).substr(<span class="hljs-number">4</span> - <span class="hljs-built_in">RegExp</span>.$1.length)); <span class="hljs-comment">//将yyyy用4位日期替换掉</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123; <span class="hljs-comment">// for-in遍历对象</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).test(format)) <span class="hljs-comment">//o[k]用中括号取值变量</span><br>            format = format.replace(<span class="hljs-built_in">RegExp</span>.$1, <span class="hljs-built_in">RegExp</span>.$1.length == <span class="hljs-number">1</span> ? o[k] : (<span class="hljs-string">&quot;00&quot;</span> + o[k]).substr((<span class="hljs-string">&quot;&quot;</span> + o[k]).length));<br>    &#125;<br>    <span class="hljs-keyword">return</span> format;<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().format(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss SS&quot;</span>)); <span class="hljs-comment">// 2021-07-30 15:22:27 257S</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 本道题涉及的知识点回顾</p><ul><li>创建日期的实例</li><li>正则 + 表示匹配前面的子表达式一次或者多次</li><li>RegExp.$1 与正则表达式匹配的第一个子匹配字符串</li><li>for-in 遍历对象</li><li>o[k]用中括号 进行变量取值</li></ul>          </div><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05生成随机时间戳</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成随机时间戳</span><br><span class="hljs-comment"> * 十三位时间毫秒值+3位随机数(0-10之间,不包括10)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uniqueId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).toString() + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(uniqueId());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05获取页面高度</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E9%AB%98%E5%BA%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E9%AB%98%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取页面的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回当前页面的高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPageHeight</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// document.compatMode用来判断当前浏览器采用的渲染方式。</span><br>    <span class="hljs-comment">// BackCompat：标准兼容模式关闭。浏览器客户区宽度是document.body.clientWidth；</span><br>    <span class="hljs-comment">// CSS1Compat：标准兼容模式开启。浏览器客户区宽度是 document.documentElement.clientWidth；</span><br>    <span class="hljs-keyword">let</span>  d = <span class="hljs-built_in">document</span>.compatMode == <span class="hljs-string">&quot;BackCompat&quot;</span> ? <span class="hljs-built_in">document</span>.body : <span class="hljs-built_in">document</span>.documentElement;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">document</span>.documentElement.scrollHeight, <span class="hljs-built_in">document</span>.body.scrollHeight, d.clientHeight);<br>&#125;<br><span class="hljs-built_in">console</span>.log(getPageHeight());<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730142338.png" alt="image-20210730142337653"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05判断是否是网址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>strUrl 输入的网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isURL</span>(<span class="hljs-params">strUrl</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> regular = <span class="hljs-regexp">/^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span>;<br>    <span class="hljs-keyword">if</span> (regular.test(strUrl)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// let strUrl = &quot;https://kjjblog.netlify.app/&quot;; // false</span><br><span class="hljs-keyword">let</span> strUrl = <span class="hljs-string">&quot;https://kjjblog.netlify.com/&quot;</span>; <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(isURL(strUrl));<br><span class="hljs-comment">// \b匹配单词的边界</span><br><span class="hljs-comment">// ? 匹配前面的子表达式零次或者一次</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05设置cookie和获取cookie</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%AE%BE%E7%BD%AEcookie%E5%92%8C%E8%8E%B7%E5%8F%96cookie/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%AE%BE%E7%BD%AEcookie%E5%92%8C%E8%8E%B7%E5%8F%96cookie/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置cookie的值(键，值，保存的时间)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>name cookie对应的Name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>value cookie对应的Value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>expiredays 设置过期时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expiredays</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> exdate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-built_in">console</span>.log(exdate); <span class="hljs-comment">// 2021-07-30T03:14:56.716Z 相差8小时，可以使用toString()或者toLocaleString()转换成本地时间</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(exdate)); <span class="hljs-comment">// 1627614896716</span><br>    exdate.setTime(<span class="hljs-built_in">Number</span>(exdate) + expiredays); <span class="hljs-comment">// 设置过期时间</span><br>    <span class="hljs-comment">//escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</span><br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span>(value) + ((expiredays == <span class="hljs-literal">null</span>) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;;expires=&quot;</span> + exdate.toUTCString());<br>&#125;<br>setCookie(<span class="hljs-string">&quot;zhangshan&quot;</span>, <span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>在浏览器的环境下运行：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730105418.png" alt="image-20210730105417994"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730105405.png" alt="image-20210730105404831"></p><p>获取cookie有问题(暂时不做)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>十四、JS设置cookie和获取cookie<br>JS设置cookie和获取cookie<br>设置cookie和获取cookie<br>代码如下：<br><br>设置 Cookie：<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置cookie值</span><br><span class="hljs-comment"> * setCookie（键，值，保存时长（毫秒））</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>name cookie对应名字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>value 该cookie对应的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">Hours</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expiredays</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> exdate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    exdate.setTime(<span class="hljs-built_in">Number</span>(exdate) + expiredays);<br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span>(value) + ((expiredays == <span class="hljs-literal">null</span>) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;;expires=&quot;</span> + exdate.toGMTString());<br>&#125;<br>获取 Cookie：<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS 获取 Cookie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>name cookie对应名字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;string&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.cookie.length &gt; <span class="hljs-number">0</span>) &#123;<br>        c_start = <span class="hljs-built_in">document</span>.cookie.indexOf(name + <span class="hljs-string">&quot;=&quot;</span>);<span class="hljs-comment">//获取字符串的起点</span><br>        <span class="hljs-keyword">if</span>(c_start != -<span class="hljs-number">1</span>) &#123;<br>            c_start = c_start + name.length + <span class="hljs-number">1</span>;<span class="hljs-comment">//获取值的起点</span><br>            c_end = <span class="hljs-built_in">document</span>.cookie.indexOf(<span class="hljs-string">&quot;;&quot;</span>, c_start);<span class="hljs-comment">//获取结尾处</span><br>            <span class="hljs-keyword">if</span>(c_end == -<span class="hljs-number">1</span>) c_end = <span class="hljs-built_in">document</span>.cookie.length;<span class="hljs-comment">//如果是最后一个，结尾就是cookie字符串的结尾</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURI</span>(<span class="hljs-built_in">document</span>.cookie.substring(c_start, c_end));<span class="hljs-comment">//截取字符串返回</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getCookie(<span class="hljs-string">&quot;zhangshan&quot;</span>));<span class="hljs-comment">//name1</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>对escape()的理解：</p><p>可以对字符串进行编码，在所有计算机上读取该字符串</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-集合引用类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Object"><a href="#一、Object" class="headerlink" title="一、Object"></a>一、Object</h2><ol><li><p>大多数引用值的示例使用的是Object类型</p></li><li><p>创建Object实例的两种方式：</p><ul><li><p>使用new关键字和构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>使用对象字面量表示法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>属性名可以是字符串或者数值</p></li><li><p>数值属性会自动转换成字符串</p></li><li><p>使用对象字面量表示法定义对象时，不会调用Object的构造函数</p></li></ul></li><li><p>属性一般通过点语法来存取，也可以使用中括号来存取</p></li><li><p>使用中括号的时候，在括号内使用属性名的字符串形式</p></li><li><p>使用中括号的优势是可以通过变量访问属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">let</span> argsName = <span class="hljs-string">&quot;name&quot;</span>;<br><span class="hljs-built_in">console</span>.log(person[argsName]); <span class="hljs-comment">// 小红</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、Array"><a href="#二、Array" class="headerlink" title="二、Array"></a>二、Array</h2><ol><li><p>创建数组实例的几种方式：</p><ul><li><p>使用new关键字和Array构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>数组字面量表示法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>]<br></code></pre></td></tr></table></figure></li><li><p>使用数组字面量表示法不会调用Array的构造函数</p></li><li><p>ES6新增的方法：from()和of()</p></li><li><p>from()用于将类数组结构转换为数组实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(<span class="hljs-string">&quot;Matt&quot;</span>)); <span class="hljs-comment">// [ &#x27;M&#x27;, &#x27;a&#x27;, &#x27;t&#x27;, &#x27;t&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>from()可以将集合和映射转换成一个新数组</p></li><li><p>from()也可以实现浅拷贝</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210729171716.png" alt="img"></p></li><li><p>from()还可以接受第二个可选的映射函数参数，接受第三个参数指定映射函数中的this值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-built_in">Array</span>.from(a1,<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x**<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(a2); <span class="hljs-comment">// [ 1, 4, 9, 16 ]</span><br><span class="hljs-keyword">let</span> a3 = <span class="hljs-built_in">Array</span>.from(a1,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123; <span class="hljs-keyword">return</span> x**<span class="hljs-built_in">this</span>.exponent&#125;,&#123;<span class="hljs-attr">exponent</span>:<span class="hljs-number">2</span>&#125;);<br><span class="hljs-built_in">console</span>.log(a3); <span class="hljs-comment">// [ 1, 4, 9, 16 ]</span><br></code></pre></td></tr></table></figure></li><li><p>of()用于将一组参数转换成数组实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)); <span class="hljs-comment">// [ 1, 2, 3, 4 ]</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>ES6新增的方法和迭代器将空位当成存在的元素，值是undefined</p></li><li><p>map()会跳过空位</p></li><li><p>join()将空位置看做空字符串</p></li><li><p>数组中常用的方法：</p><p>检测数组：</p><ul><li>如果只有一个网页，instanceof()足以，</li><li>数组本身提供的Array.isArray()方法</li></ul><p>迭代器方法：</p><ul><li>keys()返回数组索引的迭代器</li><li>values()返回数组元素的迭代器</li><li>entires()返回索引/值对的迭代器</li></ul><p>复制和填充方法：</p><ul><li>fill(填充字符，[开始位置]，[结束位置])</li><li>copyWithin(插入开始位置，复制开始位置)</li></ul><p>转换方法：</p><ul><li>toString()返回由数组的每个值的等效字符串拼接而成的一个逗号分隔的字符串</li><li>valueOf()返回数组本身</li><li>想返回不同的分隔符，使用join()方法</li></ul><p>栈方法</p><ul><li>push()方法接收任意数量的参数，返回数组的最新长度</li><li>pop()删除数组的最后一项，返回被删除的项</li><li>使用push()和pop()可以把数组当做栈来使用</li></ul><p>队列方法</p><ul><li>shift()删除数组的第一项，并且返回它</li><li>使用shift()和push()可以把数组当做队列来使用</li><li>unshift()在数组开头添加任意多个值，返回新数组的长度</li><li>使用unshift()和pop()可以在相反方向上模拟队列</li></ul><p>排序方法</p><ul><li><p>reverse()反向排序</p></li><li><p>sort()对数组默认进行的是升序，但是sort()方法会对每一项调用String()函数，然后比较字符串来决定顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><span class="hljs-built_in">console</span>.log(arr.sort());<span class="hljs-comment">// [ 0, 1, 10, 15, 5 ]</span><br></code></pre></td></tr></table></figure></li><li><p>reverse()和sort()都返回调用他们的数组的引用</p></li></ul><p>操作方法</p><ul><li>concat()在现有数组全部元素的基础上创建一个新数组，（连接数组）</li><li>slice()创建一个包含原数组中一个或者多个元素的新数组</li><li>slice(开始索引，[结束索引])</li><li>splice()主要目的是在数组中插入元素</li><li>删除：splice(删除元素的位置，删除元素数量)</li><li>插入：splice(开始位置，0，要插入元素)</li><li>替换：splice(开始位置，删除元素数量，插入的任意多个元素)</li><li>splice()总是返回这样一个数组，他包含从数组中被删除的元素，如果没有元素，返回空数组</li></ul><p>搜索和位置方法</p><ul><li>indexOf()返回要查找的元素在数组中的位置，没有找到返回-1，从数组第一项开始向后搜索</li><li>lastIndexOf()返回要查找的元素在数组中的位置，没有找到返回-1，从数组末尾开始向前搜索</li><li>includes()返回布尔值，表示是否至少找到一个与指定元素匹配的项</li><li>find()从数组的最小索引开始，返回第一个匹配的元素</li><li>findIndex()返回第一个匹配元素的索引</li></ul><p>迭代方法</p><ul><li><p>every()对数组的每一项都运行传入函数，如果每一项都返回true，则这个方法返回true</p></li><li><p>filter()对数组的每一项都运行传入函数，函数返回true的项会组成新数组返回</p></li><li><p>forEach(没有返回值，只是简单的遍历数组</p></li><li><p>map()对数组的每一项都运行函数，返回每次函数调用结果构成的数组</p></li><li><p>some()对数组的每一项都运行函数，如果有一项返回true，则这个方法返回true</p></li><li><p>这些方法，都不改变调用他们的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> everyResult = numbers.every(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(everyResult); <span class="hljs-comment">// false</span><br><span class="hljs-keyword">let</span> filterResult = numbers.filter(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(filterResult); <span class="hljs-comment">// [ 3, 4, 5, 4, 3 ]</span><br><span class="hljs-keyword">let</span> mapResult = numbers.map(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(mapResult); <span class="hljs-comment">// [ 2, 4, 6, 8, 10, 8, 6, 4, 2]</span><br>numbers.forEach(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(element); <span class="hljs-comment">// 1 2 3 4 5 4 3 2 1</span><br>&#125;);<br><span class="hljs-keyword">let</span> someResult = numbers.some(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(someResult); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><p>归并方法</p><ul><li>reduce()从数组的第一项开始遍历到最后一项，接受2个参数，对每一项都会运行的归并函数，以及可选的以之为归并起点的初始值</li><li>传给reduce的函数接受4个参数：上一个归并值，当前项，当前项的索引，数组本身</li><li>返回归并的结果</li><li>reduceRight()从最后一项开始遍历到第一项</li></ul></li></ol><h2 id="三、定型数组-暂时不了解"><a href="#三、定型数组-暂时不了解" class="headerlink" title="三、定型数组(暂时不了解)"></a>三、定型数组(暂时不了解)</h2><h2 id="四、Map"><a href="#四、Map" class="headerlink" title="四、Map"></a>四、Map</h2><ol><li><p>Map是一种新的集合类型</p></li><li><p>使用new关键字和构造函数创建空的映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br></code></pre></td></tr></table></figure></li><li><p>使用set()方法添加键值对</p></li><li><p>使用get()和has()进行查询 get返回值，has返回布尔值</p></li><li><p>通过size属性返回键值对数量</p></li><li><p>使用delete()和clear()删除值 delete删除一个键值对，clear清空所有键值对</p></li><li><p>Map可以使用任何js数据类型作为键，Object只能使用数值，字符串或者符号作为键</p></li></ol><h2 id="五、WeakMap"><a href="#五、WeakMap" class="headerlink" title="五、WeakMap"></a>五、WeakMap</h2><ol><li>“弱映射”是一种新的集合类型</li><li>WeakMap中的“weak”描述的是js垃圾回收程序对待“弱映射”中键的方式</li></ol><h2 id="六、Set"><a href="#六、Set" class="headerlink" title="六、Set"></a>六、Set</h2><ol><li><p>Set是一种新的集合类型</p></li><li><p>使用new关键字和Set构造函数创建一个空集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></td></tr></table></figure></li><li><p>使用add()增加值</p></li><li><p>使用has()查询</p></li><li><p>通过size取得元素数量</p></li><li><p>使用delete()和clear()删除元素</p></li><li><p>Set 会维护值插入时的顺序，因此支持按顺序迭代</p></li></ol><h2 id="七、WeakSet"><a href="#七、WeakSet" class="headerlink" title="七、WeakSet"></a>七、WeakSet</h2><ol><li>“弱集合”是一种新的集合类型</li><li>WeakSet中的“weak”描述的是js垃圾回收程序对待“弱集合”中值的方式</li></ol><h2 id="八、小结"><a href="#八、小结" class="headerlink" title="八、小结"></a>八、小结</h2><div class="note note-success">            <ul><li>ECMAScript新增一批引用类型：Map、WeakMap、Set、WeakSet，这些类型为组织应用程序数据和简化内存管理提供了新能力</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否是数字类型</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是数字类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>value 判断的数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDigit</span>(<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/^[0-9]*$/</span>;<br>    <span class="hljs-keyword">if</span> (pattern.exec(value) === <span class="hljs-literal">null</span> || value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isDigit(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对/^[0-9]*$/的理解：</p><ul><li>^ 正则匹配的开始</li><li>$正则匹配的结束</li><li>[0-9]匹配0-9</li><li>*匹配之前的子表达式零次或者多次 所以可以匹配到99、9999等数字</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否以某个字符串结束</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否以某个字符串结尾</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>s 匹配字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endWith</span>(<span class="hljs-params">str, s</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> d = str.length - s.length;<br>    <span class="hljs-keyword">return</span> d &gt;= <span class="hljs-number">0</span> &amp;&amp; str.lastIndexOf(s) === d;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sdasd  sdx adsad asd sa&quot;</span>;<br><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;sa&quot;</span>;<br><span class="hljs-built_in">console</span>.log(endWith(str, s)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对lastIndexOf的理解：</p><ul><li>从字符串结尾开始查找子字符串，返回下标</li><li>判断是否是结尾下标的方式，就是用str.length-s.length</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否以某个字符串开头</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否以某个字符串开头</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>s 匹配字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startWith</span>(<span class="hljs-params">str, s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.indexOf(s) === <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sdasd  sdx adsad asd sa &quot;</span>;<br><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;a&quot;</span>; <br><span class="hljs-built_in">console</span>.log(startWith(str, s)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对indexOf的理解：</p><ul><li>从字符串开头开始查找子字符串，返回下标</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04截取字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 截取字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原始字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 截取的长度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回截取后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutStr</span>(<span class="hljs-params">str, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> temp; <span class="hljs-comment">// 记录每个字符</span><br>    <span class="hljs-keyword">let</span> icount = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录长度</span><br>    <span class="hljs-comment">// [^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/[^\x00-\xff]/</span>;<br>    <span class="hljs-keyword">let</span> resStr = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 返回的字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (icount &lt; len - <span class="hljs-number">1</span>) &#123;<br>            temp = str.substr(i, <span class="hljs-number">1</span>); <span class="hljs-comment">//每次截取一个字符</span><br>            <span class="hljs-keyword">if</span> (pattern.exec(temp) == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 没有匹配到双字节字符，返回null</span><br>                icount = icount + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                icount = icount + <span class="hljs-number">2</span>;<br>            &#125;<br>            resStr += temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resStr + <span class="hljs-string">&#x27;......&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;我爱你，我的祖国&quot;; // 我......</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;fhasjdhklsajhfnolsai&quot;</span>;<span class="hljs-comment">// fh......</span><br><span class="hljs-keyword">let</span> len = <span class="hljs-number">6</span>;<br><span class="hljs-built_in">console</span>.log(cutStr(str, len));<br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对/[^\x00-\xff]/的理解：</p><ul><li><p>匹配双字节字符</p></li><li><p>英文字母属于单字节字符，而汉字则属于双字节字符。因为英文字母、数字、符号等完全可以用128种不同的数值来表示，而汉字太多则不能，所以才需要扩展到双字节。</p></li><li><p>一个双字节字符长度计2，ASCII字符计1</p></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04冒泡排序</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡排序：每次排序都把最大的放到最后</span><br><span class="hljs-comment"> * 细节：内层j遍历的时候，是当前值j和后一个j+1进行比较，所以j当前值最大控制在length-1</span><br><span class="hljs-comment"> * 当把最大值放到最后，下次遍历就不需要在去比较了，所以控制j=length-1-i</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr 原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回排序后的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maoPaoSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123; <span class="hljs-comment">//当j=length-1时，j+1 = length 最大是length</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">85</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">17</span>, <span class="hljs-number">31</span>, <span class="hljs-number">17</span>, <span class="hljs-number">86</span>, <span class="hljs-number">50</span>]; <span class="hljs-comment">//[17, 17, 24, 31, 50, 63, 85, 86 ]</span><br><span class="hljs-built_in">console</span>.log(maoPaoSort(arr));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-基本引用类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Date"><a href="#一、Date" class="headerlink" title="一、Date"></a>一、Date</h2><ol><li><p>创建日期对象</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure></li><li><p>Date.parse()和Date.UTC()都会被Date构造函数隐式调用</p></li><li><p>Date.now()返回方法执行日期和时间的毫秒数</p></li><li><p>Date类型重写了toLocaleString()、toString()和valueOf()方法</p></li><li><p>日期中提供了很多方法，需要的时候，可以查看书籍P106</p></li></ol><h2 id="二、RegExp"><a href="#二、RegExp" class="headerlink" title="二、RegExp"></a>二、RegExp</h2><ol><li>ECMAScript 通过RegExp类型支持正则表达式</li><li>RegExp实例的方法：<ul><li>exec()：只要配合捕获组使用，只接受一个参数，即要应用模式的字符串</li><li>test()：接受一个字符串参数，如果匹配返回true，如果不匹配返回false</li></ul></li></ol><h2 id="三、原始值包装类型"><a href="#三、原始值包装类型" class="headerlink" title="三、原始值包装类型"></a>三、原始值包装类型</h2><ol><li><p>提供3种特殊的引用类型：Boolean、Number、String</p></li><li><p>原始值本身不是对象，逻辑上不应该有方法</p><p>String:</p></li><li><p>但是后台做了很多工作：在以读模式访问字符串的任何时候实际上后台会执行3步：</p><ul><li>创建一个String类型的实例</li><li>调用实例上的特定方法</li><li>销毁实例</li></ul></li><li><p>这种行为可以让原始值拥有对象的行为</p><p>Boolean:</p></li><li><p>Boolean是对应的布尔值的引用类型</p></li><li><p>Boolean的实例会重写valueOf()方法，返回一个原始值true或者false</p></li><li><p>toString()方法被调用时也会被覆盖，返回字符串“true”或者“false”</p><p>Number:</p></li><li><p>Number是对应的数值的引用类型</p></li><li><p>toFixed()返回包含小数点位数的数值字符串</p></li><li><p>toExponential()返回以科学计数法表示的数值字符串</p></li><li><p>toPrecision()方法会根据情况返回最合理的输出结果</p></li><li><p>ES6新增的Number.isInteger()方法，用于辨别一个数值是否保存为整数</p><p>String:</p></li><li><p>String是对应的字符串的引用类型</p></li><li><p>String的3个继承方法：toString、toLocaleString、valueOf可以在所有字符串原值上调用</p></li><li><p>字符串的length属性</p></li><li><p>字符串的操作方法：</p><ul><li>concat():用于将一个或者多个字符串拼接成一个新字符串</li><li>但是更常用的连接字符串的是“+”</li><li>slice():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置</li><li>slice():将所有负值参数都当做字符串长度加上负参数值</li><li>substring():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置</li><li>substring():会将所有负参数值转换成0</li><li>substr():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串的个数</li><li>substr():将第一个负参数值当做字符串长度加上负参数值，第二个负参数值转化成0 </li><li>indexOf()：从字符串开头开始查找子字符串返回下标</li><li>lastIndexOf():从字符串末尾开始查找子字符串返回下标</li><li>startWith():判断字符串是否包含另一个字符串，返回布尔值，从索引0开始</li><li>endWith():检查开始于2个字符串长度的差值</li><li>includes():检查整个字符串</li><li>trim():删除前后所有空格</li><li>repeat():接受一个整数参数，表示将字符串复制多少次</li><li>padStart()、padEnd():复制字符串，如果小于指定长度，则在相应的一边填充字符</li><li>如果长度小于或者等于字符串长度，返回原字符串</li><li>字符串解构: 解构操作符…</li><li>字符串的大小转换：toLowerCase()、toLocaleLowerCase()、toUpperCase()、toLcaleUpperCase()</li><li>match():本质和RegExp对象的exec()方法相同</li><li>replace():第一个参数是字符串或者RegExp对象，第二个参数可以是字符串或者一个函数</li><li>split():会根据传入的分隔符把字符串分割，返回数组</li><li>localeCompare():比较2个字符串，大于返回1，小于返回-1，相等返回0</li></ul></li></ol><h2 id="四、单例内置对象"><a href="#四、单例内置对象" class="headerlink" title="四、单例内置对象"></a>四、单例内置对象</h2><ol><li>2个单例内置对象：Global、Math</li><li>在全局作用域中定义的变量和函数都会变成Global 对象的属性</li><li>通过eval()定义的任何变量和函数都不会被提升</li><li>undefined、NaN、Infinity都是Gobal对象的属性</li><li>所有原生引用类型构造函数比如:Object、Function也都是Global对象的属性</li><li>ECMA-262 没有规定直接访问Global对象的方式</li><li>浏览器将window对象实现为Global对象的代理</li><li>调用一个简单返回this的函数是在执行上下文中获取Global对象通用方式</li><li>Math提供和很多方法，需要时可以查看书籍P132</li></ol><h2 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h2><div class="note note-success">            <p>引用值与传统面向对象编程语言中的类相似，但实现不同</p><p>Date类型提供关于日期和时间的信息</p><p>RegExp类型是ECMAScript支持正则表达式的接口</p><p>由于原始值包装类型的存在，Js中的原始值可以当做对象来使用</p><p>当代码开始执行的时候，全局上下文会存在2个内置对象：Global和Math</p><p>Global对象在大多数ECMAScript实现中无法直接访问，不过浏览器将其实现为window对象</p><p>所有全局变量和函数都是Global对象的属性</p>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-变量、作用域与内存</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、原始值与引用值"><a href="#一、原始值与引用值" class="headerlink" title="一、原始值与引用值"></a>一、原始值与引用值</h2><ol><li>原始值就是最简单的数据</li><li>引用值则是多个值构成的对象</li><li>保存原始值的变量是按照值访问的</li><li>引用值是保存在内存中的对象</li><li>js不允许直接访问内存位置，也就不能直接操作对象所在的内存空间，在操作对象时，实际上操作的是对对象的引用</li><li>保存引用值的变量是按照引用访问的</li><li>对于引用值可以随时添加、修改、删除其属性和方法</li><li>只有引用值可以动态添加后面可以使用的属性</li><li>原始值：通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置</li><li>引用值：通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置，区别是，这里复制的值其实是一个指针，指向存在堆内存中的对象，操作完成后，两个变量实际上指向同一个对象</li><li>变量分为按照值和引用访问，而传参只有按照值传递</li><li>typeof用于检测原始数据类型，instanceof用于检测引用数据类型</li><li>所以引用值都是Object实例</li></ol><h2 id="二、执行上下文和作用域"><a href="#二、执行上下文和作用域" class="headerlink" title="二、执行上下文和作用域"></a>二、执行上下文和作用域</h2><ol><li>在浏览器中，全局上下文就是我们常说的window对象</li><li>全局上下文在应用程序退出时才销毁，比如关闭网页或退出浏览器</li><li>程序的执行流是通过上下文栈进行控制的</li><li>内部上下文可以通过作用域链访问外部上下文中的一切，但是外部上下文无法访问内部上下文中的任何东西</li><li>使用var的函数作用域声明</li><li>使用let的块级作用域声明</li><li>使用const声明的变量必须同时初始化为某个值</li></ol><h2 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h2><ol><li><p>垃圾回收的两种方式：标记清理和引用计数</p></li><li><p>引用计数存在循环引用的问题</p></li><li><p>循环引用就是对象A有一个指针指向对象B，而对象B也引用了对象A</p></li><li><p>分配给浏览器的内存通常比分配给桌面软件的要少的多，分配给移动浏览器的就更少了</p></li><li><p>将内存占用量保持在一个较小的值可以让页面的性能更好</p></li><li><p>解除对一个值的引用并不会自动导致相关的内存被回收，解除引用的关键是，确保相关的值不在上下文里了，他在下次垃圾回收的时候会被回收</p></li><li><p>Chorme是最流行的浏览器，使用的V8 JavaScript引擎</p></li><li><p>苹果浏览器使用的JavaScriptCore引擎</p></li><li><p>Chorme分为html渲染和JavaScrpit解析</p><ul><li>html渲染采用的是webkit的代码,</li><li>js解析采用的自己的框架V8 JavaScript引擎</li></ul></li><li><p>使用js闭包很容易在不知不觉之间造成内存泄漏</p></li><li><p>js的特点：内部变量可以访问外部变量，或者说子对象可以访问父对象的属性和方法</p></li><li><p>闭包：能够读取其他函数内部变量的函数</p></li><li><p>为了提升javascript的性能，可以采用静态分配和对象池</p></li></ol><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><div class="note note-success">            <p>原始值的大小固定，保存在栈内存</p><p>引用值是对象，保存在堆内存</p><p>typeof确定值的原始类型，instanceof确定值的引用类型</p><p>执行上下文分为全局上下文、函数上下文和块级上下文</p><p>javascript的垃圾回收机制：</p><p>离开作用域的值会被标记成可回收，然后垃圾回收期间被删除</p><p>主流的垃圾回收算法是标记清理</p><p>引用计数是另一种垃圾回收机制</p><p>引用计数在代码中存在循环引用的时候会出现问题</p><p>为了促进内存回收，全局对象，全局对象的属性和循环引用在不需要的时候，都要解除引用</p>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03打乱数组</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打乱数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arrOld 原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 打乱的个数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回打乱后的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upsetOld</span>(<span class="hljs-params">arrOld, num</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = []; <span class="hljs-comment">// 结果数组</span><br>    <span class="hljs-keyword">let</span> _length = num || arrOld.length; <span class="hljs-comment">// 打乱的个数</span><br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Object</span>.assign([], arrOld); <span class="hljs-comment">//Object.assign方法用于对象的合并</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; _length; i++) &#123; <span class="hljs-comment">// 删除随机的一位，然后去第一位放入结果数组</span><br>        result.push(arr.splice(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arr.length), <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> arrOld = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(upsetOld(arrOld)); <span class="hljs-comment">//[ 5, 2, 7, 6, 1,  9, 4, 8, 0, 3]</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>对Object.assign()的理解：</p><ul><li>合并目标数组和原数组，,目标数组相同的键会被原数组覆盖</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> target = &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-attribute">const</span> source = &#123; b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;;<br><span class="hljs-attribute">const</span> returnedTarget = Object.assign(target, source);<br><span class="hljs-attribute">console</span>.log(target);//  &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;<br><span class="hljs-attribute">console</span>.log(returnedTarget);//  &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><p> 此方法只会拷贝源对象自身的并且可枚举的属性到目标对象</p></li><li><p>Object.assign进行的拷贝是浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);<br> <br>obj1.a.b = <span class="hljs-number">2</span>;<br>obj2.a.b <span class="hljs-comment">// 2</span><br>由于是浅拷贝，所以属性a的内部有任何变化，都会在目标对象上呈现出来。<br></code></pre></td></tr></table></figure></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07反序字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%8D%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%8D%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串反序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回反序字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isReverse</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span><br>    <span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse()); <span class="hljs-comment">//[ &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27; ]</span><br>    <span class="hljs-keyword">return</span> str.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// bca</span><br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(isReverse(str));<br></code></pre></td></tr></table></figure><div class="note note-success">            <ul><li>字符串反序通过数组使用</li><li>利用split()转成数组</li><li>利用数组的方法reverse()翻转</li><li>在利用join连接数组，返回字符串</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03数组去重</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组去重</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arrs  参数数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>去重数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeReapt</span>(<span class="hljs-params">arrs</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">let</span> json = &#123;&#125;;<span class="hljs-comment">// 定义标记数组 换成temp [] 可以达到一样的效果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arrs.length; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!json[arrs[i]]) &#123; <span class="hljs-comment">// json[arr[i]] 的值是undefined 是假值</span><br>            arr.push(arrs[i]);<br>            json[arrs[i]] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 每放进去一值，就做标记1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">let</span> arrs = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">79</span>, <span class="hljs-number">11</span>, <span class="hljs-number">46</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>];<br><span class="hljs-built_in">console</span>.log(removeReapt(arrs)); <span class="hljs-comment">// [ 11, 22, 33, 79, 46, 97 ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03格式化金额</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%91%E9%A2%9D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%91%E9%A2%9D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化金额(没有分析)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>money 输入的钱数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>type 是否带小数点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params">money , type</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[^0-9\.]/</span>.test(money))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">if</span> (money == <span class="hljs-literal">null</span> || money == <span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    money = money.toString().replace(<span class="hljs-regexp">/^(\d*)$/</span>, <span class="hljs-string">&quot;$1.&quot;</span>);<br>    money = (money + <span class="hljs-string">&quot;00&quot;</span>).replace(<span class="hljs-regexp">/(\d*\.\d\d)\d*/</span>, <span class="hljs-string">&quot;$1&quot;</span>);<br>    money = money.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/(\d)(\d&#123;3&#125;,)/</span>;<br>    <span class="hljs-keyword">while</span> (re.test(money))<br>        money = money.replace(re, <span class="hljs-string">&quot;$1,$2&quot;</span>);<br>    money = money.replace(<span class="hljs-regexp">/,(\d\d)$/</span>, <span class="hljs-string">&quot;.$1&quot;</span>);<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 不带小数位(默认是有小数位)</span><br>        <span class="hljs-keyword">var</span> a = money.split(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;00&quot;</span>) &#123;<br>            money = a[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> money;<br>&#125;<br><span class="hljs-built_in">console</span>.log(convert(<span class="hljs-number">123</span>)); <span class="hljs-comment">// 123.00</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02判断2个数组相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%88%A4%E6%96%AD2%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%88%A4%E6%96%AD2%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断2个数组相等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 参数1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 参数2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回boolean值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr1 === arr2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (arr1.length != arr2.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr1[i] !== arr2[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.log(arrayEqual(arr1,arr2)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02验证身份证</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IdentityCodeValid</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> myreg = <span class="hljs-regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\d&#123;3&#125;(\d|[xX])$/i</span>;<br>    <span class="hljs-keyword">return</span> myreg.test(str);<br>&#125;<br><span class="hljs-built_in">console</span>.log(IdentityCodeValid(<span class="hljs-string">&quot;150316199910123446&quot;</span>));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02验证手机号</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入的手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verifyPhoneNumberFormat</span>(<span class="hljs-params">str</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> myreg = <span class="hljs-regexp">/^((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(17[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;$/</span>;<br>    <span class="hljs-keyword">return</span> myreg.test(str);<br>&#125;<br><span class="hljs-built_in">console</span>.log(verifyPhoneNumberFormat(<span class="hljs-string">&quot;15031679910&quot;</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>对正则的理解：</p><p>/^((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8}$/;</p><p>^ 正则的开始</p><p>$ 正则的结束</p><p>13[0-9]{1} 表示数值可以是130、131、132…这样子，{1}表示匹配一位</p><p>\d：匹配一个数字字符。等价于[0-9]</p><p>{8}：匹配次数8次</p><p>\d{8}：任意的8个数字</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02生成uuid</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E7%94%9F%E6%88%90uuid/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E7%94%9F%E6%88%90uuid/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成uuid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateUUID</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//返回13位的毫秒数 从1970年1月1日到现在的北京时间</span><br>    <span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-comment">//  /[xy]/g 是匹配字符串中的x或者y或者多个xy</span><br>    <span class="hljs-comment">// /g表示查找所以可能的匹配，返回结果是多个，如果不加/g最多只会匹配一个</span><br>    <span class="hljs-keyword">var</span> uuid = <span class="hljs-string">&#x27;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&#x27;</span>.replace(<span class="hljs-regexp">/[xy]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(c); // c的值是替换后的值xxxxxxxxxxxxxxxyxxxxxxxxxxxxxxx</span><br>        <span class="hljs-keyword">let</span> r = (d + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">16</span>) % <span class="hljs-number">16</span> | <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> (c == <span class="hljs-string">&#x27;x&#x27;</span> ? r : (r &amp; <span class="hljs-number">0x7</span> | <span class="hljs-number">0x8</span>)).toString(<span class="hljs-number">16</span>);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> uuid;<br>&#125;<br><span class="hljs-built_in">console</span>.log(generateUUID()); <span class="hljs-comment">//ee465953237b4f16a500bb4b1b96c0ff</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对/[xy]/g的理解：</p><p> /[xy]/g 是匹配字符串中的x或者y或者多个xy</p><p> /g表示查找所以可能的匹配，返回结果是多个，如果不加/g最多只会匹配一个</p><p>如果上述的程序不加/g得到结果是： 5xxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx 只会匹配一个字符</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-01产生随机字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-01%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-01%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 产生随机字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>radomFlag 用户是否设置位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>min 最小位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>max 最大位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回生成的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomWord</span>(<span class="hljs-params">radomFlag, min, max</span>) </span>&#123;<br>    <span class="hljs-comment">//结果字符串</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">// 位数 </span><br>    range = min;<br>    arr = [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>];<br>    <span class="hljs-comment">//设置产生位数与否</span><br>    <span class="hljs-keyword">if</span> (radomFlag) &#123;<br>        <span class="hljs-comment">// 产生min-max位的随机字符串</span><br>        range = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; range; i++) &#123;<br>        <span class="hljs-comment">// 产生0-arr.length 的随机数</span><br>        <span class="hljs-keyword">let</span> pos = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * (arr.length - <span class="hljs-number">1</span>));<br>        str += arr[pos];<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-comment">// 生成3-32位的随机字符串</span><br><span class="hljs-keyword">let</span> str1 = randomWord(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>);<br><span class="hljs-comment">// 生成32位随机字符串</span><br><span class="hljs-keyword">let</span> str2 = randomWord(<span class="hljs-literal">false</span>, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(str1); <span class="hljs-comment">// JWrQ5AmSv702B7X2J0A4o5mBO</span><br><span class="hljs-built_in">console</span>.log(str2); <span class="hljs-comment">// 5mKY</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>对Math.radom()的理解：生成随机的大于等于0.0且小于1.0的double值</p><p>返回指定范围(m-n)的随机数的公式</p><p>Math.radom()*(n-m)+m;</p><p>比如生成3-32位的随机数：Math.radom()*(32-3)+3;</p><p>Math.radom() 生成的是0.0-1.0,</p><p>Math.radom()*(32-3)生成的是0-29</p><p>Math.radom()*(32-3)+3 生成的是3-32</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-语言基础</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><ol><li>ECMAScript中的一切都区分大小写</li><li>即使语句的末尾分号不是必须的，也应该加上</li><li>if之类的控制语句即使只有一行，也应该加上{}</li></ol><h2 id="二、关键字和保留字"><a href="#二、关键字和保留字" class="headerlink" title="二、关键字和保留字"></a>二、关键字和保留字</h2><h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><ol><li><p>ECMAScript的类型系统是松散的，有3个关键字可以申明变量：var、let、const</p></li><li><p>var声明：</p><ul><li><p>var初始化变量只是一个简单的赋值，还是可以改变他的值，或者数据类型</p></li><li><p>var声明的范围是函数作用域，在整个函数内部，都可以使用</p></li><li><p>在函数内部定义变量时，省略var操作符，意味着定义了一个全局变量</p></li><li><p>var存在变量提升，以下代码不会报错，是因为var声明的变量会自动提升到函数作用域顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-keyword">var</span> age =<span class="hljs-number">26</span>;<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure></li><li><p>以上的代码等价于如下的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> age ;<br>    <span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// undefined</span><br>    age =<span class="hljs-number">26</span>;<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>let声明：</p><ul><li>let 关键字声明的范围是块级作用域，var声明的是函数作用域</li><li>块作用域是函数作用域的子集</li><li>let不允许在同一个块作用域中出现冗余声明</li><li>let声明的变量不会在作用域中被提升</li><li>暂时性死区，不能以任何方式来引用未声明的变量，在let声明之前的执行瞬间成为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出错误</li><li>必须确保页面不会重复声明同一个变量</li></ul></li><li><p>const声明：</p><ul><li>const声明的变量必须同时初始化变量</li><li>尝试修改const声明的变量会导致运行时错误</li><li>如果const变量引用的是一个对象，那么修改这个对象内部的属性并不违反const限制</li><li>推荐使用：不使用var，const优先，let次之</li></ul></li></ol><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><ol><li>JS的数据类型分为原始数据类型和引用数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined</li><li>引用数据类型：Object、Array、Function</li></ul></li><li>ES的数据类型分为原始数据类型和引用数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined、Symbol</li><li>引用数据类型：Object</li></ul></li><li>TS的数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined、Symbol、BigInt</li><li>Any、Never、void、数组、元组、枚举、联合</li><li>函数、对象、数组</li></ul></li><li>typeof操作符<ul><li>typeof null 返回的是object 特殊值null被认为是一个对空对象的引用</li></ul></li><li>undefined类型<ul><li>使用var和let声明变量但是没有初始化，就相当于给变量赋值了undefined值</li><li>undefined是一个假值</li></ul></li><li>null类型<ul><li>在定义将来要保存对象的变量的时候，建议使用null初始化</li><li>只要变量要保存对象，而且当时又没有对象可以保存，就要使用null来填充变量</li></ul></li><li>boolean类型<ul><li>在es中，true不等于1，false不等于0</li><li>True和False是有效的标识符，因为es严格区分大小写</li></ul></li><li>number类型<ul><li>八进制字面量第一个值是0</li><li>十六机制字面量第一个值是0x</li><li>es并不支持世界上所有的数值</li><li>超出范围，js的数值会自动转换成一个特殊的值Infinity</li><li>有一个特殊的数值NaN，意思是：不是数值</li><li>NaN不等于自己</li><li>isNaN()函数，任何不能转换为数值的值都会导致这个函数的返回值是true</li><li>数值转换：Number()、praseInt()、parseFloat()</li></ul></li><li>string类型<ul><li>字符串可以使用双引号(“”)、单引号(‘’)、反引号(`)标示</li><li>转义序列表示一个字符，所以只算一个字符</li><li>字符转换：toString()、String()转型函数、加号给一个值加上””</li><li>null和undefined没有toString()方法</li><li>字符串插值通过${}实现</li></ul></li><li>symbol类型<ul><li>符号的用途是确保对象属性使用唯一标识符</li><li>（暂时不学）</li></ul></li><li>object类型<ul><li>Object是派生其他对象的基类</li><li>Object类型的所有属性和方法在派生对象上同样存在</li><li>每个Object实例都有的属性和方法<ul><li>constructor 用于创建当前对象的函数</li><li>hasOwnProperty(propertyName) 判断当前对象的实例，是否存在给定的属性</li><li>isPrototypeOf(object)用于判断当前对象是否为另一个对象的原型</li><li>propertyIsEnumerable(propertyName)用于判断给定的属性是否可以使用for-in语句枚举</li><li>toLocaleString() 返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</li><li>toString()返回对象的字符串表示</li><li>valueOf()返回对象对应的字符串、数值或者布尔值表示</li></ul></li></ul></li></ol><h2 id="五、操作符"><a href="#五、操作符" class="headerlink" title="五、操作符"></a>五、操作符</h2><ol><li>操作符<ul><li>一元操作符：++、–、+、-、</li><li>位操作符：~、|、&amp;、^、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li><li>布尔操作符：！、&amp;&amp;、||、</li><li>乘性操作符：*、/</li><li>指数操作符：**</li><li>加性操作符：+、-</li><li>关系操作符：&lt;、&gt;、&lt;=、&gt;=、</li><li>相等操作符：==、!=、===、!==</li><li>条件操作符：？：</li><li>赋值操作符：=</li><li>逗号操作符：，</li></ul></li></ol><h2 id="六、语句"><a href="#六、语句" class="headerlink" title="六、语句"></a>六、语句</h2><ol><li><p>if语句</p></li><li><p>do-while语句:会执行一次代码，在进行判断</p></li><li><p>while语句:先进行判断在执行代码</p></li><li><p>for语句</p></li><li><p>for-in语句：for-in语句用来遍历对象</p></li><li><p>for-of语句:用来遍历数组</p><ul><li><p>对象遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.for in 遍历 循环会遍历对象自身的和继承的可枚举属性</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-comment">// console.log(index);</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> index); <span class="hljs-comment">// string</span><br>    <span class="hljs-built_in">console</span>.log(arr[index]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.Object.keys()遍历 返回一个数组,包括对象自身的(不含继承的)所有可枚举属性</span><br><span class="hljs-built_in">Object</span>.keys(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3.Object.getOwnPropertyNames(obj)遍历 ,包含对象自身的所有属性</span><br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;getOwnPropertyNames下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.Reflect.ownKeys(obj)遍历</span><br><span class="hljs-built_in">Reflect</span>.ownKeys(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Reflect.ownKeys下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>数组遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.普通的for循环</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.优化for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr.length; i &lt; len; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3.forEach循环 不可以使用break return</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, i</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3.forEach循环 不可以使用break return</span><br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(index);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.map遍历 不可以使用break return</span><br>arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, i</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;map遍历----&gt;&#x27;</span> + <span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.map遍历 不可以使用break return</span><br>arr.map(<span class="hljs-function">(<span class="hljs-params">value, i</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;map遍历----&gt;&#x27;</span> + <span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 5.for of 方法正确响应break、continue和return语句 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>forEach和map的区别</p><ul><li><p>map遍历数组有返回值，返回值是处理后的新数组</p></li><li><p>map不会对空数组进行检测，map方法不改变原数组</p></li><li><p>forEach是没有返回值的，是undefined</p></li><li><p>forEach方法用来调用数组的每个元素，将元素传给回调函数</p></li><li><p>forEach对于空数组是不会调用回调函数的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> str = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// &#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [ 1, 2, 3, 4, 5, 6 ]</span><br>    <span class="hljs-keyword">return</span> item / <span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(str); <span class="hljs-comment">// [ 0.5, 1, 1.5, 2, 2.5, 3 ]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str1 = arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, inex, arr</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// &#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [ 1, 2, 3, 4, 5, 6 ]</span><br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>&#125;, <span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(str1); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>标签语句：可以通过break或者continue语句引用</p></li><li><p>break语句和continue语句</p><ul><li>break语句：用于立即退出循环，强制执行循环后的下一条语句</li><li>continue语句：用于立即退出循环，但是会再次从循环顶部开始执行</li></ul></li><li><p>with语句(不推荐)</p></li><li><p>switch语句： 在比较每个条件的值的时候采用的是全等于的方法</p></li></ol><h2 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h2><ol><li>ECMAScript中的函数不需要指定是否返回值</li><li>任何函数在任何时间都可以使用return语句来返回函数的值</li><li>不指定返回值的函数实际上返回值是undefined</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-html中的js</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-html%E4%B8%AD%E7%9A%84js/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-html%E4%B8%AD%E7%9A%84js/</url>
    
    <content type="html"><![CDATA[<h2 id="一、html中的js"><a href="#一、html中的js" class="headerlink" title="一、html中的js"></a>一、html中的js</h2><ol><li>javascript通过&lt;script、&gt;标签插入html中，也可以引入保存在外部文件中的javascript</li><li>所有的&lt;script、&gt;会根据他们在网页中出现的次序依次被解析</li><li>对于不推迟执行的脚本，浏览器必须解释完&lt;script、&gt;标签中的内容，才去渲染界面的其他内容</li><li>可以使用defer推迟脚本的执行，可以将脚本延迟到文档解析和加载完成后再运行脚本</li><li>async表示不需要等待其他脚本的加载，也不需要阻塞文档的渲染，即实现异步加载，但是异步加载不能保证他们按照web中的顺序执行</li><li>使用&lt;noscript、&gt;标签，可以解决浏览器不支持脚本的时候显示内容，如果浏览器支持脚本，那么&lt;noscript、&gt;的内容永远不会被看到</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-什么是javascript</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E4%BB%80%E4%B9%88%E6%98%AFjavascript/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E4%BB%80%E4%B9%88%E6%98%AFjavascript/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对js的认识"><a href="#一、对js的认识" class="headerlink" title="一、对js的认识"></a>一、对js的认识</h2><ol><li>js是专门用来进行网页交互的语言</li><li>js包括3大核心内容<ul><li>ECMAscript  制定标准，ES是js基本语法的规范，js是ES的实现</li><li>DOM：提供与网页内容进行交互的方法和接口</li><li>BOM：提供与浏览器进行交互的方法和接口</li></ul></li><li>js的这3部分都得到了5个web浏览器（IE、Firefox、Chorme、Safari、Opera）不同程度的支持，基本上对ES5都是支持的，对ES6的支持也在不断完善。</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-方法总结</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0js-%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0js-%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、every"><a href="#一、every" class="headerlink" title="一、every"></a>一、every</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.every()方法：判断年龄是否都大于18岁</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">everyFun</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item &gt;= <span class="hljs-number">18</span>;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.数组长度相等的基础</span><br>    <span class="hljs-comment">// 2.判断数组1和数组2的成员是否相同</span><br>    <span class="hljs-comment">// 3.every()函数对数组的每一项执行函数，如果都满足返回true</span><br>    <span class="hljs-comment">// 4.some()函数对数组的每一项执行函数，如果有一项满足返回true</span><br>    <span class="hljs-keyword">return</span> arr1.length === arr2.length &amp;&amp; arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item === arr2[index];<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="二、reduce"><a href="#二、reduce" class="headerlink" title="二、reduce"></a>二、reduce</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.reduce()方法，输出数组的总和</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceFun</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> result + item;<br>    &#125;, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(reduceFun(arr1));<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattens</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-comment">// reduce()函数</span><br>    <span class="hljs-comment">// 1.reduce 包含2个参数，回调函数，初始值arr.reduce(callback,[initialValue])</span><br>    <span class="hljs-comment">// 2.回调函数包含4个参数 </span><br>    <span class="hljs-comment">// total初始值，或者计算结束后的返回值 必须</span><br>    <span class="hljs-comment">// currentValue 当前元素             必须</span><br>    <span class="hljs-comment">// currentIndex 当前元素的下标</span><br>    <span class="hljs-comment">// arr          当前元素所属的数组对象</span><br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;result:&#x27;+ result);</span><br>        <span class="hljs-comment">// console.log(&#x27;item:&#x27;+ item);</span><br>        <span class="hljs-keyword">return</span> result.concat(<span class="hljs-built_in">Array</span>.isArray(item) ? flatten(item) : item)<br>    &#125;, [])<br>&#125;<br><span class="hljs-built_in">console</span>.log(flattens([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])); <span class="hljs-comment">//[1,2,2,3]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02快速排序</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">var</span> left = []; <span class="hljs-comment">// 左边小容器</span><br>    <span class="hljs-keyword">var</span> right = []; <span class="hljs-comment">// 右边大容器</span><br>    <span class="hljs-keyword">var</span> k = arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 第一个值是基准</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= k) &#123;<br>            left.push(arr[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right.push(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 继续递归左右容器</span><br>    <span class="hljs-keyword">return</span> quickSort(left).concat([k], quickSort(right));<br><span class="hljs-comment">// &#125;方法二：</span><br><span class="hljs-keyword">const</span> quickSort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> sort = <span class="hljs-function">(<span class="hljs-params">arr, left = <span class="hljs-number">0</span>, right = arr.length - <span class="hljs-number">1</span></span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<span class="hljs-comment">//如果左边的索引大于等于右边的索引说明整理完毕</span><br>      <span class="hljs-keyword">return</span><br>     &#125;<br>    <span class="hljs-keyword">let</span> i = left<br>    <span class="hljs-keyword">let</span> j = right<br>    <span class="hljs-keyword">const</span> baseVal = arr[j] <span class="hljs-comment">// 取无序数组最后一个数为基准值</span><br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<span class="hljs-comment">//把所有比基准值小的数放在左边大的数放在右边</span><br>     <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= baseVal) &#123; <span class="hljs-comment">//找到一个比基准值大的数交换</span><br>      i++<br>     &#125;<br>     arr[j] = arr[i] <span class="hljs-comment">// 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）</span><br>     <span class="hljs-keyword">while</span> (j &gt; i &amp;&amp; arr[j] &gt;= baseVal) &#123; <span class="hljs-comment">//找到一个比基准值小的数交换</span><br>      j--<br>    &#125;<br>     arr[i] = arr[j] <span class="hljs-comment">// 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）</span><br>    &#125;<br>    arr[j] = baseVal <span class="hljs-comment">// 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）</span><br>    sort(arr, left, j-<span class="hljs-number">1</span>) <span class="hljs-comment">// 将左边的无序数组重复上面的操作</span><br>    sort(arr, j+<span class="hljs-number">1</span>, right) <span class="hljs-comment">// 将右边的无序数组重复上面的操作</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> newArr = array.concat() <span class="hljs-comment">// 为了保证这个函数是纯函数拷贝一次数组</span><br>    sort(newArr)<br>    <span class="hljs-keyword">return</span> newArr<br>   &#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">76</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">49</span>];<br><span class="hljs-built_in">console</span>.log(quickSort(arr)); <span class="hljs-comment">// [13, 27, 38, 49,49, 65, 76, 97 ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02数组相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr1.length != arr2.length) &#123; <span class="hljs-comment">//长度不同</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123; <span class="hljs-comment">// 依次遍历数组元素</span><br>        <span class="hljs-keyword">if</span> (arr1[i] !== arr2[i]) &#123; <span class="hljs-comment">// 判断是否相等，用了强不等于</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<span class="hljs-comment">// false</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.数组长度相等的基础</span><br>    <span class="hljs-comment">// 2.判断数组1和数组2的成员是否相同</span><br>    <span class="hljs-comment">// 3.every()函数对数组的每一项执行函数，如果都满足返回true</span><br>    <span class="hljs-comment">// 4.some()函数对数组的每一项执行函数，如果有一项满足返回true</span><br>    <span class="hljs-keyword">return</span> arr1.length === arr2.length &amp;&amp; arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item === arr2[index];<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02数组扁平化</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：数组扁平化，如果是数字，就放入数组，如果是数组，递归处理</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], <span class="hljs-number">9</span>], <span class="hljs-number">10</span>, [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123; <span class="hljs-comment">// 参数要传值，不然会导致栈无穷大</span><br>    <span class="hljs-keyword">let</span> flatArr = []; <span class="hljs-comment">//避免定义全局变量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> arr[i] == <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>            flatArr.push(arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr[i])) &#123; <span class="hljs-comment">// 如果是数组</span><br>            flatArr = flatArr.concat(flatten(arr[i]));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flatArr;<br>&#125;<br><span class="hljs-comment">// console.log(flatten(arr));</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattens</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-comment">// reduce()函数</span><br>    <span class="hljs-comment">// 1.reduce 包含2个参数，回调函数，初始值arr.reduce(callback,[initialValue])</span><br>    <span class="hljs-comment">// 2.回调函数包含4个参数 </span><br>    <span class="hljs-comment">// total初始值，或者计算结束后的返回值 必须</span><br>    <span class="hljs-comment">// currentValue 当前元素             必须</span><br>    <span class="hljs-comment">// currentIndex 当前元素的下标</span><br>    <span class="hljs-comment">// arr          当前元素所属的数组对象</span><br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;result:&#x27;+ result);</span><br>        <span class="hljs-comment">// console.log(&#x27;item:&#x27;+ item);</span><br>        <span class="hljs-keyword">return</span> result.concat(<span class="hljs-built_in">Array</span>.isArray(item) ? flatten(item) : item)<br>    &#125;, [])<br>&#125;<br><span class="hljs-built_in">console</span>.log(flattens([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-vue3.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>选择安装了vue3.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720093125.png" alt="image-20210720093124295"></p></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091318.png" alt="image-20210720091317087"></p></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091346.png" alt="image-20210720091346033"></p><h2 id="三、vue3-0特点"><a href="#三、vue3-0特点" class="headerlink" title="三、vue3.0特点"></a>三、vue3.0特点</h2><ol><li><p>vue3.0的组件导入方式</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720092859.png" alt="image-20210720092858938"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;Elementplus&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./element-ui&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><br><span class="hljs-keyword">const</span> app = createApp(App);<br><span class="hljs-comment">// 调用</span><br>Elementplus(app);<br><span class="hljs-comment">// 使用</span><br>createApp(App).use(Elementplus).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>vue3.0采用按需引入element-plus的方式，安装插件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;babel-plugin-import&quot;</span>: <span class="hljs-string">&quot;^1.13.3&quot;</span>,<br><span class="hljs-built_in">npm</span> install babel-plugin-<span class="hljs-keyword">import</span> -D<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
      <tag>实战练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-vue2.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>默认选择安装了vue2.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721181505.png" alt="image-20210721181457020"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;header-wrapper&quot;&gt;<br>        &lt;div class=&quot;header-item&quot;&gt;<br>            &lt;div class=&quot;img-item&quot;&gt;<br>                &lt;img src=&quot;../assets/img/kjj.png&quot;/&gt;<br>            &lt;/div&gt;<br>            &lt;span&gt;Vue2.0 + TypeScript&lt;/span&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;select-item&quot;&gt;<br>            &lt;el-dropdown trigger=&quot;click&quot; @command=&quot;doNew&quot;&gt;<br>                  &lt;span class=&quot;el-dropdown-link&quot;&gt;<br>                    新建&lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt;<br>                  &lt;/span&gt;<br>                &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                    &lt;el-dropdown-item icon=&quot;el-icon-plus&quot;&gt;文本便签&lt;/el-dropdown-item&gt;<br>                &lt;/el-dropdown-menu&gt;<br>            &lt;/el-dropdown&gt;<br>            &lt;div class=&quot;space-item&quot;&gt;&lt;/div&gt;<br>            &lt;div&gt;<br>                &lt;el-dropdown trigger=&quot;click&quot; @command=&quot;doChange&quot; &gt;<br>                    &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(-1)&quot;&gt;<br>                      &lt;span class=&quot;el-dropdown-link&quot;&gt;<br>                        全部&lt;i class=&quot;el-icon-caret-bottom el-icon--right&quot;&gt;&lt;/i&gt;<br>                      &lt;/span&gt;<br>                    &lt;/el-badge&gt;<br>                    &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=-1&gt;<br>                            全部<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(-1)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=0 divided&gt;<br>                            工作<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(0)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=1&gt;<br>                            生活<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(1)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=2&gt;<br>                            学习<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(2)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                    &lt;/el-dropdown-menu&gt;<br>                &lt;/el-dropdown&gt;<br>            &lt;/div&gt;<br><br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>    import &#123;Vue, Component&#125; from &#x27;vue-property-decorator&#x27;;<br>    import ItemData from &quot;@/model/ItemData&quot;;<br><br>    @Component<br>    export default class MenuBar extends Vue &#123;<br>        value: string = &#x27;&#x27;<br><br>        //点击新建，出现编辑框<br>        doNew() &#123;<br>            // 点击新增初始化tranMemo，不然transMemo的初值是null<br>            this.$store.state.transMemo = new ItemData(-1, 0);<br>            this.$store.state.isshow = true<br>        &#125;<br><br>        doFilter(cid: number): number &#123;<br>            if (cid === -1) &#123;<br>                return this.$store.state.actionHelper.memoList.length<br>            &#125; else &#123;<br>                return this.$store.state.actionHelper.memoList.filter((ele) =&gt; &#123;<br>                    return ele.categoryId == cid;<br>                &#125;).length<br>            &#125;<br><br>        &#125;<br>        doChange(val)&#123;<br>            this.$store.state.fliterCateId = val;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>    .header-wrapper &#123;<br>        width: 100%;<br>        display: flex;<br>        justify-content: space-between;<br>        align-items: center;<br><br>        .space-item &#123;<br>            height: 60px;<br>            width: 40px;<br>            background-color: #409EFF;<br>        &#125;<br><br>        .header-item &#123;<br>            display: flex;<br>            align-items: center;<br>            height: 60px;<br><br>            .img-item &#123;<br>                height: 40px;<br>                width: 40px;<br><br>                img &#123;<br>                    height: 100%;<br>                    width: 100%;<br>                    border-radius: 50%;<br>                    border: 1px solid red;<br>                &#125;<br>            &#125;<br><br>            span &#123;<br>                display: inline-block;<br>                font-size: 20px;<br>                font-weight: bold;<br>                color: #fff;<br>                margin-left: 10px;<br>            &#125;<br><br>        &#125;<br><br>        .select-item &#123;<br>            display: flex;<br>            flex-direction: row;<br>            align-items: center;<br>        &#125;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721181616.png" alt="image-20210721181615603"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;memo-container&quot;&gt;<br>    &lt;div class=&quot;memo&quot;&gt;<br>      &lt;div class=&quot;mark&quot;&gt;&lt;/div&gt;<br>      &lt;div class=&quot;memo-heading&quot;&gt;<br>        &lt;h5 class=&quot;title&quot;&gt;&#123;&#123; memo.title &#125;&#125;&lt;/h5&gt;<br>        &lt;ul class=&quot;tools&quot;&gt;<br>          &lt;li class=&quot;edit&quot; @click=&quot;showEdit&quot;&gt;&lt;/li&gt;<br>          &lt;li class=&quot;delete&quot; @click=&quot;doDel&quot;&gt;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>      &lt;h6 class=&quot;memo-info&quot;&gt;<br>        &lt;span class=&quot;timeStamp&quot;&gt;&#123;&#123; memo.createTime &#125;&#125;&lt;/span&gt;<br>        &lt;span class=&quot;category&quot;<br>          &gt;分类:&#123;&#123;<br>            $store.state.aHelper.getCategoryName(memo.categoryId)<br>          &#125;&#125;&lt;/span<br>        &gt;<br>      &lt;/h6&gt;<br>      &lt;div class=&quot;content&quot;&gt;<br>        &lt;div class=&quot;text&quot;&gt;&#123;&#123; memo.content &#125;&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot;&gt;<br>import ItemData from &quot;@/model/ItemData&quot;;<br>import &#123; Vue, Component, Prop &#125; from &quot;vue-property-decorator&quot;;<br>@Component<br>export default class MemoItem extends Vue &#123;<br>  @Prop() memo!: ItemData;<br>  doDel(): void &#123;<br>    if (!window.confirm(`确认删除【$&#123;this.memo.title&#125;】的笔记吗?`)) return;<br>    //   确认后,就删除<br>    this.$store.state.aHelper.remove(this.memo.id);<br>  &#125;<br>  showEdit(): void &#123;<br>    // 1.创建副本<br>    let newMemo = JSON.parse(JSON.stringify(this.memo));<br>    // 2.传递给transmemo<br>    this.$store.commit(&#x27;showEditMemo&#x27;, newMemo);<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721182011.png" alt="image-20210721182010265"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;el-dialog<br>            :visible.sync=&quot;$store.state.isshow&quot;<br>            width=&quot;30%&quot;<br>            append-to-body<br>            :show-close=&quot;false&quot;&gt;<br>        &lt;el-card class=&quot;box-card&quot;&gt;<br>            &lt;template #header&gt;<br>                &lt;div class=&quot;card-header&quot;&gt;<br>                    &lt;el-input type=&quot;text&quot; placeholder=&quot;标题&quot; v-model=&quot;memo.title&quot;&gt;&lt;/el-input&gt;<br>                    &lt;el-dropdown @command=&quot;handleCommand&quot; class=&quot;el-dropdown-item&quot;&gt;<br>                          &lt;span class=&quot;el-dropdown-link&quot;&gt;&#123;&#123;memo.categoryId  == 0 ? &#x27;工作&#x27;: memo.categoryId == 1? &#x27;生活&#x27;:&#x27;学习&#x27; &#125;&#125;<br>                            &lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt;<br>                          &lt;/span&gt;<br>                        &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                            &lt;el-dropdown-item command=0&gt;工作&lt;/el-dropdown-item&gt;<br>                            &lt;el-dropdown-item command=1&gt;生活&lt;/el-dropdown-item&gt;<br>                            &lt;el-dropdown-item command=2&gt;学习&lt;/el-dropdown-item&gt;<br>                        &lt;/el-dropdown-menu&gt;<br>                    &lt;/el-dropdown&gt;<br>                    &lt;div class=&quot;el-button-item&quot;&gt;<br>                        &lt;el-button class=&quot;button&quot; type=&quot;text&quot; @click=&quot;doSave&quot; icon=&quot;el-icon-message&quot;&gt;&lt;/el-button&gt;<br>                        &lt;el-button class=&quot;button&quot; type=&quot;text&quot; @click=&quot;doCancel&quot; icon=&quot;el-icon-circle-close&quot;&gt;&lt;/el-button&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/template&gt;<br>            &lt;div&gt;<br>                &lt;el-input<br>                        type=&quot;textarea&quot;<br>                        :rows=&quot;2&quot;<br>                        placeholder=&quot;请输入内容&quot;<br>                        v-model=&quot;memo.content&quot;&gt;<br>                &lt;/el-input&gt;<br>            &lt;/div&gt;<br>        &lt;/el-card&gt;<br>    &lt;/el-dialog&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>    import &#123;Vue, Component&#125; from &#x27;vue-property-decorator&#x27;;<br>    import ItemData from &quot;@/model/ItemData&quot;;<br><br>    @Component<br>    export default class MemoEditor extends Vue &#123;<br>        memo: ItemData = new ItemData(-1, 0);<br><br>        created(): void &#123;<br>            this.memo = this.$store.state.transMemo<br>        &#125;<br><br>        handleCommand(val) &#123;<br>            this.memo.categoryId = val;<br>        &#125;<br><br>        doCancel() &#123;<br>            this.$store.state.isshow = false<br>        &#125;<br><br>        doSave() &#123;<br>            if (this.memo &amp;&amp; this.memo.categoryId &gt; -1 &amp;&amp; this.memo.title.trim().length &gt; 0 &amp;&amp; this.memo.content.trim().length &gt; 0) &#123;<br>                if (this.memo.id &lt;= -1) &#123;<br>                    this.$store.state.actionHelper.addData(this.memo)<br>                &#125; else &#123;<br>                    this.$store.state.actionHelper.editData(this.memo)<br>                &#125;<br>                this.$store.state.isshow = false<br>            &#125; else &#123;<br>                window.alert(&#x27;数据输入不完整！&#x27;)<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>    .item &#123;<br>        margin-bottom: 18px;<br>        font-size: 14px;<br>    &#125;<br><br>    /deep/ .el-card__header &#123;<br>        padding: 10px 0 10px 10px;<br>    &#125;<br><br>    .card-header &#123;<br>        display: flex;<br>        justify-content: space-between;<br>        align-items: center;<br>    &#125;<br><br>    /deep/ .el-card__body &#123;<br>        padding: 10px;<br>    &#125;<br><br>    .second-item &#123;<br>        font-size: 14px;<br>        display: flex;<br>        justify-content: space-between;<br>        padding: 5px 10px;<br>    &#125;<br><br>    /deep/ .el-textarea__inner &#123;<br>        height: 300px;<br>        resize: none;<br>    &#125;<br><br>    .el-card &#123;<br>        width: 100%;<br>    &#125;<br><br>    .el-button-item &#123;<br>        width: 80px;<br>    &#125;<br><br>    .el-dropdown-item &#123;<br>        width: 120px;<br>        margin-left: 15px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol><li>   MenuList组件</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MemoItem</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in filterMemo()&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">:memo</span>=<span class="hljs-string">&quot;item&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">import</span> &#123;Vue, Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-property-decorator&#x27;</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> MemoItem <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/MemoItem.vue&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">import</span> ItemData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/model/ItemData&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">    @Component(&#123;</span><br><span class="javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">            MemoItem</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vue</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-attr">memoArr</span>:<span class="hljs-built_in">Array</span>&lt;ItemData&gt; = <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList;</span><br><span class="javascript">        filterMemo():<span class="hljs-built_in">Array</span>&lt;ItemData&gt; &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.$store.state.fliterCateId == -<span class="hljs-number">1</span>)&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.memoArr;</span><br><span class="javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">               <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.memoArr.filter(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;</span><br><span class="javascript">                  <span class="hljs-keyword">return</span>  item.categoryId == <span class="hljs-built_in">this</span>.$store.state.fliterCateId</span><br><span class="javascript">               &#125;)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.list-item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、vue2-0特点"><a href="#三、vue2-0特点" class="headerlink" title="三、vue2.0特点"></a>三、vue2.0特点</h2><ol><li><p>vue2.0的组件导入方式，采用注解</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091554.png" alt="image-20210720091553890"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br>Vue.use(ElementUI)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、实现功能"><a href="#四、实现功能" class="headerlink" title="四、实现功能"></a>四、实现功能</h2><ol><li><p>创建跨组件共享数据文件store</p><p>代码：创建跨组件共享数据文件store</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import Vuex from &#x27;vuex&#x27;<br>import ActionHelper from &quot;@/store/ActionHelper&quot;;<br><br>Vue.use(Vuex)<br>let store = new Vuex.Store(&#123;<br>    state: &#123;<br>        isshow: false,<br>        actionHelper: new ActionHelper(),<br>        transMemo: null,// 传递数据的桥梁<br>        fliterCateId: -1<br>    &#125;,<br>    mutations: &#123;<br>        showEditMemo(state: any, editMemo: any) &#123;<br>            state.transMemo = editMemo;<br>            state.isshow = true;<br>        &#125;<br>    &#125;<br>&#125;)<br>export default store<br><br></code></pre></td></tr></table></figure></li><li><p>设计便签的数据模型：MemoItem类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">class ItemData &#123;<br>    id: number<br>    categoryId: number<br>    title: string<br>    content: string<br>    createTime: string<br><br>    constructor(id: number = -1, categoryId: number = -1, title: string = &#x27;&#x27;, content: string = &#x27;&#x27;, createTime: string) &#123;<br>        this.id = id;<br>        this.categoryId = categoryId;<br>        this.title = title;<br>        this.content = content;<br>        this.createTime =this.toselfDate(Date.now()) ;<br>    &#125;<br><br>    toselfDate(dateSpan: number): string &#123;<br>        let date = new Date(dateSpan);<br>        let str = date.getFullYear() + &#x27;-&#x27; + (date.getMonth() + 1) + &#x27;-&#x27; + date.getDate() + &#x27; &#x27; + date.getHours() + &#x27;:&#x27; + date.getMinutes();<br>        return str;<br><br>    &#125;<br>&#125;<br>export  default  ItemData<br></code></pre></td></tr></table></figure></li><li><p>设计枚举的数据模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">enum CateEnum &#123;<br>    Work,<br>    Life = 1,<br>    Study<br>&#125;<br>export  default CateEnum<br></code></pre></td></tr></table></figure></li><li><p>创建操作localstorage的类DataHelper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs vue">// DataHelper主要实现对localstorage的操作<br>// 0.构造类<br>class DataHelper &#123;<br>    dataKey: string<br>    primaryKey: string<br><br>    constructor(dataKey: string, primaryKey: string) &#123;<br>        this.dataKey = dataKey;<br>        this.primaryKey = primaryKey<br>    &#125;<br><br>    // 1.读数据<br>    readData(): any &#123;<br>        // 1.读取数据<br>        let strData: string | null = localStorage.getItem(this.dataKey);<br>        // 2.将json转成json对象<br>        let arrData: any = [];<br>        if (strData != null) &#123;<br>            arrData = JSON.parse(strData);<br>        &#125;<br>        return arrData;<br>    &#125;<br><br>    // 2.存数据<br>    saveData(arrData: Array&lt;Object&gt;): void &#123;<br>        // 1.将json对象装成字符串<br>        let strData: string = JSON.stringify(arrData);<br>        // 2.存储<br>        localStorage.setItem(this.dataKey, strData);<br><br>    &#125;<br><br>    // 3.新增数据<br>    addData(newDataObj: any): number &#123;<br>        //  1. 读取本地现有的数据<br>        let dataArray = this.readData();<br>        if (dataArray == null) &#123;<br>            dataArray = [];<br>        &#125;<br>        //  3.自动生成主键，id<br>        let newId = dataArray.length &gt; 0 ? dataArray[dataArray.length - 1].id + 1 : 1;<br><br>        //  4.将id添加到对象中<br>        dataArray.id = newId;<br>        //  5.将数组保存到本地<br><br>        dataArray.push(newDataObj);<br>        this.saveData(dataArray);<br>        //  6.返回newId的值<br>        return newId;<br>    &#125;<br><br>    // 4.删除数据<br>    removeData(id: string | number): boolean &#123;<br>        // 1.获取本地数据<br>        let arrData: any = this.readData();<br>        // 2.查找下标 删除<br>        let index = arrData.findIndex((ele: any) =&gt; &#123;<br>            return ele[this.primaryKey] == id;<br>        &#125;)<br>        // 3.重新保存删除后的数据<br>        if (index &gt; -1) &#123;<br>            arrData.splice(index, 1);<br>            this.saveData(arrData);<br>            return true;<br>        &#125;<br>        return false;<br>    &#125;<br>&#125;<br>export  default  DataHelper;<br></code></pre></td></tr></table></figure></li><li><p>在main.ts测试DataHelper的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 0.测试构造的itemdata类<br>// let itemData = new ItemData(1,1,&#x27;标题&#x27;,&#x27;内容&#x27;);<br>// console.log(itemData)<br>// 1.测试构造的枚举类型<br>// let itemData = new ItemData(1,CateEnum.Work,&#x27;标题&#x27;,&#x27;内容&#x27;);<br>// console.log(itemData)<br>// ****************DataHelper***********<br>// 2.测试新增数据(新增的数据id都是-1)<br>// let itemData = new ItemData();<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;, &#x27;id&#x27;);<br>// console.log(dh.addData(itemData))<br>// 3.删除数据<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;,&#x27;id&#x27;);<br>// dh.removeData(&#x27;-1&#x27;);<br>// 4.测试读数据<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;,&#x27;id&#x27;);<br>// console.log(dh.readData());<br></code></pre></td></tr></table></figure></li><li><p>创建操作类ActionHelper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vue">import DataHelper from &quot;@/store/DataHelper&quot;;<br>import ItemData from &quot;@/model/ItemData&quot;;<br><br>class ActionHelper &#123;<br>    // 1.在Datahelper的基础上再次封装<br>    dh: DataHelper = new DataHelper(&#x27;keyData&#x27;, &#x27;id&#x27;);<br>    // 2.定义一个便签数组<br>    memoList: Array&lt;ItemData&gt;;<br><br>    constructor() &#123;<br>        // 便签数组的初始化数据，就是从本身读取数据，相当于vue的create方法，读取数据<br>        this.memoList = this.dh.readData();<br>    &#125;<br><br>    // 读取数据<br>    readData(): Array&lt;ItemData&gt; &#123;<br>        let arrData = this.dh.readData();<br>        // 将获取的数据，装成itemdata类型<br>        let arrItem = arrData.map((ele) =&gt; &#123;<br>            // @ts-ignore<br>            let item: ItemData = new ItemData(); // item是itemData类型的空对象<br>            // 0.第一种方式 // 给空对象赋值<br>            // item = ele;<br>            // 1.第二种方式 // 给空对象赋值<br>            item.id = ele.id;<br>            item.categoryId = ele.categoryId;<br>            item.title = ele.title;<br>            item.content = ele.content;<br>            item.createTime = ele.createTime;<br>            return item;<br>        &#125;)<br>        return arrItem;<br>    &#125;<br><br>    // 新增<br>    addData(item: ItemData): number &#123;<br>        // 0.新增笔记到本地<br>        item.id = this.dh.addData(item);<br>        //  1.将笔记添加到memoList<br>        this.memoList.push(item);<br>        //  2.将笔记数组从新保存本地<br>        this.dh.saveData(this.memoList);<br>        return item.id;<br>    &#125;<br><br>    // 修改<br>    editData(item: ItemData): void &#123;<br>        // 0.先找到下标<br>        let editItem = this.memoList.find((ele) =&gt; &#123;<br>            return ele.id == item.id;<br>        &#125;)<br>        //    1.修改对象<br>        if (editItem) &#123;<br>            editItem.categoryId = item.categoryId;<br>            editItem.title = item.title;<br>            editItem.content = item.content;<br>        &#125;<br>        //    2.保存对象<br>        this.dh.saveData(this.memoList);<br>    &#125;<br><br>    // 删除<br>    delData(id: number): void &#123;<br>        // 0.找下标<br>        let index = this.memoList.findIndex((ele) =&gt; &#123;<br>            return ele.id == id;<br>        &#125;)<br>        if (index &gt; -1) &#123;<br>            this.memoList.splice(index, 1);<br>        &#125;<br>        this.dh.saveData(this.memoList);<br>    &#125;<br>&#125;<br><br>export default ActionHelper;<br></code></pre></td></tr></table></figure></li><li><p>在main.ts中测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">//**************ActionHelper*************<br>// 0.测试新增(数据的id正常递增)<br>// let ah:ActionHelper = new ActionHelper();<br>// let item:ItemData = new ItemData();<br>// ah.addData(item);<br>// 1.测试修改（修改不存在的对象，会覆盖）<br>// let ah:ActionHelper = new ActionHelper();<br>// let item:ItemData = new ItemData(1,1,&#x27;我爱你11&#x27;,&#x27;我爱学习&#x27;);<br>// ah.editData(item);<br>// 2.测试删除<br>// let ah:ActionHelper = new ActionHelper();<br>// ah.delData(1);<br></code></pre></td></tr></table></figure></li><li><p>实现新增功能</p><ul><li><p>点击新增，实现弹框</p><p>点击新增的时候，设置全局的isshow值是true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">//点击新建，出现编辑框<br>doNew() &#123;<br>    // 点击新增初始化tranMemo，不然transMemo的初值是null<br>    this.$store.state.transMemo = new ItemData(-1, 0);<br>    this.$store.state.isshow = true<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>实现保存功能</p><ul><li>保存第一步对数据进行校验</li><li>分为新增保存</li><li>分为修改保存</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">doSave</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.memo &amp;&amp; <span class="hljs-built_in">this</span>.memo.categoryId &gt; -<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">this</span>.memo.title.trim().length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">this</span>.memo.content.trim().length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.memo.id &lt;= -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">this</span>.$store.state.actionHelper.addData(<span class="hljs-built_in">this</span>.memo)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.$store.state.actionHelper.editData(<span class="hljs-built_in">this</span>.memo)<br>        &#125;<br>        <span class="hljs-built_in">this</span>.$store.state.isshow = <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">&#x27;数据输入不完整！&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现修改功能</p><ul><li><p>点击修改的时候，出现弹框</p></li><li><p>修改时，弹框内出现数据</p><p>在点击修改的时候，创建当前标签数据的副本，并且把数据传到共享数据文件中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts">doEdit():<span class="hljs-built_in">void</span>&#123;<br>    <span class="hljs-comment">// 创建副本</span><br>    <span class="hljs-keyword">let</span> newMemo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">this</span>.memo));<br>    <span class="hljs-comment">// 提交数据到桥梁</span><br>    <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;showEditMemo&#x27;</span>,newMemo);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>展示组件MemoEditor的时候，在created方法中获取标签副本的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">created(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.memo = <span class="hljs-built_in">this</span>.$store.state.transMemo<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>实现删除功能</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-title">doDel</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.confirm(<span class="hljs-string">`确认删除【<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.memo.title&#125;</span>的标签吗？】`</span>)) <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">this</span>.$store.state.actionHelper.delData(<span class="hljs-built_in">this</span>.memo.id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>统计类别的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">doFilter(cid: number): number &#123;<br>    <span class="hljs-keyword">if</span> (cid === -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList.length<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList.filter(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> ele.categoryId == cid;<br>        &#125;).length<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>点击不同的类别，展示不同的便签内容</p><ul><li>把分类的值，传给全局的变量，fliterCateId</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs s">doChange(val)&#123;<br>    this.$store.state.fliterCateId = val;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在memoList展示便签的时候，做过滤处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">filterMemo():<span class="hljs-built_in">Array</span>&lt;ItemData&gt; &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.$store.state.fliterCateId == -<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.memoArr;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.memoArr.filter(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span>  item.categoryId == <span class="hljs-built_in">this</span>.$store.state.fliterCateId<br>   &#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、gitee共享"><a href="#五、gitee共享" class="headerlink" title="五、gitee共享"></a>五、gitee共享</h2><p><a href="https://gitee.com/porous-crystal/vue20-ys.git">https://gitee.com/porous-crystal/vue20-ys.git</a></p><h2 id="六、视频展示"><a href="#六、视频展示" class="headerlink" title="六、视频展示"></a>六、视频展示</h2><iframe src="//player.bilibili.com/player.html?aid=674340137&bvid=BV1QU4y1n7oP&cid=374235256&page=1" scrolling="no" border="0"  height="500" width="670" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
      <tag>实战练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-便签项目</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、搭建项目环境"><a href="#一、搭建项目环境" class="headerlink" title="一、搭建项目环境"></a>一、搭建项目环境</h2><ol><li><p>本人安装的是vue 2.x的环境,先卸载本地的vue-cli</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm uninstall vue-cli -g<br>npm uninstall vue-cli<br></code></pre></td></tr></table></figure></li><li><p>安装 vue 3.x的脚手架</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm install <span class="hljs-meta">@vue</span>/cli -g<br></code></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">vue create XXX(xxx可任意取名，是自己的项目名)<br></code></pre></td></tr></table></figure></li><li><p>创建完成,在vscode环境下，编译</p></li><li><p>安装vue/typescript</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">vue add <span class="hljs-meta">@vue</span>/typescript<br></code></pre></td></tr></table></figure></li><li><p>安装vuex</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">npm i vuex<br></code></pre></td></tr></table></figure></li><li><p>npm run serve 运行项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111441.png" alt="image-20210718111431874"></p></li></ol><h2 id="二、MenuBar组件"><a href="#二、MenuBar组件" class="headerlink" title="二、MenuBar组件"></a>二、MenuBar组件</h2><ol><li><p>public文件导入imgs、common.css 文件</p></li><li><p>index.html引入相关配置</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111817.png" alt="image-20210718111814438"></p></li><li><p>创建MenuBar.vue 文件，将MenuBar组件抛出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111932.png" alt="image-20210718111929831"></p></li><li><p>在App.vue中引入组件</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112034.png" alt="image-20210718112031898"></p></li><li><p>运行</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112114.png" alt="image-20210718112112983"></p></li></ol><h2 id="三、ItemData、CateEnum数据模型"><a href="#三、ItemData、CateEnum数据模型" class="headerlink" title="三、ItemData、CateEnum数据模型"></a>三、ItemData、CateEnum数据模型</h2><ol><li><p>ItemData封装了便签所有内容的类</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121305.png" alt="image-20210718121304705"></p></li><li><p>对日期进行处理，封装一个toSelfDataStr的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121412.png" alt="image-20210718121411435"></p></li><li><p>将ItemData、CateEnum以模块的形式导出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121449.png" alt="image-20210718121445269"></p></li><li><p>CateEnum对分类进行枚举</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121506.png" alt="image-20210718121504968"></p></li><li><p>在main.ts 进行测试</p><p>导入2个数据模型：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121631.png" alt="image-20210718121630607"></p><p>测试数据：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121654.png" alt="image-20210718121653652"></p><p>结果：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121716.png" alt="image-20210718121715646"></p></li></ol><h2 id="四、封装操作类：ActionHelper、DataHelper"><a href="#四、封装操作类：ActionHelper、DataHelper" class="headerlink" title="四、封装操作类：ActionHelper、DataHelper"></a>四、封装操作类：ActionHelper、DataHelper</h2><ol><li><p>DataHelper用评论项目的</p></li><li><p>ActionHelper主要进行业务逻辑的操作</p><p>定义一个memoList，处理便签数组，初始化时，将本地的数组赋值给memoList</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124923.png" alt="image-20210718124922846"></p><p>封装读取本地数据的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124958.png" alt="image-20210718124957796"></p></li><li><p>main.ts 测试数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125512.png" alt="image-20210718125511997"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125525.png" alt="image-20210718125525035"></p></li></ol><h2 id="五、ActionHelper增加业务逻辑，add、edit、remove"><a href="#五、ActionHelper增加业务逻辑，add、edit、remove" class="headerlink" title="五、ActionHelper增加业务逻辑，add、edit、remove"></a>五、ActionHelper增加业务逻辑，add、edit、remove</h2><ol><li><p>ActionHelper增加对文件add、edit、remove操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155200.png" alt="image-20210718155159203"></p></li><li><p>在main.ts中测试</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155501.png" alt="image-20210718155459058"></p></li></ol><h2 id="六、组件之间可以共享数据，基于Vuex"><a href="#六、组件之间可以共享数据，基于Vuex" class="headerlink" title="六、组件之间可以共享数据，基于Vuex"></a>六、组件之间可以共享数据，基于Vuex</h2><ol><li><pre><code>  state共享对象和数据，mutations共享方法</code></pre></li></ol><p>   <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162101.png" alt="image-20210718162100273"></p><ol start="2"><li><p>在main.ts 全局注册</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162141.png" alt="image-20210718162140393"></p></li><li><p>使用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162205.png" alt="image-20210718162205010"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162236.png" alt="image-20210718162234966"></p></li></ol><h2 id="七、构建便签列表组件ItemList"><a href="#七、构建便签列表组件ItemList" class="headerlink" title="七、构建便签列表组件ItemList"></a>七、构建便签列表组件ItemList</h2><ol><li><p>创建ItemList文件</p></li><li><p>编写组件类，获取便签的数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718164042.png" alt="image-20210718164041544"></p></li></ol><h2 id="八、构建便签项MemoItem"><a href="#八、构建便签项MemoItem" class="headerlink" title="八、构建便签项MemoItem"></a>八、构建便签项MemoItem</h2><ol><li><p>MemoItem是MemoList 的子组件</p></li><li><p>创建prop接收父组件的传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718170807.png" alt="image-20210718170806446"></p></li><li><p>父组件传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171108.png" alt="image-20210718171107567"></p></li><li><p>ActionHelper添加翻译分类的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171241.png" alt="image-20210718171240621"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171305.png" alt="image-20210718171304877"></p></li></ol><h2 id="九、MemoItem的删除"><a href="#九、MemoItem的删除" class="headerlink" title="九、MemoItem的删除"></a>九、MemoItem的删除</h2><ol><li><p>创建删除方法，绑定到按钮</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718172923.png" alt="image-20210718172920028"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718173036.png" alt="image-20210718173035896"></p></li></ol><h2 id="十、创建新增对话框的组件"><a href="#十、创建新增对话框的组件" class="headerlink" title="十、创建新增对话框的组件"></a>十、创建新增对话框的组件</h2><ol><li><p>创建MemoEditor组件</p></li><li><p>创建全局的isshow属性</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195415.png" alt="image-20210718195414493"></p></li><li><p>设置新增按钮，展示新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210719000857.png" alt="image-20210719000856425"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195700.png" alt="image-20210718195659454"></p></li><li><p>MemoEditor的退出按钮，取消div的展示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195614.png" alt="image-20210718195613690"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195636.png" alt="image-20210718195633344"></p></li><li><p>实现新增：界面的按钮、文本框需要和memo建立关系，采用v-model实现双向绑定</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203130.png" alt="image-20210718203108285"></p></li><li><p>新增保存：0.进行数据校验，1.将数据保存到localstorage 2.隐藏新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203322.png" alt="image-20210718203321636"></p></li></ol><h2 id="十一、编写Edit功能"><a href="#十一、编写Edit功能" class="headerlink" title="十一、编写Edit功能"></a>十一、编写Edit功能</h2><ol><li><p>对编辑来说，第一步：获取已经有的数据</p></li><li><p>编辑内容</p></li><li><p>将编辑的内容保存到本地</p></li><li><p>使用vuex进行数据传递</p></li><li><p>点击编辑的时候，创建数据副本，并且传到vuex中</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224828.png" alt="image-20210718224827848"></p></li><li><p>vuex中建立方法，供组件调用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224936.png" alt="image-20210718224935837"></p></li><li><p>MemoEditor创建的时候，拿到数据，赋值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225115.png" alt="image-20210718225114919"></p></li><li><p>对新增和修改保存操作的梳理</p><p>新增的时候，初始化了参数id是-1，通过id判断操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225408.png" alt="image-20210718225406704"></p></li></ol><h2 id="十二、点击分类，展示页面"><a href="#十二、点击分类，展示页面" class="headerlink" title="十二、点击分类，展示页面"></a>十二、点击分类，展示页面</h2><ol><li><p>在vuex里创建全局数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234840.png" alt="image-20210718234839548"></p></li><li><p>写doFilterByCateId()方法，当点击不同的li,展示不同的分类list</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234938.png" alt="image-20210718234937947"></p></li><li><p>计算分类数封装doFilter()</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718235205.png" alt="image-20210718235204119"></p></li></ol><h2 id="十三、创建gitee、放到仓库上"><a href="#十三、创建gitee、放到仓库上" class="headerlink" title="十三、创建gitee、放到仓库上"></a>十三、创建gitee、放到仓库上</h2><p><a href="https://gitee.com/porous-crystal/vue-ts-memo-item.git">https://gitee.com/porous-crystal/vue-ts-memo-item.git</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
      <tag>实战练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue vue2.x</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20vue2.x/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20vue2.x/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue的安装"><a href="#一、vue的安装" class="headerlink" title="一、vue的安装"></a>一、vue的安装</h2><ol><li>在官网下载vue.min.js 然后在script标签中引入。</li><li>使用CDN方法，下载，然后在script标签中引入。</li><li>使用npm安装。</li></ol><h2 id="二、vue的目录结构"><a href="#二、vue的目录结构" class="headerlink" title="二、vue的目录结构"></a>二、vue的目录结构</h2><ol><li>build：是项目打包后的文件夹</li><li>config：配置目录，包括端口号等</li><li>node_modules: 项目的依赖模块</li><li>src：开发目录<ol><li>assets：放置图片等</li><li>components:组件文件</li><li>App.vue 项目入口文件</li><li>main.js 项目的核心文件</li></ol></li><li>static:静态资源目录，图片</li><li>test:测试目录，可以删除</li><li>.xxx文件：都是配置文件</li><li>index.html：首页入口文件</li><li>package.json:项目配置文件</li><li>README.md :项目的说明文档</li></ol><h2 id="三、Vue-js-起步"><a href="#三、Vue-js-起步" class="headerlink" title="三、Vue.js 起步"></a>三、Vue.js 起步</h2><ol><li>每个Vue应用都需要通过实例化Vue来实现。</li><li>Vue构造器中有一个el参数，他是DOM元素的id</li><li>data用于定义属性</li><li>methods用于定义函数</li><li>Vue实例被创建时，它向Vue的响应式系统中加入其data对象中能找到的所有属性</li></ol><h2 id="四、Vue-js-计算属性"><a href="#四、Vue-js-计算属性" class="headerlink" title="四、Vue.js 计算属性"></a>四、Vue.js 计算属性</h2><ol><li><p>methods和computed在效果上是一样的，</p></li><li><p>computed基于他的依赖缓存，只有相关依赖发生改变的时候才会重新获取值</p></li><li><p>methods在重新渲染的时候，函数会重新被调用执行</p></li><li><p>computed只有getter，但是在需要的时候可以加入set</p></li><li><p>computed和methods的比较</p></li><li><p>computed的依赖发生变化，会实时更新，methods只有触发才会调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        长度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;length&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        宽度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;width&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        面积：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;areas&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        和的值为:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">length</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">areas</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> areas = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    areas = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> areas;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144528.png" alt="image-20210716095112614"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144532.png" alt="image-20210716095200442"></p></li></ol><h2 id="五、Vue-js的监听属性"><a href="#五、Vue-js的监听属性" class="headerlink" title="五、Vue.js的监听属性"></a>五、Vue.js的监听属性</h2><ol><li><p>watch 监听响应数据的变化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        千米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;kilometers&quot;</span> /&gt;</span><br>        米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;meters&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#main&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-number">0</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.meters = <span class="hljs-built_in">this</span>.kilometers * <span class="hljs-number">1000</span>;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val / <span class="hljs-number">1000</span>;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        demo.$watch(<span class="hljs-string">&#x27;kilometers&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;info&quot;</span>).innerHTML = <span class="hljs-string">&quot;修改前值为: &quot;</span> + oldValue + <span class="hljs-string">&quot;，修改后值为: &quot;</span> + newValue;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="六、Vue-js-事件处理器"><a href="#六、Vue-js-事件处理器" class="headerlink" title="六、Vue.js 事件处理器"></a>六、Vue.js 事件处理器</h2><ol><li>v-on：进行事件的监听</li></ol><h2 id="七、Vue-js-组件"><a href="#七、Vue-js-组件" class="headerlink" title="七、Vue.js 组件"></a>七、Vue.js 组件</h2><ol><li><p>注册一个全局组件的语法</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">Vue.component(tagName, options)<br><span class="hljs-comment">// 组件</span><br><span class="hljs-params">&lt;tagName&gt;</span><span class="hljs-params">&lt;/tagName&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>prop子组件接受父组件传递的数据</p></li><li><p>动态props，使用v-bind在父组件绑定props的值，当父组件的值变化时，子组件也会变化</p></li><li><p>props提供验证，可以定制props的验证方式</p></li></ol><h2 id="八、自定义事件"><a href="#八、自定义事件" class="headerlink" title="八、自定义事件"></a>八、自定义事件</h2><ol><li>父组件通过props把值传给子组件</li><li>子组件想要把值传回去，就需要自定义事件</li><li>父组件使用v-on 监听子组件值的变化</li><li>子组件通过$emit触发事件</li><li>data必须是一个函数</li></ol><h2 id="九、Vue-js-路由"><a href="#九、Vue-js-路由" class="headerlink" title="九、Vue.js 路由"></a>九、Vue.js 路由</h2><ol><li><p>router的相关属性</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 同上 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;home&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;register&#x27;, query: &#123; plan: &#x27;private&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>replace 当点击时，会调用router.replace ,而不是router.push ，导航不会留下历史记录</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/abc&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">replace</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>append  在当前路径前添加路径，例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;relative/path&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">append</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>tag 将<router-link>渲染成某种标签</p></li><li><p>event 声明用来触发导航的事件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span> = <span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/route1&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">event</span> = <span class="hljs-string">&quot;mouseover&quot;</span>&gt;</span>Router Link 1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="十、Vue-js-混入"><a href="#十、Vue-js-混入" class="headerlink" title="十、Vue.js 混入"></a>十、Vue.js 混入</h2><ol><li>混入定义了一些可复用的方法或者计算属性</li><li>当组件混入对象时,所有混入对象选项将被混入组件本身</li><li>慎用全局混入</li></ol><h2 id="十一、ajax和axios的区别"><a href="#十一、ajax和axios的区别" class="headerlink" title="十一、ajax和axios的区别"></a>十一、ajax和axios的区别</h2><ol><li><p>ajax</p><p>优点：</p><p>传统的Ajax指的是XMLHttpRequest，最早出现的发送后端请求技术，核心使用的是XMLHttpRequest对象</p><p>JQuery ajax是对原生XHR的封装，除此之外还提供了对JSONP的支持</p><p>缺点：</p><p>本身是针对MVC编程，不符合现在前端MVVM的浪潮</p><p>基于原生的XHR开发， XHR本身的架构不清晰</p><p>JQuery整个项目太大，为了使用Ajax就引入JQuery非常的不合理</p><p>不关注分离原则</p><p>配置和调用非常混乱</p><p>用法：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$.ajax(&#123;<br>    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url:url,<br>    <span class="hljs-keyword">data</span>:<span class="hljs-keyword">data</span>,<br>    dataType:dataType,<br>    success:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;,<br>    error:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>axios</p><p>优点：</p><p>基于promise用于浏览器和nodejs的HTTP客户端</p><p>本质也是对原生XHR的封装，但是是Promise的实现，</p><p>从浏览器创建XMLHttpRequest</p><p>支持promise API</p><p>客户端支持防止CSRF</p><p>提供一些并发请求的接口</p><p>从nodejs创建http请求</p><p>转换请求数据和响应数据</p><p>取消请求</p><p>自动转换json数据</p><p>用法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">axios(&#123;<br>method:<span class="hljs-string">&#x27;post&#x27;</span>,<br>ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;/user/1245&#x27;</span>,<br>dat<span class="hljs-variable">a:</span>&#123;<br>firstname:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>lastname:<span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;,<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(response)</span>&#123;</span><br><br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span>&#123;</span><br><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"><a href="#十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）" class="headerlink" title="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"></a>十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）</h2><p>MVVM</p><ol><li><p>MVVM源自经典的MVC模式</p></li><li><p>MVVM的核心是viewmodel层</p></li><li><p>viewmodel层是一个中转站，向上与视图层进行双向的数据绑定，向下与model层通过接口进行数据交互</p></li><li><p>view层展示的不是model层的数据，而是viewmodel层的数据</p></li><li><p>viewmodel层进行数据交互，这就完全解耦了view层和model层</p></li><li><p>这种解耦是前后端分离方案最重要的一环</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144545.png" alt="img"></p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144548.jpg" alt="562c11dfa9ec8a13ab6935fbfc03918fa0ecc0be"></p><p>MVC</p><ol><li>controller负责将model的数据用view展示出来</li><li>model是数据的管理者，负责存放数据</li><li>model提供接口，可以使得controller去调用他存放的数据</li><li>view：数据的显示部分，视图是根据模型创建的</li><li>controller 负责从视图读取数据，控制用户输入，并且向模型发送数据</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144552.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144559.png" alt="img"></p><h2 id="十三、css伪类和伪元素的区别"><a href="#十三、css伪类和伪元素的区别" class="headerlink" title="十三、css伪类和伪元素的区别"></a>十三、css伪类和伪元素的区别</h2><ol><li>伪类与伪元素的区别在于：有没有创建一个文档树之外的元素、</li><li>伪类是在已有的DOM元素下操作：:hover、:active</li><li>伪元素是创建一些不在DOM树存在的元素 ： ::after、::before</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_42068550/article/details/89480350">MVC和MVVM的区别</a></p><p><a href="https://blog.csdn.net/hyld_lzw/article/details/91346726?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;amp;spm=1001.2101.3001.4242">ajax和axios、fetch的区别</a></p><p><a href="https://www.html.cn/qa/css3/11853.html">css伪类和伪元素的区别是什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue  创建2.0项目</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E5%88%9B%E5%BB%BA2.0%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E5%88%9B%E5%BB%BA2.0%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建（vue2-X）"><a href="#一、环境搭建（vue2-X）" class="headerlink" title="一、环境搭建（vue2.X）"></a>一、环境搭建（vue2.X）</h2><ol><li><p>安装node.js 官网下载（本人是解压版，解压后是如图所示）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714202421911.png" alt="image-20210714202421911"></p></li><li><p>安装vue-cli （vue 2.x）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203045168.png" alt="image-20210714203045168"></p></li><li><p>输入命令 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">vue init webpack <span class="hljs-keyword">my</span>-project<br></code></pre></td></tr></table></figure></li><li><p>设置默认属性</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203426287.png" alt="image-20210714203426287"></p></li><li><p>创建项目成功</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203451146.png" alt="image-20210714203451146"></p></li><li><p>访问项目<a href="http://localhost:8080/#/">http://localhost:8080/#/</a></p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203547293.png" alt="image-20210714203547293"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-声明合并</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数的合并"><a href="#一、函数的合并" class="headerlink" title="一、函数的合并"></a>一、函数的合并</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、接口的合并"><a href="#二、接口的合并" class="headerlink" title="二、接口的合并"></a>二、接口的合并</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts">interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br>&#125;<br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 相当于：</span><br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 注意，合并的属性的类型必须是唯一的</span><br></code></pre></td></tr></table></figure><h2 id="三、接口中方法的合并"><a href="#三、接口中方法的合并" class="headerlink" title="三、接口中方法的合并"></a>三、接口中方法的合并</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    weight: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、类的合并"><a href="#四、类的合并" class="headerlink" title="四、类的合并"></a>四、类的合并</h2><p>类的合并与接口的合并规则一致。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类的概念"><a href="#一、类的概念" class="headerlink" title="一、类的概念"></a>一、类的概念</h2><ol><li><p>类：定义一个抽象物体的特点，包括他的属性和方法</p></li><li><p>对象：类的实例，通过new实现</p></li><li><p>面向对象的三大特性：封装、继承、多态</p></li><li><p>封装：将对数据操作的细节隐藏起来，只暴露对外的接口</p></li><li><p>继承：子类继承父类，而且还可以有自己更具体的特性</p></li><li><p>多态：由继承产生的相关的不同的类，对同一个方法有不同的相应。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210713143911.png" alt="image-20210713143807626"></p></li></ol><h2 id="二、ES6类的用法"><a href="#二、ES6类的用法" class="headerlink" title="二、ES6类的用法"></a>二、ES6类的用法</h2><ol><li><p>属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的属性和方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123; <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a.sayHi()); <span class="hljs-comment">//my name is Jack</span><br></code></pre></td></tr></table></figure></li><li><p>类的继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* 类的继承 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>constructor(name)&#123;<br>    <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 使用super调用父类的构造函数和方法</span><br>    console.log(<span class="hljs-keyword">this</span>.name); <span class="hljs-comment">//cat</span><br><br>&#125;<br>sayHi()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-symbol">&#x27;Meo</span>w&#x27; + <span class="hljs-keyword">super</span>.sayHi();<br>&#125;<br>&#125;<br>let cat = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>(<span class="hljs-symbol">&#x27;ca</span>t&#x27;);<br>console.log(cat.sayHi()); <span class="hljs-comment">// Meowmy name is cat</span><br></code></pre></td></tr></table></figure></li><li><p>存储器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 存取器 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Jack&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setter:&#x27;</span> + value); <span class="hljs-comment">// setter:Kitty</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> animal = <span class="hljs-keyword">new</span> Animal1(<span class="hljs-string">&#x27;Kitty&#x27;</span>);<br>animal.name = <span class="hljs-string">&#x27;tom&#x27;</span>; <span class="hljs-comment">// setter:tom</span><br></code></pre></td></tr></table></figure></li><li><p>静态方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 静态方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123; <span class="hljs-comment">// 构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">isAnimal</span>(<span class="hljs-params">a</span>)</span> &#123; <span class="hljs-comment">// 静态方法</span><br>        <span class="hljs-keyword">return</span> a <span class="hljs-keyword">instanceof</span> Animal2;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Animal2(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(Animal2.isAnimal(a1)); <span class="hljs-comment">// true //静态方法不需要实例，类直接调用</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、ES7类中的用法"><a href="#二、ES7类中的用法" class="headerlink" title="二、ES7类中的用法"></a>二、ES7类中的用法</h2><ol><li><p>实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7实例属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal3</span></span>&#123;<br>    name=<span class="hljs-string">&#x27;Jack3&#x27;</span>; <span class="hljs-comment">// 直接在类里定属性</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Animal3();<br><span class="hljs-built_in">console</span>.log(a2.name); <span class="hljs-comment">// Jack3</span><br></code></pre></td></tr></table></figure></li><li><p>静态属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7静态属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal4</span></span>&#123;<br>    <span class="hljs-keyword">static</span> num =<span class="hljs-number">42</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(Animal4.num); <span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="三、ts中类的用法"><a href="#三、ts中类的用法" class="headerlink" title="三、ts中类的用法"></a>三、ts中类的用法</h2><ol><li><p>public 修饰符（开放的属性和方法）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Animal5 &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a3 = <span class="hljs-built_in">new</span> Animal5(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a3.name); // Jack5<br>a3.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>console.log(a3.name); // tom5<br></code></pre></td></tr></table></figure></li><li><p>private修饰符（无法直接读取）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* private */</span><br><span class="hljs-keyword">class</span> Animal6 &#123;<br>    private <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a4 = <span class="hljs-built_in">new</span> Animal6(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a4.name); <br>a4.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>// 报错Property <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">is</span> private <span class="hljs-keyword">and</span> <span class="hljs-keyword">only</span> accessible <span class="hljs-keyword">within</span> <span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;Animal6&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>private（子类无法访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* private 子类*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> name;<br>    public constructor(name) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    constructor(name) &#123;<br>        <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 访问父类</span><br>        console.log(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>protected修饰符（子类可以访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/* protected修饰符 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> name;<br>    public constructor(name)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    constructor(name)&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        console.log(<span class="hljs-keyword">this</span>.name);<br>        <br>    &#125;<br>&#125;<br>let cat8 = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat8</span>(<span class="hljs-symbol">&#x27;cat</span>8&#x27;)<br>console.log(cat8); <span class="hljs-comment">// Cat8 &#123; name: &#x27;cat8&#x27; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修饰符和readonly可以使用在构造函数参数中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 参数属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal9</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// tom9</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> cat9  = <span class="hljs-keyword">new</span> Animal9(<span class="hljs-string">&#x27;tom9&#x27;</span>); <br></code></pre></td></tr></table></figure></li><li><p>只读属性readonly</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* readonly 可以用在属性 构造函数  */</span><br><span class="hljs-keyword">class</span> Animal10&#123;<br>    readonly <span class="hljs-type">name</span>; <br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a10 = <span class="hljs-built_in">new</span> Animal10(<span class="hljs-string">&#x27;tom10&#x27;</span>);<br>console.log(a10.name); // tom10<br>a10.name = <span class="hljs-string">&#x27;jack 10&#x27;</span> //  Cannot assign <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;name&#x27;</span> because it <span class="hljs-keyword">is</span> a <span class="hljs-keyword">read</span>-<span class="hljs-keyword">only</span> property.<br></code></pre></td></tr></table></figure></li><li><p>readonly和其他访问修饰符同时存在，要放到后面</p></li><li><p>抽象类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 抽象类 不可以被实例化 抽象类的方法必须被子类实现 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal11</span> </span>&#123; <span class="hljs-comment">// 抽象类</span><br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> sayHi(); <span class="hljs-comment">// 抽象方法</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat11</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal11</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`meow, my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>); <span class="hljs-comment">// meow, my name is tom11</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat11 = <span class="hljs-keyword">new</span> Cat11(<span class="hljs-string">&#x27;tom11&#x27;</span>);<br>cat11.sayHi();<br></code></pre></td></tr></table></figure></li><li><p>类的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal12</span> </span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    sayHi():<span class="hljs-built_in">string</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat12:Animal12 = <span class="hljs-keyword">new</span> Animal12(<span class="hljs-string">&#x27;tom12&#x27;</span>); <span class="hljs-comment">// 指定cat12的类型是Animal12 而且进行了初始化</span><br><span class="hljs-built_in">console</span>.log(cat12.sayHi()); <span class="hljs-comment">// my name is tom12</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类与接口</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><ol><li><p>举例：</p><p>防盗门是门的子类，</p><p>防盗门有报警的功能</p><p>车有报警的功能</p><p>报警提取成接口，防盗门和车都去实现他</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/* 类和接口 */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Alarm</span> </span>&#123;<br>    alert(): <span class="hljs-type">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityDoor</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Door</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;securityDoor alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类实现多个接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类实现多个接口 */</span><br><span class="hljs-keyword">interface</span> Alarm1 &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Light&#123;<br>    lightOn():<span class="hljs-built_in">void</span>;<br>    lightOff():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car1</span> <span class="hljs-title">implements</span> <span class="hljs-title">Alarm1</span>,<span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light on&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOff</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light off&#x27;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口继承接口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/* 接口继承接口 */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Alarm2</span> &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Light2</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Alarm2</span>&#123; <span class="hljs-comment">// 除了继承父级的方法，还有定义了自己的方法</span><br>    lighton():<span class="hljs-built_in">void</span>;<br>    lightoff():<span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口继承类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> Point3d <span class="hljs-keyword">extends</span> Point &#123; <span class="hljs-comment">// Point3d 实际上继承的是Point的实例的类型</span><br>    <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> point3d: Point3d = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">z</span>: <span class="hljs-number">3</span> &#125;;<br></code></pre></td></tr></table></figure></li><li><p>接口为什么可以继承类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口为什么可以继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <span class="hljs-comment">// Point1 当做类来使用</span><br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> point1 = <span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">/*****************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printPoint</span> (<span class="hljs-params">p:Point1</span>)</span>&#123; <span class="hljs-comment">// Point1当做类型来用</span><br>    <span class="hljs-built_in">console</span>.log(p.x,p.y); <span class="hljs-comment">// 1 2 </span><br>&#125;<br>printPoint(<span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <br></code></pre></td></tr></table></figure></li><li><p>声明Point类的时候，除了会创建一个名为Point类之外，还创建了一个名为Point的类型</p></li><li><p>声明Point类的时候，创建的Point类型是不包含构造函数的</p></li><li><p>声明Point类的时候,创建的Point类型只包含其中的实例属性和实例方法</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-泛型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、泛型"><a href="#一、泛型" class="headerlink" title="一、泛型"></a>一、泛型</h2><ol><li><p>小例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* 小例 */</span><br><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Array(<span class="hljs-params">length</span>: <span class="hljs-params">number</span>, <span class="hljs-params">value</span>: <span class="hljs-params">any</span>)</span>: Array&lt;any&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">[]</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>= value;<br>  &#125;<br>  return result;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-built_in">array</span> = create<span class="hljs-constructor">Array(3,&#x27;<span class="hljs-params">x</span>&#x27;)</span>;<br>console.log(<span class="hljs-built_in">array</span>); <span class="hljs-comment">// [ &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27; ]</span><br><span class="hljs-comment">// 缺点是返回值的类型没有定义，我们应该要求数组中的每一项都是value的类型</span><br></code></pre></td></tr></table></figure></li><li><p>泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArray1</span>&lt;<span class="hljs-title">T</span>&gt; (<span class="hljs-params">length:<span class="hljs-built_in">number</span>,value:T</span>):<span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">var</span> array1 = createArray1(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;y&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(array1); <span class="hljs-comment">// [ &#x27;y&#x27;, &#x27;y&#x27;, &#x27;y&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>多个类型参数</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-comment">/* 多个类型参数 */</span><br>function swap&lt;<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>&gt;(tuple:[<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>]):[<span class="hljs-symbol">U</span>,<span class="hljs-symbol">T</span>]&#123;<br>    return [tuple[<span class="hljs-number">1</span>],tuple[<span class="hljs-number">0</span>]];<br>&#125;<br>console.log(swap([<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;seven&#x27;</span>])); // [ <span class="hljs-string">&#x27;seven&#x27;</span>, <span class="hljs-number">7</span> ]<br></code></pre></td></tr></table></figure></li><li><p>泛型约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型约束 */</span><br><span class="hljs-keyword">interface</span> Lengthwise &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logging</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Lengthwise</span>&gt;(<span class="hljs-params">args: T</span>): <span class="hljs-title">T</span> </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(args.length); <span class="hljs-comment">// 3</span><br>  <span class="hljs-keyword">return</span> args;<br>&#125;<br>logging(<span class="hljs-string">&#x27;123&#x27;</span>); <br></code></pre></td></tr></table></figure></li><li><p>泛型接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型接口 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc &#123;<br>    &lt;T&gt;(length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray2: CreateArrayFunc;<br>createArray2 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">let</span> result :T[] = [];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result[i] =value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray2(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">// [ &#x27;z&#x27;, &#x27;z&#x27;, &#x27;z&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>泛型参数提前到接口上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型参数提前到泛型接口上 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc1&lt;T&gt; &#123;<br>    (length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray3: CreateArrayFunc1&lt;<span class="hljs-built_in">any</span>&gt;;<br>createArray3 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray3(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;W&#x27;</span>)); <span class="hljs-comment">// [ &#x27;W&#x27;, &#x27;W&#x27;, &#x27;W&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>泛型类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericNumber</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-attr">zeroValue</span>:T;<br>    add:<span class="hljs-function">(<span class="hljs-params">x:T,y:T</span>) =&gt;</span>T; <span class="hljs-comment">// 函数</span><br>&#125;<br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> GenericNumber&lt;<span class="hljs-built_in">number</span>&gt;();<br>myGenericNumber.zeroValue=<span class="hljs-number">0</span>;<br>myGenericNumber.add=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>泛型参数的默认类型</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/* 泛型参数的默认类型 */<br>function createArray5&lt;T = <span class="hljs-built_in">string</span>&gt;(<span class="hljs-built_in">length</span>: <span class="hljs-built_in">number</span>, value: T): Array&lt;T&gt; &#123;<br>    let <span class="hljs-literal">result</span>: T[] = [];<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-literal">result</span>[i] = value;<br>    &#125;<br><span class="hljs-built_in">    return</span> <span class="hljs-literal">result</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型别名</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型别名"><a href="#一、类型别名" class="headerlink" title="一、类型别名"></a>一、类型别名</h2><ol><li><p>使用type创建类型别名，多应用于联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> aa = <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">type</span> bb = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">let</span> a: aa = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> b: bb = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></td></tr></table></figure></li></ol><h2 id="二、字符串字面量类型"><a href="#二、字符串字面量类型" class="headerlink" title="二、字符串字面量类型"></a>二、字符串字面量类型</h2><ol><li><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 字符串字面量类型 */</span><br>type EventNames = <span class="hljs-string">&#x27;click&#x27;</span>| <span class="hljs-string">&#x27;scroll&#x27;</span>| <span class="hljs-string">&#x27;mousemove&#x27;</span>;<br><span class="hljs-keyword">function</span> handleEvent (ele:Element,event:EventNames)&#123;<br> <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br>handleEvent(document.getElementById(<span class="hljs-string">&#x27;hello&#x27;</span>),<span class="hljs-string">&#x27;scroll&#x27;</span>); <span class="hljs-regexp">//</span> 运行正常<br><span class="hljs-regexp">//</span> document is not defined (操作DOM和BOM 只能在浏览器环境下进行)<br><span class="hljs-regexp">//</span> handleEvent(document.getElementById(<span class="hljs-string">&#x27;world&#x27;</span>),<span class="hljs-string">&#x27;dbclick&#x27;</span>); <span class="hljs-regexp">//</span> 报错 因为没有<span class="hljs-string">&#x27;dbcllick&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>类型别名和字符串字面量类型都是用type来定义</p></li></ol><h2 id="三、元组"><a href="#三、元组" class="headerlink" title="三、元组"></a>三、元组</h2><ol><li><p>数组合并类型相同的对象，元组合并类型不同的对象</p></li><li><p>元组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">25</span>];<br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">0</span>]); <span class="hljs-comment">// tom</span><br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure></li><li><p>元组赋值</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">let tom1: [string, number];<br>tom1 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];  // 必须先赋值，不然报错<br>tom1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom1&#x27;</span>;<br>tom1[<span class="hljs-number">1</span>] = <span class="hljs-number">25</span>;<br>console.log(tom1[<span class="hljs-number">0</span>]);<br>console.log(tom1[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure></li><li><p>可以赋值一个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom2: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom2 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom2&#x27;</span>; <span class="hljs-comment">// 只赋值一个值</span><br><span class="hljs-built_in">console</span>.log(tom2[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure></li><li><p>直接变量初始化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom3: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom3 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>]; <span class="hljs-comment">// 直接初始化，必须赋值所有项</span><br></code></pre></td></tr></table></figure></li><li><p>越界元素不允许</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom4: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom4 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom4.push(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tom4); <span class="hljs-comment">// [ &#x27;jack&#x27;, 0, &#x27;tom&#x27; ]</span><br>tom4.push(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 无法push,必须push元组中的类型</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、枚举"><a href="#四、枚举" class="headerlink" title="四、枚举"></a>四、枚举</h2><ol><li><p>枚举的关键字enum</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;Sun&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>枚举成员会被赋值从0开始递增的数字，同时也会对枚举值和枚举名进行反向映射</p></li><li><p>给枚举项手动赋值，没有赋值的会递增上一个的枚举值</p></li><li><p>手动赋值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值 */</span><br>enum Days1 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days1[<span class="hljs-string">&#x27;Wed&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>手动赋值小数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值可以是小数 */</span><br>enum Days2 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1.5</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days2[<span class="hljs-string">&#x27;Tue&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">2.5</span><br></code></pre></td></tr></table></figure></li><li><p>常数枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 常输枚举 不可以包含计算属性 <span class="hljs-operator">*/</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure></li><li><p>外部枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 外部枚举 <span class="hljs-operator">*/</span><br><span class="hljs-variable">declare</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions2</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions2</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span> <span class="hljs-operator">//</span> <span class="hljs-punctuation">(</span>运行时会报错 <span class="hljs-variable">Directions2</span> <span class="hljs-variable">is</span> <span class="hljs-variable">not</span> <span class="hljs-variable">defined</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-内置对象</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、内置对象"><a href="#一、内置对象" class="headerlink" title="一、内置对象"></a>一、内置对象</h2><ol><li><p>ECMAScript的内置对象:Boolean、Error、Date、RegExp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tsx">let b:Boolean = new Boolean(1);<br>let e:Error = new Error(&#x27;Error occurred&#x27;);<br>let d:Date = new Date();<br>let r:RegExp = /[a-z]/;<br></code></pre></td></tr></table></figure></li><li><p>DOM和BOM的内置对象：Document、HTMLElement、Event、NodeList</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body: HTMLElement = <span class="hljs-built_in">document</span>.body;<br><span class="hljs-keyword">let</span> allDiv: NodeList = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e:MouseEvent</span>)</span>&#123;<br><span class="hljs-comment">// </span><br>&#125;);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型断言</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型断言"><a href="#一、类型断言" class="headerlink" title="一、类型断言"></a>一、类型断言</h2><ol><li><p>类型断言可以手动指定一个值的类型</p></li><li><p>我觉得更好理解的一种说法：就是告诉编译器你不用做类型检查了，相信我，它就是这个类型</p></li><li><p>推荐使用 “值 as 类型”的写法</p></li><li><p>类型断言的用途：</p><ol><li><p>将一个联合类型指定为其中的一个类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx">/* 将一个联合类型断言为其中一个类型§ */<br>interface Cat &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br>interface Fish &#123;<br>    name: string;<br>    swim(): void;<br>&#125;<br>function getName(anmial: Cat | Fish) &#123;<br>    return anmial.name; // 只能访问公共的属性或者方法<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx">// function isFish(anmial: Cat | Fish) &#123;<br>//     if (typeof anmial.swim === &#x27;function&#x27;) &#123; // 会报错，无法访问私有的<br>//         return true;<br>//     &#125; else &#123;<br>//         return false;<br>//     &#125;<br>// &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx">function isFish2(animal: Cat | Fish) &#123;<br>    if (typeof (animal as Fish).swim === &#x27;function&#x27;) &#123; // 使用类型断言欺骗ts编译器<br>        return true;<br>    &#125;<br>    return false;<br>&#125;<br>const tom: Cat = &#123; // 定义变量<br>    name: &#x27;Tom&#x27;,<br>    run() &#123; console.log(&#x27;swim&#x27;) &#125;<br>&#125;;<br>console.log(isFish2(tom));<br></code></pre></td></tr></table></figure></li><li><p>将一个父类断言成更加具体的子类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">apiError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    code: number = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">httpError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    statusCode: number = <span class="hljs-number">200</span>;<br>&#125;<br>function isApiError(error: <span class="hljs-type">Error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (typeof (error as apiError).code === <span class="hljs-symbol">&#x27;numbe</span>r&#x27;) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将任何一个类型断言成any(慎用)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* 将任何一个类型断言为 any */</span><br><span class="hljs-regexp">//</span> const foo: number =<span class="hljs-number">1</span>;<br><span class="hljs-regexp">//</span> foo.length =<span class="hljs-number">1</span>; (会报错)<br>(window as any).foo =<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>将any断言成一个具体的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 将any断言成一个具体的类型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheData</span>(<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.cache[key];<br>&#125;<br><span class="hljs-keyword">var</span> tom1 = getCacheData(<span class="hljs-string">&#x27;args&#x27;</span>);<br>tom.run();<br></code></pre></td></tr></table></figure></li></ol></li><li><p>类型断言的限制：要使得A断言为B，只需要A兼容B或者B兼容A即可</p></li><li><p>双重断言，不到万不得已，不使用</p></li><li><p>类型断言VS类型转换：类型断言更像是类型的选择，而不是类型的转换</p></li><li><p>类型断言VS 类型声明：类型声明比类型断言更加严格</p></li><li><p>类型断言VS泛型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tsx">/* 类型断言VS泛型 */<br>function getCacheData1&lt;T&gt;(key: string): T &#123;<br>    return (window as any).cache[key];<br>&#125;<br><br>interface Cat1 &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br><br>const tom3 = getCacheData1&lt;Cat1&gt;(&#x27;args&#x27;);<br>tom3.run();<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-函数类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数是js的一等公民"><a href="#一、函数是js的一等公民" class="headerlink" title="一、函数是js的一等公民"></a>一、函数是js的一等公民</h2><ol><li><p>js的函数声明</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">/* js函数声明 */<br><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>js的函数表达式</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">/* js函数表达式 */<br>let mySum = <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ts的函数声明</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* ts函数声明 */</span><br><span class="hljs-keyword">function</span> sum1(x: number, y: number): number &#123;<br>    return x + y;<br>&#125;<br><span class="hljs-regexp">//</span> 输入多余或者少于的参数都是不被允许的，会报错<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>ts的函数表达式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts函数表达式 */</span><br><span class="hljs-keyword">let</span> mySum1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ts的箭头函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts箭头函数 */</span><br><span class="hljs-keyword">let</span> mySum2: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>接口定义函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口定义函数 */</span><br><span class="hljs-keyword">interface</span> Func1 &#123;<br>    (source: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-keyword">let</span> myFun: Func1;<br>myFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, arg2: <span class="hljs-built_in">string</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arg1.search(arg2) !== <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/* 返回结果true */</span><br><span class="hljs-built_in">console</span>.log(myFun(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li><p>ts函数的可选参数（必须写在最后，可选参数后面不可以出现必须函数了）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts的可选参数 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat, tom);<br><span class="hljs-comment">// 结果：tomcat tom</span><br></code></pre></td></tr></table></figure></li><li><p>ts函数参数的默认值（自动识别默认值的参数是可选参数，不在受[可选参数必须在必须参数后面]的限制）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname1</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat1, tom1);<br><span class="hljs-comment">// 结果：tomcat tomcat</span><br></code></pre></td></tr></table></figure></li><li><p>ts 函数重载</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/* ts函数重载 */<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> | void &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-number">123</span>));<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li><p>重载要求函数名相同，但是参数的类型、参数的个数不相同，跟java的重载相似</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-数组类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数组的表示方法"><a href="#一、数组的表示方法" class="headerlink" title="一、数组的表示方法"></a>一、数组的表示方法</h2><ol><li><p>[类型 + 方括号] 表示法</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golo"><span class="hljs-keyword">let</span> <span class="hljs-keyword">array</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>泛型表示方法</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">let array3 <span class="hljs-symbol">:Array&lt;number&gt;</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>接口表示方法(一般表示类数组才会用到)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数值数组</span><br><span class="hljs-keyword">interface</span> NumberArray&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array4 : NumberArray = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">// 字符数组</span><br><span class="hljs-keyword">interface</span> NumberArray1&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array5 : NumberArray1 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>];<br></code></pre></td></tr></table></figure></li><li><p>类数组不是数组类型 （比如arguments、IArguments）</p></li><li><p>类数组不可以普通的数组来描述，应该用接口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 类数组(arguments是类数组,不可以用普通的方式表示，要用接口)<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> sum ()&#123;<br><span class="hljs-regexp">//</span>     let args :number[] = arguments;(会报错)<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> 正常运行<br><span class="hljs-keyword">function</span> sum ()&#123;<br>    let args : &#123;<br>        [index:number] : number;  <span class="hljs-regexp">//</span> 类型<br>        length:number; <span class="hljs-regexp">//</span> 属性<br>        callee:Function; <span class="hljs-regexp">//</span> 属性<br>    &#125; = arguments;<br>&#125;<br><span class="hljs-keyword">function</span> sum2 ()&#123;<br>    let args: IArguments = arguments; <span class="hljs-regexp">//</span> IArguments是ts定义好的类型<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>any在数组中的应用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> list : <span class="hljs-built_in">any</span>[] = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-attr">data</span>:<span class="hljs-string">&#x27;你好&#x27;</span>&#125;];<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-对象类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对象类型-接口"><a href="#一、对象类型-接口" class="headerlink" title="一、对象类型-接口"></a>一、对象类型-接口</h2><ol><li><p>ts中对象通过接口来实现</p></li><li><p>确定属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> tom:Person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">25</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义了一个接口Person,定义了一个变量：tom ,他的类型是Person，约束了变量的形状必须和接口保持一致</p></li><li><p>接口一般会大写</p></li><li><p>定义的变量比接口多一些属性或者少一些属性都是不允许的</p></li><li><p>赋值的时候，变量的形状必须和接口保持一致</p></li><li><p>可选属性：</p></li><li><p>如果我们不希望完全匹配一个形状，我们可以设置可选属性（但是并不允许添加未定义的属性）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Car &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> car1:Car = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>任意属性：</p></li><li><p>任意属性有固定的写法：[propName:string]:xxx;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Cat &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> cat:Cat = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leg</span>:<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只要定义了任意属性，那确定属性和可选属性只能是他的子属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 报错，因为number不是string的子属性</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125;<br><span class="hljs-comment">// 正常运行</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;12岁了&#x27;</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>只读属性：(只能在创建时被赋值)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 报错，因<span class="hljs-built_in">为id</span>已经被初始化，在赋值会报错<br>interface Person &#123;<br>    readonly<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> number</span>;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>    [propName:<span class="hljs-built_in"> string</span>]: any;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">89757</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    gender: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom<span class="hljs-built_in">.id</span> = <span class="hljs-number">9527</span>;<br></code></pre></td></tr></table></figure></li><li><p>只读属性的约束在第一次给对象赋值的时候，不是第一次给只读属性赋值的时候</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">number</span>;<br>    name: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>;<br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,   <span class="hljs-comment">// 第一次错误：初始化的时候，没有给只读属性赋值</span><br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom.id = <span class="hljs-number">89757</span>; <span class="hljs-comment">// 无法赋值，他是只读属性， 只能在创建时赋值</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-原始数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、boolean类型"><a href="#一、boolean类型" class="headerlink" title="一、boolean类型"></a>一、boolean类型</h2><ol><li> boolean是最基本的数据类型，boolean是js的基本类型，Boolean是js的构造函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> createdByNewBoolean = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByNewBoolean);<br>输出：<span class="hljs-built_in">object</span><br><span class="hljs-comment">//直接调用Boolean 也可以返回一个boolean类型</span><br><span class="hljs-keyword">let</span> createdByboolean :<span class="hljs-built_in">boolean</span> = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByboolean);<br>输出：<span class="hljs-built_in">boolean</span><br><span class="hljs-comment">// 但是多一个new关键字，就会报错</span><br><span class="hljs-keyword">let</span> createdByNewBoolean: <span class="hljs-built_in">boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);(报错)<br>因为使用构造函数创建的对象不是<span class="hljs-built_in">Boolean</span>值<br></code></pre></td></tr></table></figure><h2 id="二、数值"><a href="#二、数值" class="headerlink" title="二、数值"></a>二、数值</h2><h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><ol><li><p>ts生成模板string</p></li><li><p>``用来定义es6的模板字符串，${expr} 用来</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myName : <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-keyword">let</span> Myage : <span class="hljs-built_in">number</span> = <span class="hljs-number">23</span>;<br><br><span class="hljs-keyword">let</span> sentence : <span class="hljs-built_in">string</span> = <span class="hljs-string">`hello , my name is <span class="hljs-subst">$&#123;myName&#125;</span>. I am <span class="hljs-subst">$&#123;Myage+<span class="hljs-number">1</span>&#125;</span> years old`</span><br><span class="hljs-built_in">console</span>.log(sentence)<br><span class="hljs-comment">// 输出hello , my name is Tom. I am 24 years old</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、空值"><a href="#四、空值" class="headerlink" title="四、空值"></a>四、空值</h2><ol><li>js中没有空值的概念，在ts中可以用void表示没有任何返回值的函数</li></ol><h2 id="五、null和undefined"><a href="#五、null和undefined" class="headerlink" title="五、null和undefined"></a>五、null和undefined</h2><ol><li>ts里可以定义null和undefined两种数据类型</li><li>null和undefined是所有类型的子类型（undefined类型可以赋值给number类型）</li><li>void类型不可以赋值给number类型</li></ol><h2 id="六、任意值（any）"><a href="#六、任意值（any）" class="headerlink" title="六、任意值（any）"></a>六、任意值（any）</h2><ol><li><p>一个普通类型，在赋值过程中改变类型是不被允许的</p></li><li><p>但是如果是任意类型，就可以被赋值成任何类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myFavoriteNumber: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myFavoriteNumber = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>任意值上可以访问任意的属性</p></li><li><p>任意值上也可以调用任何的方法</p></li><li><p>声明一个变量是任意值以后，对他的任何操作，返回的任何类型都是任意值</p></li><li><p>如果没有声明类型的变量，识别成任意值类型</p></li></ol><h2 id="七、类型推论"><a href="#七、类型推论" class="headerlink" title="七、类型推论"></a>七、类型推论</h2><ol><li><p>如果在定义的时候没有赋值，那么会识别成any类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 会报错</span><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 不会报错</span><br><span class="hljs-keyword">let</span> myAge;<br>Myage = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myAge = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>如果在定义的时候赋值了，会进行类型推论</p></li><li><p>总结：赋值是推论，没赋值是any</p></li></ol><h2 id="八、联合类型"><a href="#八、联合类型" class="headerlink" title="八、联合类型"></a>八、联合类型</h2><ol><li><p>联合类型的写法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">let</span> myName: string | number;<br><span class="hljs-attribute">myName</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br><span class="hljs-attribute">myName</span> = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure></li><li><p>只可以识别联合类型里有的类型，没有的类型，会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myName: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myName = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 会报错</span><br><span class="hljs-comment">// myName = true; </span><br></code></pre></td></tr></table></figure></li><li><p>访问联合类型的属性或者方法，只能访问联合类型共有的类型和方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 会报错，因为number没有length属性</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : number&#123;<br>   return something.length;<br> &#125;<br><span class="hljs-comment">// 运行成功</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : <span class="hljs-built_in">string</span>&#123;<br>    return something.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>联合类型的变量在被赋值的时候，会根据类型推断的规则推断出一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/* 运行成功 */</span><br><span class="hljs-keyword">let</span> myTest: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myTest = <span class="hljs-string">&#x27;server&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length);<br><span class="hljs-comment">// 根据类型推论得到myTest的类型是number，会报错</span><br>myTest = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length)<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ts.xcatliu.com/">TypeScript入门教程</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-hellots</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/</url>
    
    <content type="html"><![CDATA[<h2 id="一、第一个ts"><a href="#一、第一个ts" class="headerlink" title="一、第一个ts"></a>一、第一个ts</h2><ol><li><p>全局安装ts    npm install -g typescript</p></li><li><p>vscode 环境下运行ts文件</p></li><li><p>编写第一个ts文件，在终端输入tsc hello.ts 去编译文件 ，会自动生成hello.js 文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/* 编译成功 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br><span class="hljs-comment">/*编译出错 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span> (<span class="hljs-params">person : <span class="hljs-built_in">string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">let</span> user = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Hello.js 中的代码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></td></tr></table></figure></li><li><p>使用node hello.js 可以运行js文件</p></li><li><p>ts会在编译的时候对类型进行静态检查，如果有错，编译的时候就会报错，但是还是会生成相应的js文件，如果不想生成js，在tsconfig.json中配置noEmitOnError即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-ts简介</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ts简介"><a href="#一、ts简介" class="headerlink" title="一、ts简介"></a>一、ts简介</h2><ol><li><p>ts是添加了类型系统的js，适合任何项目</p></li><li><p>ts是一个静态类型，弱类型语言</p><p>动态类型：是运行时才做类型检查(js)</p><p>静态类型：是编译的时候就去做类型检查(ts)</p><p>弱类型：是允许隐式转换</p><p>强类型：不允许类型转换(python)</p></li><li><p>ts完全兼容js</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>师姐分享</title>
    <link href="/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/"/>
    <url>/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/60279001">前端面试：谈谈 JS 垃圾回收机制 - 知乎</a></li><li><a href="https://www.cnblogs.com/xaun/p/13673798.html">关于height:100%和height:100vh的区别 - 六人行 - 博客园</a></li><li><a href="https://www.cnblogs.com/yxkNotes/p/13931717.html">浏览器设置强缓存和协商缓存 - Judicious - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/138490697">ajax请求的五个步骤 - 知乎</a></li><li><a href="https://blog.csdn.net/qq_41261490/article/details/82966077">js中正则表达式test()方法_DiuDiu_yang的博客-CSDN博客_js test</a></li><li><a href="https://mp.weixin.qq.com/s/FnN0cIhhS8Y7mJADFCdfqQ">面经字节校招四轮技术面</a></li><li><a href="https://mp.weixin.qq.com/s/GnTIlJ80bfI28NrwwZmNLw">你真的了解 GET 和 POST 吗，它们的区别是什么？</a></li><li><a href="https://www.kwgg2020.com/">前端导航</a></li><li><a href="https://zhuanlan.zhihu.com/p/39903074">Web前端知识体系梳理 - 知乎</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>师姐分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>师姐分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目列表</title>
    <link href="/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/"/>
    <url>/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、智库项目"><a href="#一、智库项目" class="headerlink" title="一、智库项目"></a>一、智库项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801151402.png" alt="image-20210801151400899"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801151453.png" alt="image-20210801151452979"></p><h2 id="二、团委项目"><a href="#二、团委项目" class="headerlink" title="二、团委项目"></a>二、团委项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801105503.png"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801105611.png"></p><h2 id="三、社科联"><a href="#三、社科联" class="headerlink" title="三、社科联"></a>三、社科联</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801161402.png" alt="image-20210801161401775"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801161424.png" alt="image-20210801161422917"></p><h2 id="四、璧山项目"><a href="#四、璧山项目" class="headerlink" title="四、璧山项目"></a>四、璧山项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801162432.png" alt="image-20210801162431522"></p><h2 id="五、气矿项目"><a href="#五、气矿项目" class="headerlink" title="五、气矿项目"></a>五、气矿项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801162758.png" alt="image-20210801162757554"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801164221.png" alt="image-20210801164220913"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801164311.png" alt="image-20210801164309941"></p><h2 id="六、社科处"><a href="#六、社科处" class="headerlink" title="六、社科处"></a>六、社科处</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801173140.png" alt="1 (1)"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801173154.png" alt="2 (1)"></p><h2 id="七、中石化"><a href="#七、中石化" class="headerlink" title="七、中石化"></a>七、中石化</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801185819.png" alt="image-20210801185818654"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801185849.png" alt="image-20210801185848472"></p>]]></content>
    
    
    <categories>
      
      <category>实战项目</category>
      
      <category>研究生项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>研究生项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试笔记</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-异步操作</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、异步操作"><a href="#一、异步操作" class="headerlink" title="一、异步操作"></a>一、异步操作</h2><ol><li><p>javaScript是单线程模式</p></li><li><p>好处是：实现比较简单，执行环境相对简单</p></li><li><p>坏处是: 只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行</p></li><li><p>为了解决这个问题，js的内部采用了”事件循环”机制</p></li><li><p>同步任务和异步任务</p></li><li><p>异步操作的几种模式</p><ol><li>事件回调</li><li>事件监听</li><li>发布/订阅</li></ol></li><li><p>异步操作的流程控制</p><ol><li>串行执行</li><li>并行执行</li><li>并行与串行结合</li></ol></li><li><p>定时器setTimeout 设置某个函数或者代码推迟一段时间运行，setInterval 设置任务每隔一段时间就执行</p></li><li><p>promise对象 是js的异步操作解决方案，为异步操作提供统一接口，起到了代理的作用</p></li><li><p>promise是对象，也是构造函数</p></li><li><p>promise实例的then(),用来添加回调函数</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-面向对象编程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、new"><a href="#一、new" class="headerlink" title="一、new"></a>一、new</h2><ol><li>面向对象编程的语言（c++、java）</li><li>对象是一个具体实物的抽象</li><li>对象是一个容器，包含属性和方法</li><li>c++和java都有一个类的概念，所谓类就是对象的模板，对象是类的实例</li><li>但是js的语言的对象体系不是基于类的，是基于构造函数和原型链的</li><li>js使用构造函数做为对象的模板</li><li>构造函数的特点：（1）函数的内部使用了this关键字，（2）生成对象的时候必须使用new关键字</li><li>new命令的特点：执行构造函数，返回一个实例对象</li><li>Object.create() 创建实例对象，有时候拿不到构造函数，就以现有的对象做为模板，生成新的实例对象</li></ol><h2 id="二、this"><a href="#二、this" class="headerlink" title="二、this"></a>二、this</h2><ol><li><p>this的指向，总是指向当前属性或者方法所在的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓名:&#x27;</span>+ <span class="hljs-built_in">this</span>.name;<br>&#125;<br><br><span class="hljs-keyword">var</span> A = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><span class="hljs-keyword">var</span> B = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><br>A.describe()<br><span class="hljs-string">&quot;姓名:张三&quot;</span><br>B.describe()<br><span class="hljs-string">&quot;姓名:李四&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>this的使用场合</p><p>（1）全局环境；this指的是顶层对象window</p><p>（2）构造函数；this指是的实例对象</p><p>（3）对象的方法；this指的是该方法运行时所在的对象</p></li><li><p>绑定this的方法</p><p>Function.prototype.call()</p><p>Function.prototype.apply()</p><p>Function.prototype.bind()</p></li></ol><h2 id="三、对象继承"><a href="#三、对象继承" class="headerlink" title="三、对象继承"></a>三、对象继承</h2><ol><li><p>通过构造函数为实例对象定义属性，同一个构造函数的多个实例之间无法共享属性</p></li><li><p>prototype属性的作用；属性和方法定义在原型对象上，所有的实例对象都可以共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span> (<span class="hljs-params">name</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Animal.prototype.color = <span class="hljs-string">&#x27;white&#x27;</span>;<br><span class="hljs-keyword">var</span> cat1 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;大猫&#x27;</span>);<br><span class="hljs-keyword">var</span> cat2 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;小猫&#x27;</span>);<br>cat1.name;<br><br><span class="hljs-string">&quot;大猫&quot;</span><br>cat2.name<br><span class="hljs-string">&quot;小猫&quot;</span><br>cat1.color<br><span class="hljs-string">&quot;white&quot;</span><br>cat2.color<br><span class="hljs-string">&quot;white&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>每一个函数都有一个prototype属性，指向一个对象</p></li><li><p>原型链，读取对象属性的时候，js引擎先在当前对象中找，如果找不到就去原型对象中找，直到顶层Object.prototype，找不到返回undefined</p></li><li><p>constructor属性，默认指向prototype对象的构造函数</p></li><li><p>instanceof运算符，判断对象是否是某个构造函数的实例</p></li></ol><h2 id="四、object对象"><a href="#四、object对象" class="headerlink" title="四、object对象"></a>四、object对象</h2><ol><li><p>Object.getPrototypeOf() 获取原型对象的标准方法</p><p>object的原型对象是null</p><p> 空对象的原型对象是Object</p><p>function的原型对象是Function</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(&#123;&#125;)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf((Object.<span class="hljs-params">prototype</span>)</span>)<span class="hljs-operator"> === </span>null<br><span class="hljs-literal">true</span><br><span class="hljs-keyword">function</span> F <span class="hljs-literal">()</span> &#123;&#125; ;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(F)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Function</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>Object.setPrototypeOf()可以模拟new,第一个参数是现有对象，第二个参数是原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> F ();<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> f = <span class="hljs-built_in">Object</span>.setPrototypeOf(&#123;&#125;,F.prototype);<br>f.foo<br><br><span class="hljs-literal">undefined</span><br>F.call(f);<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>Object.create () 提供一个对象做为另一个对象的原型，另一个对象继承所有属性和方法</p></li><li><p>Object.prototype.isPrototypeOf() 判断对象是不是参数对象的原型</p></li><li><p>```<br>Object.prototype.<strong>proto</strong> 实例对象的__proto__属性，返回该对象的原型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>   <br><br><span class="hljs-number">6</span>. 获取实例对象的<span class="hljs-number">3</span>种方法：<br><br>   ```js<br>   obj.__proto__ <span class="hljs-regexp">//</span> 只有浏览器才需要部署<br>   obj.constructor.prototype <span class="hljs-regexp">//</span> 如果改写了原型对象，就会失真<br>   obj.getPrototypeOf(obj) <span class="hljs-regexp">//</span> 推荐<br></code></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames() 返回一个数组，对象是参数对象所有自身属性的键名</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Date)<br>(<span class="hljs-number">6</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>]</span><br><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Math)<br>(<span class="hljs-number">43</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;abs&quot;</span>, <span class="hljs-string">&quot;acos&quot;</span>, <span class="hljs-string">&quot;acosh&quot;</span>, <span class="hljs-string">&quot;asin&quot;</span>, <span class="hljs-string">&quot;asinh&quot;</span>, <span class="hljs-string">&quot;atan&quot;</span>, <span class="hljs-string">&quot;atanh&quot;</span>, <span class="hljs-string">&quot;atan2&quot;</span>, <span class="hljs-string">&quot;ceil&quot;</span>, <span class="hljs-string">&quot;cbrt&quot;</span>, <span class="hljs-string">&quot;expm1&quot;</span>, <span class="hljs-string">&quot;clz32&quot;</span>, <span class="hljs-string">&quot;cos&quot;</span>, <span class="hljs-string">&quot;cosh&quot;</span>, <span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;floor&quot;</span>, <span class="hljs-string">&quot;fround&quot;</span>, <span class="hljs-string">&quot;hypot&quot;</span>, <span class="hljs-string">&quot;imul&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;log1p&quot;</span>, <span class="hljs-string">&quot;log2&quot;</span>, <span class="hljs-string">&quot;log10&quot;</span>, <span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-string">&quot;min&quot;</span>, <span class="hljs-string">&quot;pow&quot;</span>, <span class="hljs-string">&quot;random&quot;</span>, <span class="hljs-string">&quot;round&quot;</span>, <span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;sin&quot;</span>, <span class="hljs-string">&quot;sinh&quot;</span>, <span class="hljs-string">&quot;sqrt&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;tanh&quot;</span>, <span class="hljs-string">&quot;trunc&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;LN10&quot;</span>, <span class="hljs-string">&quot;LN2&quot;</span>, <span class="hljs-string">&quot;LOG10E&quot;</span>, <span class="hljs-string">&quot;LOG2E&quot;</span>, <span class="hljs-string">&quot;PI&quot;</span>, <span class="hljs-string">&quot;SQRT1_2&quot;</span>, <span class="hljs-string">&quot;SQRT2&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>Object.prototype.hasOwnProperty 判断某个属性定义在对象自身还是原型链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;length&#x27;</span>)<br><span class="hljs-literal">true</span><br><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>获取对象的所有属性，不管是自身的还是继承的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritedPropertyNames</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-keyword">var</span> props = &#123;&#125;;<br><span class="hljs-keyword">while</span>(obj)&#123;<br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) </span>&#123;<br>props[p] = <span class="hljs-literal">true</span>;<br>&#125;);<br>obj = <span class="hljs-built_in">Object</span>.getPrototypeOf(obj);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.getOwnPropertyNames(props);<br>&#125;<br>inheritedPropertyNames(<span class="hljs-built_in">Date</span>);<br>(<span class="hljs-number">22</span>) [<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>, <span class="hljs-string">&quot;caller&quot;</span>, <span class="hljs-string">&quot;constructor&quot;</span>, <span class="hljs-string">&quot;apply&quot;</span>, <span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>, <span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-string">&quot;__defineGetter__&quot;</span>, <span class="hljs-string">&quot;__defineSetter__&quot;</span>, <span class="hljs-string">&quot;hasOwnProperty&quot;</span>, <span class="hljs-string">&quot;__lookupGetter__&quot;</span>, <span class="hljs-string">&quot;__lookupSetter__&quot;</span>, <span class="hljs-string">&quot;isPrototypeOf&quot;</span>, <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span>, <span class="hljs-string">&quot;valueOf&quot;</span>, <span class="hljs-string">&quot;toLocaleString&quot;</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;length&quot;</span><span class="hljs-number">1</span>: <span class="hljs-string">&quot;name&quot;</span><span class="hljs-number">2</span>: <span class="hljs-string">&quot;prototype&quot;</span><span class="hljs-number">3</span>: <span class="hljs-string">&quot;now&quot;</span><span class="hljs-number">4</span>: <span class="hljs-string">&quot;parse&quot;</span><span class="hljs-number">5</span>: <span class="hljs-string">&quot;UTC&quot;</span><span class="hljs-number">6</span>: <span class="hljs-string">&quot;arguments&quot;</span><span class="hljs-number">7</span>: <span class="hljs-string">&quot;caller&quot;</span><span class="hljs-number">8</span>: <span class="hljs-string">&quot;constructor&quot;</span><span class="hljs-number">9</span>: <span class="hljs-string">&quot;apply&quot;</span><span class="hljs-number">10</span>: <span class="hljs-string">&quot;bind&quot;</span><span class="hljs-number">11</span>: <span class="hljs-string">&quot;call&quot;</span><span class="hljs-number">12</span>: <span class="hljs-string">&quot;toString&quot;</span><span class="hljs-number">13</span>: <span class="hljs-string">&quot;__defineGetter__&quot;</span><span class="hljs-number">14</span>: <span class="hljs-string">&quot;__defineSetter__&quot;</span><span class="hljs-number">15</span>: <span class="hljs-string">&quot;hasOwnProperty&quot;</span><span class="hljs-number">16</span>: <span class="hljs-string">&quot;__lookupGetter__&quot;</span><span class="hljs-number">17</span>: <span class="hljs-string">&quot;__lookupSetter__&quot;</span><span class="hljs-number">18</span>: <span class="hljs-string">&quot;isPrototypeOf&quot;</span><span class="hljs-number">19</span>: <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span><span class="hljs-number">20</span>: <span class="hljs-string">&quot;valueOf&quot;</span><span class="hljs-number">21</span>: <span class="hljs-string">&quot;toLocaleString&quot;</span>length: 22__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-标准库</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、object对象"><a href="#一、object对象" class="headerlink" title="一、object对象"></a>一、object对象</h2><p>object对象，所有其他的对象都是继承了object对象，那些对象是object的实例</p><p>object的方法分成原生方法和实例方法</p><p>object（）函数，可以将任意类型转换成对象</p><p>object构造函数  var obj = new  Object（），主要用他来生成新的对象</p><p>Object（value）表示将一个值转换成对象，new Object （value）是新生成一个对象，值是value</p><p>object的静态方法和实例方法</p><p>静态方法是定义在object对象上，Object.keys 、Object.getOwnPropertyNames</p><p>实例方法是定义在object.prototype对象上，Object.prototype.valueOf()、Object.prototype.toString() 。。。。</p><p>所有的实例对象都可以继承实例方法</p><p>object和Object.prototype 的区别</p><p>obeject其实就是一个函数，函数是对象，但是所有的原型是对象，但是不是函数，object.prototype是对象，是js的根对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype.__proto__<br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><ol><li><p>数组的构造方法</p><p>最建议使用的方式：var arrays = [1,2,3]</p><p>var arrays = new Array（2）定义一个长度是2的数组</p></li><li><p>数组的静态方法</p><p>Array.isArray()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrays = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">Array</span>.isArray(arrays)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>数组的实例方法</p><ol><li><p>valueof()返回数组本身，toString() 返回数组的字符串形式</p></li><li><p>push()方法，在数组的尾部添加一个或者多个值，返回新数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.push(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>pop()删除数组的最后一个元素，并且返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.pop()<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>pop和push的组合构成了栈的”后进先出”</p></li><li><p>shift()在数组的头部删除一个元素，并且返回删除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.shift()<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>shift和push相结合构成队列的”先进先出”</p></li><li><p>unshift() 在数组的头部添加一个或者多个元素，返回数组长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.unshift(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>join() 以传入的参数作为分隔符，将数组连接成一个新的字符串返回，默认是逗号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.join(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-string">&quot;123&quot;</span><br>a.join(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-string">&quot;1,2,3&quot;</span><br>a.join(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-string">&quot;1-2-3&quot;</span><br>a.join()<br><span class="hljs-string">&quot;1,2,3&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>concat() 数组的连接 ，负责数组的合并，返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&#x27;hello&#x27;</span>].concat([<span class="hljs-string">&#x27;world&#x27;</span>])<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].concat([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>数组成员包含对象，concat()返回数组的一个浅拷贝，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj =&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">var</span> oldArray = [obj]<br><span class="hljs-keyword">var</span> newArray = oldArray.concat()<br>obj.a = <span class="hljs-number">2</span><br>newArray[<span class="hljs-number">0</span>].a<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>reverse() 数组倒序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.reverse()<br>[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure></li><li><p>slice()用于提取目标数组的一部分，slice(strart,end) 从strat开始，不包括end结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">2</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>slice()利用Array.prototype.slice.call()将类似数组转成数组</p></li><li><p>splice() 删除数组的部分，然后再删除的位置添加新的元素，返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>a.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>)<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">//查看a的现状</span><br>a<br>(<span class="hljs-number">7</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure></li><li><p>sort()排序，按照字典序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;love&#x27;</span>]<br>a.sort()<br>(<span class="hljs-number">3</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>]<br></code></pre></td></tr></table></figure><p>自定义的排序方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">29</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;].sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">o1,o2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> o1.age - o2.age&#125;)<br><br><span class="hljs-number">0</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>&#125;<br><span class="hljs-number">1</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>&#125;<br><span class="hljs-number">2</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br><span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure></li><li><p>map() 将数组的所有成员依次传入函数参数，把每一次的执行结果组成新的数组返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>numbers.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>)</span>&#123;<br><span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span><br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>map() 接受一个函数做为参数，并且该函数的回调函数有3个参考值 element 元素，index 元素下标，arr 原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem,ind,arr</span>)</span>&#123;<br><span class="hljs-keyword">return</span> ind * elem<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>map()接受第二个参数（index），绑定内部的this变量，数组a是map()方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[index];<br>&#125;,a)<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><p>map方法的回调函数会跳过空位，不会跳过undefined和null</p></li><li><p>forEach() 和map的用法基本一致，就是map()返回值，forEach()不返回值，只是遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">element,index,arr</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;[&#x27;</span>+index + <span class="hljs-string">&#x27;] =&#x27;</span> + element)<br>&#125;<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(log)<br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">0</span>] =<span class="hljs-number">1</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">1</span>] =<span class="hljs-number">2</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">2</span>] =<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>forEach()也可以接受第二个参数，绑定内部的this变量，空数组<code>out</code>是<code>forEach()</code>方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> out = [];<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.push(index * index);<br>&#125;,out)<br><span class="hljs-literal">undefined</span><br>out<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>forEach()会跳过空位，不会跳过undefined和null</p><p>forEach() 无法中断，总是把数组遍历完</p></li><li><p>filter(),参数是一个函数，所有成员依次执行函数，返回符合条件的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>].filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> (elem &gt;<span class="hljs-number">3</span>)<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>filter()也可以接受第二个参数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj = &#123;max :<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">var</span> myFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(item)</span></span>&#123;<br><span class="hljs-keyword">if</span>(item&gt;<span class="hljs-keyword">this</span>.max) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>arr.filter(myFilter,obj)<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>第二个参数obj可以绑定myFilter内部的this变量</p></li><li><p>some()只要数组的一个成员符合条件，就返回true</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">some</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>every()是所有成员都符合，才返回true</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">every</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。</p></li><li><p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p></li><li><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1</p></li><li><p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> user = [<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;tom@qq.com&#x27;</span>&#125;,<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;peter&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;peter@qq.com&#x27;</span>&#125;<br>];<br>user.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>)</span>&#123;<br><span class="hljs-keyword">return</span> user.email<br>&#125;).filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-regexp">/^t/</span>.test(email);<br>&#125;).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(email)<br>&#125;)<br><span class="hljs-attr">VM2562</span>:<span class="hljs-number">10</span> tom@qq.com<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="三、包装对象"><a href="#三、包装对象" class="headerlink" title="三、包装对象"></a>三、包装对象</h2><ol><li><p>3个原型对象的包装对象</p></li><li><p>如果使用了new 就是生成包装对象</p></li><li><p>如果只是普通的函数调用，那就是强转</p></li><li><p>js引擎会自动的把原生数据类型转成包装对象，并且在使用后自动销毁</p></li><li><p>包装对象的实例方法 valueof()，toString()</p></li><li><p>可以给包装对象自定义实例方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br><span class="hljs-string">&#x27;abc&#x27;</span>.double()<br><span class="hljs-string">&quot;abcabc&quot;</span><br><br><span class="hljs-built_in">Number</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br>(<span class="hljs-number">2</span>).double()<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、Boolean对象"><a href="#四、Boolean对象" class="headerlink" title="四、Boolean对象"></a>四、Boolean对象</h2><ol><li><p>Boolean转换为false的现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)<br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>Boolean转换为true的现象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-string">&#x27;false&#x27;</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">([])</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(&#123;&#125;)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(function()</span></span>&#123;&#125;)<br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(/foo/)</span></span><br>true<br></code></pre></td></tr></table></figure></li><li><p>所有对象对应的Boolean都是true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>))&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>之所以输出true，是因为false对应的包装对象实例是一个对象，进行逻辑运算时，自动转成布尔值true</p></li></ol><h2 id="五、Number对象"><a href="#五、Number对象" class="headerlink" title="五、Number对象"></a>五、Number对象</h2><ol><li>Number()是原始数字类型的包装类型</li><li>有自己静态的属性，定义在Number对象上</li><li>有自己的实例化方法</li><li>也可以自定义方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>+x;<br>&#125;;<br>(<span class="hljs-number">8</span>).add(<span class="hljs-number">2</span>)<br><span class="hljs-number">10</span><br><span class="hljs-built_in">Number</span>.prototype.subtract= <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> -x;<br>&#125;;<br>(<span class="hljs-number">10</span>).subtract(<span class="hljs-number">4</span>)<br><span class="hljs-number">6</span><br><span class="hljs-built_in">Number</span>.prototype.iterate = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> result = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">this</span>;i++)&#123;<br>result.push(i);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;;<br>(<span class="hljs-number">10</span>).iterate()<br>(<span class="hljs-number">11</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h2 id="六、String对象"><a href="#六、String对象" class="headerlink" title="六、String对象"></a>六、String对象</h2><ol><li><p>String是js原生提供的三个包装对象之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span> (<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-keyword">typeof</span> s1<br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> s2<br><span class="hljs-string">&quot;object&quot;</span><br>s2.valueOf()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>字符串对象是一个类似数组对象</p></li><li><p>单独的String() 没有new 是强制转换，有new是，String包装对象</p></li><li><p>string的静态属性，定义在string对象本身,参数是一个或者多个数值，返回数值对应的Unicode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>)<br><span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>)<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>string的实例属性 Sting.prototype.length</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span><br>s1.length<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>String的实例方法</p><ol><li><p>charAt() 返回指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>s1.charAt(<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;b&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>charCodeAt() 返回指定位置的字符的Unicode的值，没有参数，默认返回首字符的Unicode值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var s1 = &#x27;abcd&#x27;;<br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt(1)</span>;<br><span class="hljs-number">98</span><br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt()</span><br><span class="hljs-number">97</span><br></code></pre></td></tr></table></figure></li><li><p>concat() 连接2个字符串，返回新字符串，可以接受多个参数，如果参数不是字符串，先转成字符串在连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> one =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> three = <span class="hljs-string">&#x27;3&#x27;</span>;<br><span class="hljs-string">&#x27;&#x27;</span>.concat(one,two,three);<br><span class="hljs-string">&quot;123&quot;</span><br>one + two + three;<br><span class="hljs-string">&quot;33&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>slice() 第一个参数是开始位置，第二个参数是结束位置 (不包括结束位置) 返回子串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>substring() 跟slice的作用相同，就是当第一个参数 &gt; 第二个参数的时候，会自动换位置，如果是负数，会自动转成0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,<span class="hljs-number">10</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;JavaSCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>substr() 第一个参数是开始的位置，第二个参数是子字符串的长度，如果第一个参数是负数，表示倒数开始，如果第二个参数是负数，返回空字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;S&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>,<span class="hljs-number">0</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>indexof() 表示一个字符串在另一个字符串中第一次出现的位置，如果匹配返回下标，如果不匹配，返回-1</p><p>可以接受第二个参数，第二个参数代表从指定位置开始匹配</p><p>lastIndexof() 表示从尾部开始匹配</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">4</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;x&#x27;</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li><li><p>trim() 用于去除字符串两端的空格，返回一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27; hello world &#x27;</span>.trim()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;\r\nabc \t&#x27;</span>.trim()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>toLowerCase() 将字符串全部小写，toUpperCase() 将字符串全部大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;Hello World&#x27;</span>.toLowerCase()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;Hello World&#x27;</span>.toUpperCase()<br><span class="hljs-string">&quot;HELLO WORLD&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>match() 确定原字符串是否匹配某个子字符串，</p><p>返回一个数组，成员是匹配的第一个字符串，index是匹配的下标，input是原数组，</p><p>如果没有匹配，返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;e&#x27;</span>);<br>[<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;e&quot;</span>groups: undefinedindex: 1input: <span class="hljs-string">&quot;hello world&quot;</span>length: 1__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li><p>search() 和match() 方法基本相似，但是返回匹配值的第一个位置（下标）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.search(<span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>replace() 用于替换匹配的子字符串，默认只替换第一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;aaa&#x27;</span>.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-string">&quot;baa&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>split() 方法，按照指定的规则分割字符串，返回一个分割出来的子字符串组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split()<br>[<span class="hljs-string">&quot;a|b|c&quot;</span>]<br><span class="hljs-string">&#x27;a||c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">3</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">2</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="七、json对象"><a href="#七、json对象" class="headerlink" title="七、json对象"></a>七、json对象</h2><ol><li><p>Json格式</p><p>复杂类型只能是数组或者对象，不能是函数、正则对象，日期对象</p><p>原始类型只有4种，字符串、数值、布尔值和null</p><p>字符串必须使用双引号，不能使用单引号</p><p>对象的键名必须在双引号里</p><p>数组或者对象最后一个成员后面不能加逗号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>]<br><br>&#123; <span class="hljs-attr">&quot;one&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;two&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">&quot;three&quot;</span>: <span class="hljs-number">3</span> &#125;<br><br>&#123;<span class="hljs-attr">&quot;names&quot;</span>: [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>] &#125;<br><br>[ &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>&#125;, &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;李四&quot;</span>&#125; ]<br></code></pre></td></tr></table></figure></li><li><p>JSON.stringify()  将一个值转成JSON字符串</p></li><li><p>如果参数对象有自定义的toJSON()方法，会使用这个方法作为返回值，忽略其他的属性</p></li><li><p>JSON.parse()  将JSON字符串转成对应的值</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-语法</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、强制转换"><a href="#一、强制转换" class="headerlink" title="一、强制转换"></a>一、强制转换</h2><p>强制转化的基本类型 Number、String、Boolean</p><h2 id="二、Number比parseInt更加严格"><a href="#二、Number比parseInt更加严格" class="headerlink" title="二、Number比parseInt更加严格"></a>二、Number比parseInt更加严格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-literal">NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><ol><li><p>自动转换，背后有比较复杂的转换预原则</p></li><li><p>错误处理机制</p></li><li><p>编码风格</p></li><li><p>console.log()</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-运算符</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、加法运算符（算术运算符）"><a href="#一、加法运算符（算术运算符）" class="headerlink" title="一、加法运算符（算术运算符）"></a>一、加法运算符（算术运算符）</h2><p>boolean会转换成数值型，在做加法</p><p>string类型做加法就是进行连接操作</p><p>到底是执行加法还是连接会在运行时决定，这种现象叫做”重载”,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-string">&quot;75&quot;</span><br><span class="hljs-string">&#x27;3&#x27;</span> + <span class="hljs-number">4</span> +<span class="hljs-number">5</span><br><span class="hljs-string">&quot;345&quot;</span><br></code></pre></td></tr></table></figure><p>只有加法有重载，其他的算术运算没有</p><p>对象相加会先转换成原始类型的值在相加</p><p>对象转换成原始类型的原则是先调用valuesof（），</p><p>valuesof（）总是返回对象本身，在调用对象的toString（）方法，将其转成字符串</p><h2 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h2><p>相等比较的是值</p><p>严格相等比较的是类型和值</p><p>当都是原始类型值的时候，转成数值在比较</p><p>如果是对象，转成原始类型在比较</p><p>undefined和null他们自身比较，或者互相比较是true，其他时候都是false</p><p>相等运算符存在问题，推荐使用严格相等</p><p>比如: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2</span> == <span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-number">2</span> == <span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><h2 id="三、布尔运算符"><a href="#三、布尔运算符" class="headerlink" title="三、布尔运算符"></a>三、布尔运算符</h2><p>! 取反   !! x 等价于 Boolean（x）</p><p>&amp;&amp; 且  如果第一个表示式是false ，返回第一个表达式的值，如果第一个是true，返回第二个表达式的值</p><p>if（x） { doSometing（x） } 等价于 x &amp;&amp; doSomething（x） （短路写法）</p><p>|| 或     如果第一个表达式的值是true，返回第一个表达式的值，如果第一个表达式的值是false，返回第二个表达式  </p><p>text == text || ‘’ （短路写法）</p><p>？ ： 三目运算符</p><h2 id="四、二进制运算符"><a href="#四、二进制运算符" class="headerlink" title="四、二进制运算符"></a>四、二进制运算符</h2><p>| 或 </p><p>&amp; 与</p><p>~ 否 （取反 0 变1 1 变0 ）</p><p>^ 异或 （不同取1 相同取0）</p><p>&lt;&lt; 左移 变大 左移一位乘以2</p><p>&lt;&lt; 右移 变小 右移一位除以2</p><p>&lt;&lt;&lt; 头部补零 得到的都是正数，不管符号位</p><h2 id="五、其他运算符"><a href="#五、其他运算符" class="headerlink" title="五、其他运算符"></a>五、其他运算符</h2><p>void（）：执行一个表达式，不返回任何值，或者说返回的是undefined</p><p>逗号：返回最后一个表达式的值</p><p>圆括号：运算级最高</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的数据类型"><a href="#一、js的数据类型" class="headerlink" title="一、js的数据类型"></a>一、js的数据类型</h2><p>（1）Number (整数和小数) </p><p>（2）String </p><p>（3）Boolean </p><p>（4）null </p><p>（5）undefine </p><p>（6）object（狭义的对象、Array、function）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span><br><span class="hljs-string">&quot;number&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&quot;boolean&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> [] <br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">typeof</span> f<br><span class="hljs-string">&quot;function&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二、null和undefined"><a href="#二、null和undefined" class="headerlink" title="二、null和undefined"></a>二、null和undefined</h2><p>null 在转换成数值是0，undefined 在转换成数值是NaN</p><p>null和undefined的比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span> <br>    <br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>只有这6种类型被认为是false：null、undefined、””、’’、0、NaN</p><h2 id="三、数值型"><a href="#三、数值型" class="headerlink" title="三、数值型"></a>三、数值型</h2><p>parseInt将字符串转换成数值型，</p><p>parseInt的返回值类型只可能是数值或者NaN，</p><p>如果一个参数不是字符串，会先转成字符串再转换成数值</p><p>parseFloat将字符串转成字符型</p><p>isFinite() 返回布尔值，判断一个值是不是正常的数值</p><h2 id="四、字符型"><a href="#四、字符型" class="headerlink" title="四、字符型"></a>四、字符型</h2><p>字符串和字符数组，转义字符，base64转码，js返回的字符串长度可能是不一样的</p><h2 id="五、对象"><a href="#五、对象" class="headerlink" title="五、对象"></a>五、对象</h2><p>(for …in ) 遍历对象的属性，但是in无法区别自身的属性，可以加入hasOwnProperty判断是不是自身的属性</p><p>with语句不建议使用</p><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><ul><li><p>函数是一种特殊的值</p></li><li><p>函数的特点是子集可以一直调用父级的内部变量，js特有的链式作用域</p></li><li><p>闭包是函数内部和外部连接起来的桥梁</p></li><li><p>闭包：在函数内部定义一个函数</p></li><li><p>闭包作用：读取外部函数内部的变量，</p></li><li><p>```js<br>function a (){<br>var n =1;<br>function b () {<br> console.log(n)<br>}<br>return b<br>}<br>var res = a();<br>res()</p><p>VM2106:4 1</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><br>  <br><br>- 让这些变量一些保留在内存中，<br><br>- 封装对象的私有属性和私有方法<br><br>- ```js<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span> <span class="hljs-params">(name)</span></span>&#123;<br>  <span class="hljs-keyword">var</span> _age ;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAge</span> <span class="hljs-params">(n)</span></span>&#123;<br>  _age = n;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span> <span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">return</span> _age;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>  name:name,<br>  getAge:getAge,<br>  setAge:setAge<br>  &#125;;<br>  &#125;<br>  <br>  <span class="hljs-keyword">var</span> p1 = person(<span class="hljs-string">&quot;张三&quot;</span>);<br>  p1.setAge(<span class="hljs-number">25</span>);<br>  p1.getAge()<br>  <br>  <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="七、数组"><a href="#七、数组" class="headerlink" title="七、数组"></a>七、数组</h2><p>数组的本质是一种对象，</p><p>数组的遍历可以用forEach方法，</p><p>任何类型都可以放入数组中，</p><p>可以使用Array.prototype.sclice.call() 把类似数组转成数组，</p><p>可以使用Array.prototype.forEach.call()把类似数组转成数组</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-入门介绍</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的概念"><a href="#一、js的概念" class="headerlink" title="一、js的概念"></a>一、js的概念</h2><p>js是一种轻量级的脚本语言，所谓脚本语言就是他不能去开发操作系统，只能编写控制其他大型应用程序的“脚本”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span> (<span class="hljs-params">val</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>+ val)<br>&#125;<br>first(<span class="hljs-string">&#x27;world&#x27;</span>)<br> helloworld<br></code></pre></td></tr></table></figure><h2 id="二、js的优势"><a href="#二、js的优势" class="headerlink" title="二、js的优势"></a>二、js的优势</h2><ul><li>js操作浏览器的能力</li><li>js广泛的使用领域</li><li>js的易学性</li><li>js的语法的灵活性</li><li>js强大的性能</li><li>js的开放性</li><li>js的社区支持和就业机会</li></ul><ol><li><p>js的历史</p><p>js和java是2种不同的语言，最大的区别：</p><p>（1）js的函数是一种独立的数据类型，</p><p>（2）是基于原型对象的继承链，</p><p>（3）js不需要编译，解释器直接运行</p><p>（4）ES和js的关系是：ES是js基本语法的规范，js是ES的体现</p><p>Augular是微软发布的，React是FaceBook发布的</p><h2 id="三、js的基础语法"><a href="#三、js的基础语法" class="headerlink" title="三、js的基础语法"></a>三、js的基础语法</h2><p>js存在变量提升，</p><p>js用var代表声明一个变量，</p><p>js运行的原理是先获取所有被声明的变量，然后再一行一行运行</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/</url>
    
    <content type="html"><![CDATA[<h2 id="一、html基础"><a href="#一、html基础" class="headerlink" title="一、html基础"></a>一、html基础</h2><h3 id="1-html简介"><a href="#1-html简介" class="headerlink" title="1.html简介"></a>1.html简介</h3><p>（1）doctype的声明不区分大小写，用来告知浏览器用的哪个版本</p><p>（2）对于中文页面需要使用<meta charset="utf-8">声明编码，否则会出现乱码。有的浏览器支持GBK为默认编码，则设置<meta charset="gbk"></p><p>（3）在大部分浏览器中，直接输出中文会出现乱码现象，需要在头部设置字符为UTF-8</p><p>（4）HTML 的格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、html编译器"><a href="#2、html编译器" class="headerlink" title="2、html编译器"></a>2、html编译器</h3><p>介绍几种好用的html编译器：VS code ：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>Sublime text：<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p><h3 id="3、html超连接和照片"><a href="#3、html超连接和照片" class="headerlink" title="3、html超连接和照片"></a>3、html超连接和照片</h3><h3 id="4、html元素"><a href="#4、html元素" class="headerlink" title="4、html元素"></a>4、html元素</h3><p>（1）html的元素可以嵌套，并且大多数html元素都嵌套</p><p>（2）html在未来都会强制要求有开始标签和结束标签</p><p>（3）有空元素<br>换行的意思，但是在未来最好规范写法<br/></p><p>（4）html的元素有<p></p>   <body></body>   <br/></p><h3 id="5、html属性"><a href="#5、html属性" class="headerlink" title="5、html属性"></a>5、html属性</h3><p>（1）html有常用的属性 class=” “、id=” “、style=” “、title=” “</p><p>（2）属性要名称/值对的形式出现 比如：name=”value”</p><p>（3）一般是双引号，但是如果有双引号的，用单引号 比如：name=’John “ShotGun” Nelson’</p><h3 id="6、html标题"><a href="#6、html标题" class="headerlink" title="6、html标题"></a>6、html标题</h3><p>（1）HTML标题分为h1-h6 </p><p>（2）添加水平线 </p><p>（3）注释的格式<!--.....--></p><p>（4）浏览器会在标题前后自动加入空行</p><h3 id="7、html段落"><a href="#7、html段落" class="headerlink" title="7、html段落"></a>7、html段落</h3><p>（1）浏览器会自动地在段落的前后添加空行</p><p>（2）浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格</p><h3 id="8、html格式化"><a href="#8、html格式化" class="headerlink" title="8、html格式化"></a>8、html格式化</h3><p>（1）<b></b> 定义加粗的字体、<i></i> 定义斜体</p><p>（2）<sub></sub> 定义下标字 <sup></sup>定义上标字</p><h3 id="9、html链接"><a href="#9、html链接" class="headerlink" title="9、html链接"></a>9、html链接</h3><p>（1）html超链接的格式<a href="''"></a></p><p>（2）html的target属性设置为_blank ,可以在新的窗口打开一个网页</p><p>（3）在本页内实现调转，设置id属性</p><h3 id="10、html头部head"><a href="#10、html头部head" class="headerlink" title="10、html头部head"></a>10、html头部head</h3><p>（1）html 的头部可以添加 <title>, <style>, <meta>, <link>, <script>, <noscript> 和 <base>标签</p><p>（2）title标签：定义页面的标题</p><p>（3）style标签：定义了html样式文件的引用地址，也可以在style标签中直接设置样式</p><p>（4)meta标签：使用meta标签描述文档的属性，比如关键词、作者、字符集等，meta标签的内容不会显示，但是会被浏览器解析。</p><p>（5）link标签：定义html文档与外部资源的关系，只要用于链接样式表</p><p>（6）script标签：加载脚本语言，比如javascript</p><p>（7）base标签：标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>html的base标签学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;images/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这里的照片可以正常访问，是因为在base标签里定义了目标网址<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面会在新的窗口打开，因为在base标签定义了target的属性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;images/1.jpg&quot;&gt;表示此代码所在html文件路径下的images文件中的1.jpg文件--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;..images/1.jpg&quot;&gt;表示此代码所在html文件路径的上一级文件images文件中的1.jpg文件--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11、html-css"><a href="#11、html-css" class="headerlink" title="11、html css"></a>11、html css</h3><p>（1）css来设置html的文本样式</p><p>（2）内联样式:使用style标签 <p style="color:red;margin-left: 10px">内联样式</p></p><p>（3）内部样式表：在head属性中设置 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b3d4fc</span>&#125;</span><br><span class="css">  <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: black&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）引入外部样式表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12、html图像"><a href="#12、html图像" class="headerlink" title="12、html图像"></a>12、html图像</h3><p>（1）alt=“ ” 用来定义图片的含义，如果图片没有正确显示，会有相应的文字提示，得到失去的内容</p><p>（2）图片的映射</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;img src=<span class="hljs-string">&quot;planets.gif&quot;</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;145&quot;</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">&quot;126&quot;</span> alt=<span class="hljs-string">&quot;Planets&quot;</span> usemap=<span class="hljs-string">&quot;#planetmap&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">map</span> name=<span class="hljs-string">&quot;planetmap&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> coords=<span class="hljs-string">&quot;0,0,82,126&quot;</span> alt=<span class="hljs-string">&quot;Sun&quot;</span> href=<span class="hljs-string">&quot;sun.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;90,58,3&quot;</span> alt=<span class="hljs-string">&quot;Mercury&quot;</span> href=<span class="hljs-string">&quot;mercur.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;124,58,8&quot;</span> alt=<span class="hljs-string">&quot;Venus&quot;</span> href=<span class="hljs-string">&quot;venus.htm&quot;</span>&gt;<br>&lt;/<span class="hljs-built_in">map</span>&gt;<br></code></pre></td></tr></table></figure><p>（3）sharp设置可点击区域的性状，coords是指链接区域在图片中的坐标</p><h3 id="13、html的表格"><a href="#13、html的表格" class="headerlink" title="13、html的表格"></a>13、html的表格</h3><p>（1）表格的构成 <table></table> ,<tr></tr> ,<td></td> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表格练习--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一行一列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>两行三列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(2) <th></th> 设置表头信息</p><p>（3）表格还有很多的属性，包括利用css样式，设计一个漂亮的表格</p><p>（4）&lt;td colspan=”2”&gt; </td> 实现横跨两列的效果</p><h3 id="14、html列表"><a href="#14、html列表" class="headerlink" title="14、html列表"></a>14、html列表</h3><p>（1）无序列表：</p><!--HTML的列表--><h4>无序列表</h4><ul>  <li>苹果</li>  <li>香蕉</li>  <li>栗子</li> </ul><p>（2）有序列表</p> <h4>有序列表</h4> <ul>   <li>第一名</li>   <li>第二名</li>   <li>第三名</li> </ul><p>（3）可以设置不同类型的列表，有序列表用type=“A”，无序列表用 style=”list-style-type:circle”</p><h3 id="15、html块区"><a href="#15、html块区" class="headerlink" title="15、html块区"></a>15、html块区</h3><p>（1）HTML的块级元素 <div></div></p><p>(2)html的内联元素 <span></span></p><h3 id="16、HTML布局"><a href="#16、HTML布局" class="headerlink" title="16、HTML布局"></a>16、HTML布局</h3><p>（1）div和table都可以实现网页的布局。一般选用div</p><h3 id="17、html表单"><a href="#17、html表单" class="headerlink" title="17、html表单"></a>17、html表单</h3><p>（1）简单的表单</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>   firstname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;firstname&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;<br>  lastname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;lastname&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><p>（2）单选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Male<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Female<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（3）复选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;apple&quot;&gt;苹果<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;egg&quot;&gt;鸡蛋<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;banana&quot;&gt;香蕉<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（4）下拉列表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eat&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;egg&quot;</span>&gt;</span>egg<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;apple&quot;</span>&gt;</span>apple<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;water&quot;</span>&gt;</span>water<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banana&quot;</span>&gt;</span>banana<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rice&quot;</span>&gt;</span>rice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（5）表单的提交</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;http://www.baidu.com.cn&quot;&gt;<br>  First <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;FirstName&quot; <span class="hljs-keyword">value</span>=&quot;Mickey&quot;&gt;&lt;br&gt;<br>  Last <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;LastName&quot; <span class="hljs-keyword">value</span>=&quot;Mouse&quot;&gt;&lt;br&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提交&quot;&gt;<br>  &lt;p&gt;会提交服务器的百度地址上&lt;/p&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>（6）表单这里有很多知识点还要进一步的学习深入</p><h3 id="18、html框架"><a href="#18、html框架" class="headerlink" title="18、html框架"></a>18、html框架</h3><p>（1）<frame></frame>设置HTML的框架</p><p>（2）框架可以和超链接结合，达到想要的效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--html的框架--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test1.html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com.cn&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span>点击进入百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>因为target的属性设置是iframe_a所以跳转的页面会显示在框架内<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="19、html颜色"><a href="#19、html颜色" class="headerlink" title="19、html颜色"></a>19、html颜色</h3><p>（1）html的颜色是RGB构成、红绿蓝  216+40 （微软和MAC各20种）256种颜色</p><h3 id="20、html-颜色名"><a href="#20、html-颜色名" class="headerlink" title="20、html 颜色名"></a>20、html 颜色名</h3><p>（1）html一共有141种颜色名、17（标准颜色）+124</p><p>（2）标准颜色：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色</p><h3 id="21、html的颜色值"><a href="#21、html的颜色值" class="headerlink" title="21、html的颜色值"></a>21、html的颜色值</h3><p>（1）3位的表示#RGB，6位的表示#RRGGBB</p><h3 id="22、html脚本"><a href="#22、html脚本" class="headerlink" title="22、html脚本"></a>22、html脚本</h3><p>（1）javascript主要用于图片操作、表单验证、内容的动态更新</p><p>（2）script直接在html输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--javascript写入html的输出流--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;p&gt;这是一个段落&lt;/p&gt;&quot;</span>)</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;这是一级标题&lt;/h1&gt;&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只能在html的输出流中使用<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>document.write<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）script进行事件响应的处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script的事件响应--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第一个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>javascript可以完成事件的响应<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>).innerHTML=<span class="hljs-string">&quot;hello world ,hello html&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）script改变html的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script处理HTML的样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第二个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>点击按钮实现样式的修改<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test2&quot;</span>)</span><br><span class="javascript">     x.style.color=<span class="hljs-string">&quot;#a12&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f1()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="23、html字符实体"><a href="#23、html字符实体" class="headerlink" title="23、html字符实体"></a>23、html字符实体</h3><p>(1) 想显示&lt;&gt; 需要用的字符符号 &amp;lt、&amp;gt</p><p>（2）连续不间断的空格 &amp;nbsp</p><p>（3）实体名称对大小写敏感</p><p>24、html的URL</p><p>（1）URL统一资源定位器</p><p>（2）Web浏览器通过URL从Web服务器请求页面。</p><p>当您点击 HTML 页面中的某个链接时，对应的 <a> 标签指向万维网上的一个地址。</p><p>一个统一资源定位器(URL) 用于定位万维网上的文档。</p><p>（3）URL 只能使用 [ASCII URL 只能使用 ASCII 字符集.</p><p>来通过因特网进行发送。由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。</p><p>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</p><p>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/</url>
    
    <content type="html"><![CDATA[<h2 id="一、网页布局的本质"><a href="#一、网页布局的本质" class="headerlink" title="一、网页布局的本质"></a>一、网页布局的本质</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li>网页元素都是盒子</li><li>利用css设置盒子的样式和位置</li><li>往盒子里装内容</li><li>网页核心的本质就是摆盒子</li></ol><h3 id="盒子模型的内容"><a href="#盒子模型的内容" class="headerlink" title="盒子模型的内容"></a>盒子模型的内容</h3><ul><li>盒子包括4个部分：边框、内容、内边距、外边距</li><li>边框控制盒子的边缘border</li><li>内容content</li><li>内边距控制盒子和内容的距离padding</li><li>外边距控制盒子和盒子的距离margin</li></ul><h3 id="边框设置"><a href="#边框设置" class="headerlink" title="边框设置"></a>边框设置</h3><ul><li>边框的主要3个属性：粗细、样式、颜色</li><li>边框的复合写法特别常用：border：1px solid gery</li><li>合并相邻边框(主要针对表格) border-collapse</li><li>边框的设置会影响盒子的大小，（变大）</li></ul><h3 id="内边距设置"><a href="#内边距设置" class="headerlink" title="内边距设置"></a>内边距设置</h3><ul><li>padding 5px 上下左右都是5px</li><li>padding 5px 10px 上下5px 左右10px</li><li>padding 5px 10px 20px 上5px 左右10px 下20px</li><li>padding 5px 10px 15px 20px 上5px 右10px 下15px 左20px、</li><li>内边距会影响盒子的大小（变大）在设置了宽高的情况下</li><li>遇到不同的文字显示，最应该使用padding将盒子撑开</li><li>不设置width/height属性，不会撑开盒子</li></ul><h3 id="外边距设置"><a href="#外边距设置" class="headerlink" title="外边距设置"></a>外边距设置</h3><ul><li>margin的复合写法和padding代表的含义一模一样</li><li>外边距实现块级元素水平居中</li><li>必须设置width，左右边距必须设置成auto  margin ：0 auto</li><li>行内元素或者行内块元素实现水平居中，给父级元素加上text-align</li><li>相邻盒子的外边距垂直合并的现象，选择大的为准</li><li>嵌套盒子的塌陷问题，在父子盒子都有外边距的情况下，会出现</li><li>解决办法：父盒子设置边框、设置内边距、设置 overflow：hidden</li><li>border：1px solid transparent 设置边框透明色</li></ul><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><ul><li>行内元素尽量只设置左右的内外边距，不要设置上下的</li><li>去掉li的小圆点 list-style：none</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jAVA"><span class="hljs-comment">//css的第一行代码</span><br>*&#123;<br>margin :<span class="hljs-number">0</span><br>padding:<span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ul><li>border-radius : 10px;</li><li>原理是矩形和圆做交集</li><li>正方形变圆形 高度或者宽度的一半</li><li>矩形变成圆角形，设置为高度的一半</li><li>四个角可以分开变化</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li>box-shadow : h-shadow v-shadow blur spread color inset </li><li>box-shadow : 10px 10px 10px -4px rgba(0,0 ,0 .3)</li><li>h-shadow :水平阴影</li><li>v-shadow：垂直阴影</li><li>blur：阴影是实在的还是虚的</li><li>spread：阴影的大小</li><li>color：颜色</li><li>inset：内阴影 默认外阴影 不用写 </li></ul><h2 id="二、css浮动"><a href="#二、css浮动" class="headerlink" title="二、css浮动"></a>二、css浮动</h2><h3 id="网页布局的3种方式"><a href="#网页布局的3种方式" class="headerlink" title="网页布局的3种方式"></a>网页布局的3种方式</h3><p><img src="G:\htmlProject\image\1.png"></p><p><img src="G:\htmlProject\image\2.png" alt="2"></p><p><img src="G:\htmlProject\image\3.png" alt="3"></p><ul><li><p>标准流：</p><ul><li><p>标签的3大类：块级元素、行内元素、行内块元素</p><p>块级元素的特点：自己独占一行；可以设置宽高；在不设置宽高的情况下，被内容撑开</p><p>行内元素的特点：和其他在一行，长度和宽度由内容决定</p></li></ul></li><li><p>浮动：</p><ul><li>多个块级元素纵向找标准流，多个块级元素横向排列找浮动</li><li>特性：<ol><li>脱标，脱离标准流；浮动的盒子不在保留原来的位置</li><li>多个盒子浮动，总是一行内显示，并且顶端对齐</li><li>浮动有行内块元素的属性，可以设置宽和高</li><li>行内块元素的宽度是内容撑开的</li><li>先设置div 的大小，在设置位置</li><li>浮动的盒子只会影响后面的盒子位置</li><li>先用标准流做上下位置，在用浮动做左右位置</li></ol></li></ul></li><li><p>定位：</p></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li>额外标签法：添加一个空标签在设置clear：both，空标签必须是块级元素</li><li>父级添加overflow：overflow：hidden</li><li>父级添加after</li><li><img src="G:\htmlProject\image\4.png"></li><li>父级添加双伪元素</li><li><img src="G:\htmlProject\image\6.png"></li></ol><h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3><p>定位=定位模式+边偏移</p><p>定位模式：position : relative absoulte fixed static </p><p>边偏移：top bottom left right </p><p>相对定位：</p><ol><li>相对自己原来的位置来进行移动的，和浏览器和父级都没有关系</li><li>不脱标，原来的位置继续保留</li><li>典型应用是给绝对位置做父级</li></ol><p>绝对定位</p><ol><li>如果没有祖先元素，或者祖先元素没有定位，那么绝对位置以浏览器为标准，进行移动</li><li>祖先有定位。以最近的一级作为参考</li><li>绝对定位脱标，不在占有原来的位置</li><li>子绝父相（在学成在线的页面中可以完善）</li></ol><p>固定定位</p><ol><li>以浏览器的可视窗口为参考</li><li>不在占有原来的位置，脱标</li><li>可以看成特殊的绝对定位</li><li>小技巧在版心的右侧：在浏览器的50%，在版心的margin-left：一半</li></ol><p>粘性定位</p><p>不常用，兼容性太差</p><h3 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h3><p>盒子加了固定或者绝对定位，不设置宽高，默认内容的大小</p><p>浮动的盒子不会压住文字，绝对位置的盒子会</p><h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><p>display：none ,block  隐藏以后位置不会保留</p><p>visibility：visible，hidden 掩藏后，位置会保留</p><p>overflow：溢出的部分隐藏，auto：在需要的时候才显示滚动条，scroll：无论怎样都显示滚动条</p><h2 id="三、css高级技巧"><a href="#三、css高级技巧" class="headerlink" title="三、css高级技巧"></a>三、css高级技巧</h2><h3 id="精灵技术："><a href="#精灵技术：" class="headerlink" title="精灵技术："></a>精灵技术：</h3><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210712235808.jpg" alt="example"></p><p>为了减少服务器接收和发送的次数，提高响应的速度</p><p>核心就是background-position的用法</p><h3 id="字体图标："><a href="#字体图标：" class="headerlink" title="字体图标："></a>字体图标：</h3><h3 id="css三角："><a href="#css三角：" class="headerlink" title="css三角："></a>css三角：</h3><p>没有大小的div，在加上3个透明边框，一个有颜色的边框</p><h3 id="css用户界面样式："><a href="#css用户界面样式：" class="headerlink" title="css用户界面样式："></a>css用户界面样式：</h3><p>鼠标的移动样式：cursor</p><p>轮廓线：outline：0</p><p>文本域防止拖拽：resize：none</p><p>行内元素或行内块元素：文字和图片垂直居中 vertical-align：middle</p><p>溢出文本的省略号：单行和多行</p><h2 id="四、布局技巧："><a href="#四、布局技巧：" class="headerlink" title="四、布局技巧："></a>四、布局技巧：</h2><p>margin-left的负值 </p><p>品优购的项目搭建</p><h2 id="五、css例子"><a href="#五、css例子" class="headerlink" title="五、css例子"></a>五、css例子</h2><p>1、/* 设置背景图片 * 50% 50% 水平位置 垂直位置*/</p><p>  background: url(../img/bg.jpg) 50% 50% no-repeat;</p><p>2、  /* perspective 属性定义 3D 元素距视图的距离 */</p><p>  perspective: 120px;</p><p>3、  /* 阴影设置 水平位移 垂直位移 阴影半径 阴影颜色*/</p><p>  box-shadow: 0px 0px 5px #333;</p><p>4、  /* 设置居中 */</p><p>  position: absolute;</p><p>  /* 是以左上角为原点，故不处于中心位置 */</p><p>  top: 50%;</p><p>  left: 50%;</p><p>  /* 往上（x轴）,左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */</p><p>  transform: translate(-50%, -50%);</p><p>5、  /* 生成绝对定位的元素，相对于浏览器窗口进行定位。 */</p><p>  display: flex;</p><p>6、  /* flex的子项都是居中 */</p><p>  align-items: center;</p><p>7、  /* 其他灵活的项目进行扩展的量 */</p><p>  flex-grow: 1;</p><p>8、  /* 轮廓线 */</p><p>  outline: none;</p><p>9、  /* 透明情况 0 完全透明，1 完全不透明 */</p><p>  opacity: 0;</p><p>10、  /* 设置过渡的效果 代表4个属性*/</p><p>  transition: 0.5s;</p><p>11、  /* 指定背景图像 */</p><p>  background-size: 20px 20px;</p><p>12、  /* :root跟伪类，方便我们重复使用同一属性，自定义var（）调用 */</p><p>   :root {</p><p>​    /* 颜色 */</p><p>​    –white: #e9e9e9;</p><p>​    –gray: #333;</p><p>​    –blue: #0367a6;</p><p>​    –lightblue: #008997;</p><p>​    /* 外边框圆角 */</p><p>​    –button-radius: 0.7rem;</p><p>​    –max-width: 758px;</p><p>​    –max-height: 420px;</p><p>​    /* 字体样式 */</p><p>​    font-size: 16px;</p><p>​    font-family: -apple-system, BlinkMacSystemFont, ‘Segoe UI’, Roboto, Oxygen, Ubuntu, Cantarell, ‘Open Sans’, ‘Helvetica Neue’, sans-serif;</p><p>  }</p><p>13、    /* 定义背景图片随滚动轴的移动方式 随着页面的滚动轴背景图片不会移动 */</p><p>​    background-attachment: fixed;</p><p>14、    /* background-position 为每一个背景图片设置初始位置 */</p><p>​    background-position: center;</p><p>15、    /* 属性设置是否及如何重复背景图像 */</p><p>​    background-repeat: no-repeat;</p><p>16、    /* background-size中，100% (可以看到完整的照片，但是图片了能会变形)</p><p>​    cover（不一定看到完整的图片，但是图片比例不会变化）</p><p>​    都是用于将图片扩大或者缩放来适应整个容器 */</p><p>​    background-size: cover;</p><p>17、  /* 指定一个容器采用网格布局 */</p><p>​    display: grid;</p><p>18、    /* height:100vh == height:100%; </p><p>​    但是当元素没有内容时候，设置height:100%，该元素不会被撑开，此时高度为0，</p><p>​    但是设置height:100vh，该元素会被撑开屏幕高度一致。 */</p><p>​    height: 100vh;</p><p>19、    /* align-items属性控制垂直位置，</p><p>​    justify-items属性控制水平位置。</p><p>​    这两个属性的值一致时，就可以合并写成一个值。</p><p>​    所以，place-items: center; */</p><p>​    place-items: center;</p><p>20、    /* 如果为正数，则离用户更近，为负数则表示离用户更远。 */</p><p>​    z-index: 2;</p><p>21、    /* translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</p><p>​    translateX(x)仅水平方向移动（X轴移动）</p><p>​    translateY(Y)仅垂直方向移动（Y轴移动） */</p><p>​    transform: translateX(100%);</p><p>22、    /* 调用show函数 */</p><p>​    /* 动画完成一个周期所需的时间。 */</p><p>​    animation: show 0.6s;</p><p>22、  @keyframes show {</p><p>​    /* 0%是动画的开始 */</p><p>​    0%,</p><p>​    49.99% {</p><p>​      /* 完全透明 */</p><p>​      opacity: 0;</p><p>​      z-index: 1;</p><p>​    }</p><p>​    50%,</p><p>​    /* 100%是动画的结束 */</p><p>​    100% {</p><p>​      /* 完全显示 */</p><p>​      opacity: 1;</p><p>​      z-index: 5;</p><p>​    }</p><p>  }</p><p>23、    /* 这个百分比是以父元素内容长度的百分比 移到最左侧*/</p><p>​    left: -100%;</p><p>24、 /* 弹性布局 */</p><p>​    display: flex;</p><p>25、    /* 主轴为垂直方向，起点在上沿 */</p><p>​    flex-direction: column;</p><p>26、    /* 定义粗体字符。 */</p><p>​    font-weight: bold;</p><p>27、    /* letter-spacing 属性增加或减少字符间的空白（字符间距） */</p><p>​    letter-spacing: 0.1rem;</p><p>28、   /* text-transform 属性控制文本的大小写。 */</p><p>​    text-transform: uppercase;</p><p>29、  /* E &gt; F 表示选择E元素的所有子F元素 E F选择所有后代元素，&gt;只选择一代。*/</p><p>  .form&gt;.btn {</p><p>​    margin-top: 1.5rem;</p><p>  }</p><p>30、    /* 定义 2D 缩放转换。 */</p><p>​    transform: scale(0.95);</p><p>31、    /* 背景颜色渐变 */</p><p>​    background-image: linear-gradient(90deg, var(–blue) 0%, var(–lightblue) 74%);</p><p>32、总结</p><p>网格布局：</p><p>  display: grid;</p><p>align-items：center</p><p> justify-items：center</p><p>place-items: center; </p><p>弹性布局：</p><p>display：fixed；</p><p>text-align: center;</p><p>justify-content: center;</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 知识点</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue简介"><a href="#一、vue简介" class="headerlink" title="一、vue简介"></a>一、vue简介</h2><ol><li><p>vue是javascript框架</p></li><li><p>简化了Dom操作</p></li><li><p>响应式的数据交互</p></li><li><p>组件开发</p></li></ol><h2 id="二、第一个vue程序"><a href="#二、第一个vue程序" class="headerlink" title="二、第一个vue程序"></a>二、第一个vue程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;第一个vue程序&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br>    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;第一个vue程序&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="三、el-挂载点"><a href="#三、el-挂载点" class="headerlink" title="三、el:挂载点"></a>三、el:挂载点</h2><p>可以使用id、class、标签选择器，但是一般选择id选择器</p><h2 id="四、data：数据对象"><a href="#四、data：数据对象" class="headerlink" title="四、data：数据对象"></a>四、data：数据对象</h2><p>vue用到的数据定义在data中</p><p>data中可以写复杂的数据类型</p><p>渲染复杂的数据类型，遵守js语法即可</p><h2 id="五、本地应用"><a href="#五、本地应用" class="headerlink" title="五、本地应用"></a>五、本地应用</h2><h2 id="六、vue指令"><a href="#六、vue指令" class="headerlink" title="六、vue指令"></a>六、vue指令</h2><p>一组带v-xxx的vue指令</p><h2 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h2><p>v-text 会覆盖h2内部的值 </p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h2><p>v-html和v-text的属性一样，但是在有html属性的时候，会渲染成html标签</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><p>为元素绑定事件，</p><p>可以传入自定义的参数</p><p>@keyup.enter=”” 按回车键触发事件</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show:"></a>v-show:</h2><p>v-show 实质操纵的是元素的dispaly属性，在频繁显示和隐藏的时候，推荐使用</p><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if:"></a>v-if:</h2><p>v-if实质操纵的是Dom树，会有内存的损耗，一般不要用</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h2><p>可以设置元素的属性值，</p><h2 id="v-for："><a href="#v-for：" class="headerlink" title="v-for："></a>v-for：</h2><p>一般和数组联合使用，实现循环</p><p>v-for= “item in intArr  “    </p><p>v-for=” （item,index ）in intArr”</p><p>item代表的就是intArr里的值，</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model:"></a>v-model:</h2><p>便捷的设置和获取表单元素的值</p><p>绑定的数据会和表单元素的值相关联</p><p>一变全变，相互影响</p><h2 id="七、总结："><a href="#七、总结：" class="headerlink" title="七、总结："></a>七、总结：</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">v-text：可以表示成<span class="hljs-comment">&#123;&#123; &#125;</span>&#125;<br><br>v-<span class="hljs-keyword">on</span>：可以表示成@ 为元素绑定事件的 绑定<span class="hljs-function"><span class="hljs-keyword">method</span>里的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">bind</span>：可以表示成：可以改变元素的值 绑定<span class="hljs-title">data</span>里的数据</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">model</span>：实现数据的双向绑定</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue svg组件</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentvue%20svg%E7%BB%84%E4%BB%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentvue%20svg%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手写svg组件"><a href="#一、手写svg组件" class="headerlink" title="一、手写svg组件"></a>一、手写svg组件</h2><ol><li><p>手写一个svg组件（在componment文件下，新建文件SvgIcon）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;svg class=&quot;svg-icon&quot; aria-hidden=&quot;true&quot;&gt;<br>        &lt;use :xlink:href=&quot;iconName&quot;/&gt;<br>    &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;svg-icon&#x27;,<br>        props: &#123;<br>            iconClass: &#123;<br>                type: String,<br>                required: true<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            iconName() &#123;<br>                return `#icon-$&#123;this.iconClass&#125;`<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>    .svg-icon &#123;<br>        width: 1em;<br>        height: 1em;<br>        vertical-align: -0.15em;<br>        fill: currentColor;<br>        overflow: hidden;<br>        margin-right: 10px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在iconfont生成xxx.js文件，（这个文件里包含需要的svg图片），导入index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;&quot;&gt;<br>...<br>&lt;!--    引入svg(password)图标--&gt;<br>&lt;!--    &lt;script src=&quot;//at.alicdn.com/t/font_2648240_79u0g7z36jm.js&quot;&gt;&lt;/script&gt;--&gt;<br>    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;<br>  &lt;/head&gt;<br>...<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;svg-icon icon-class=&quot;password&quot;/&gt;<br>&lt;!--    svg原生写法--&gt;<br>&lt;!--    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;--&gt;<br>&lt;!--      &lt;use xlink:href=&quot;#icon-password&quot;&gt;&lt;/use&gt;--&gt;<br>&lt;!--    &lt;/svg&gt;--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>优化实现自动导入，在src文件下新建icons/svg文件，新建index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import SvgIcon from &quot;@/components/SvgIcon.vue&quot;;<br><br>Vue.component(&#x27;svg-icon&#x27;, SvgIcon)<br><br>// 自动导入<br>const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)<br>const req = require.context(&#x27;./svg&#x27;, false, /\.svg$/)<br>// 打印以.svg命名的所有文件<br>// console.log(req.keys())<br>const result = requireAll(req)<br>console.log(&#x27;********result*****&#x27;)<br>console.log(result)<br></code></pre></td></tr></table></figure></li><li><p>环境安装，基于webpack将svg打包成svg-sprite，安装 npm install svg-sprite-loader -D , 安装 npm install svgo-D</p></li><li><p>配置vue.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> path.join(__dirname, dir)<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1. 取消默认 file-loader 对 svg 文件的处理</span><br>        config.module<br>            .rule(<span class="hljs-string">&#x27;svg&#x27;</span>) <span class="hljs-comment">// 对 svg 规则的配置</span><br>            .exclude <span class="hljs-comment">// 添加忽略文件夹, 忽略file-loader对这个文件夹下的svg文件处理</span><br>            <span class="hljs-comment">// 建议使用绝对路径</span><br>            <span class="hljs-comment">// .add(&#x27;./src/assets/icons/svg&#x27;) // 相对路径</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>)) <span class="hljs-comment">// 绝对路径</span><br>            .end()<br>        config.module<br>            .rule(<span class="hljs-string">&#x27;icons&#x27;</span>) <span class="hljs-comment">// 配置 icons 的规则</span><br>            .test(<span class="hljs-regexp">/\.svg$/</span>) <span class="hljs-comment">// 匹配以 .svg 结尾的文件</span><br>            .include <span class="hljs-comment">// 添加要处理的文件夹</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>))<br>            .end()<br>            .use(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>) <span class="hljs-comment">// 使用 svg-sprite-loader 处理</span><br>            .loader(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>            .options(&#123;<br>                <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span> <span class="hljs-comment">// 配置 symbol id, 需要使用这个 id 来使用 svg 图标</span><br>            &#125;)<br>            .end()<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>vue.config.js 是基于vue的webpack配置文件，放在项目的根目录下</p></li><li><p>webpack.config.js是webpack的配置文件，vue/react都可以使用</p></li><li><p>vue-cli 2.0时代，webpack的配置文件写在config/index.js 文件</p></li><li><p>vue-cli 3.0 时代，没有了config文件夹，vue.config.js 放在根目录下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>component</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/</url>
    
    <content type="html"><![CDATA[<h2 id="一、webpack基础"><a href="#一、webpack基础" class="headerlink" title="一、webpack基础"></a>一、webpack基础</h2><ol><li>webpack是前端资源加载或者打包的工具</li><li>webpack 3.0 的版本没有问题</li><li>webpack4.0 的版本需要安装webpack-cli </li><li>全局安装在任何项目中都可以使用，如果是局部安装（本地安装）只能在当前项目中使用</li><li>webpack可以打包js，json文件</li><li>如果需要打包其他类型的文件，需要loader</li><li>loader解决不了的问题，需要plugin插件</li><li>webpack有entry入口文件，output出口文件。可以有多个入口，但是只能有一个出口</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端笔记</tag>
      
      <tag>Vue学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
