<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mjs-防抖和节流</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、防抖"><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h2><p>防抖的原理</p><blockquote><p>事件响应函数（doSomething） 在一段时间（300ms）后才会执行，如果在这段时间内频繁调用，则重新计算执行时间</p></blockquote><p>防抖第一版</p><p>情景：</p><blockquote><p>当用户的鼠标移动在div上时，计数器计数，但是有一个问题是，用户频繁的移动鼠标时，页面的性能会变得非常差。</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002104754.gif" alt="114"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    app.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>利用防抖进行优化</p><blockquote><p>当鼠标频繁的移动时，会导致timer一直是有值的，那么利用clearTimeout清空，当最后一次停止移动的时候，timer的值是null，就不在清空，而是执行延迟函数，所以达到的效果就是鼠标停止移动，2秒后，数值+1。</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002110508.gif" alt="115"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(timer);</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="javascript">                <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            timer = <span class="hljs-built_in">setTimeout</span>(func, wait); <span class="hljs-comment">// setTimeout的返回值是一个数值</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    app.onmousemove = debounce(doSomeThing, <span class="hljs-number">2000</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>防抖第二版</p><p>在第一版本中，this的指向和arguments发生变化，需要优化</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002111215.png" alt="image-20211002111214251"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 如果没有重新指定func的指向，this指向window</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//如果没有重新指定func的指向，arguments存在问题</span></span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="javascript">                <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            timer = <span class="hljs-built_in">setTimeout</span>(func, wait); </span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    app.onmousemove = debounce(doSomeThing, <span class="hljs-number">2000</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>优化后：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002120808.png" alt="image-20211002120808206"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向app对象</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//指鼠标事件</span></span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="javascript">                <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                func.apply(context, args)</span><br><span class="javascript">            &#125;, wait); <span class="hljs-comment">// setTimeout的返回值是一个数值</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    app.onmousemove = debounce(doSomeThing, <span class="hljs-number">2000</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>立即执行</p><blockquote><p>鼠标每次移入div时，数字总会在延迟wait时间后才展示，所以要优化， 当鼠标移入时，达到数字立刻变化</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002152312.gif" alt="116"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">            timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            <span class="hljs-comment">//立即执行</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (immediate) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 第一次进入，timer的值是null，callNow的值是true，所以立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 如果进入之后，鼠标一直在滑动，timer有值，callNow的值是false，所以不会立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 等待wait时间以后，设置timer的值是null，鼠标再次移动，立即执行</span></span><br><span class="javascript">                <span class="hljs-keyword">let</span> callNow = !timer;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                &#125;, wait)</span><br><span class="javascript">                callNow &amp;&amp; func.apply(context, args);</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    func.apply(context, args)</span><br><span class="javascript">                &#125;, wait); <span class="hljs-comment">// setTimeout的返回值是一个数值</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    app.onmousemove = debounce(doSomeThing, <span class="hljs-number">1000</span>, <span class="hljs-literal">true</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>返回值</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;想要的结果&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> result;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">            timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            <span class="hljs-comment">//立即执行</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (immediate) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 第一次进入，timer的值是null，callNow的值是true，所以立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 如果进入之后，鼠标一直在滑动，timer有值，callNow的值是false，所以不会立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 等待wait时间以后，设置timer的值是null，鼠标再次移动，立即执行</span></span><br><span class="javascript">                <span class="hljs-keyword">let</span> callNow = !timer;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                &#125;, wait)</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">if</span> (callNow) &#123;</span><br><span class="javascript">                    result = func.apply(context, args);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    func.apply(context, args)</span><br><span class="javascript">                &#125;, wait); <span class="hljs-comment">// setTimeout的返回值是一个数值</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> result;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    app.onmousemove = debounce(doSomeThing, <span class="hljs-number">1000</span>, <span class="hljs-literal">true</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>取消防抖</p><blockquote><p>设置等待时间是3s，如果在3秒之后，我点击了取消防抖，那个界面上就不会展示数字，只有当鼠标再次进入的时候，才会从新进行展示</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211002154738.gif" alt="117"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>取消防抖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSomeThing</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        app.innerHTML = count;</span><br><span class="javascript">        count++;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;想要的结果&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 计时器</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> result;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> debounced = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">            timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            <span class="hljs-comment">//立即执行</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (immediate) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 第一次进入，timer的值是null，callNow的值是true，所以立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 如果进入之后，鼠标一直在滑动，timer有值，callNow的值是false，所以不会立即执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 等待wait时间以后，设置timer的值是null，鼠标再次移动，立即执行</span></span><br><span class="javascript">                <span class="hljs-keyword">let</span> callNow = !timer;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                &#125;, wait)</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">if</span> (callNow) &#123;</span><br><span class="javascript">                    result = func.apply(context, args);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                    func.apply(context, args)</span><br><span class="javascript">                &#125;, wait); <span class="hljs-comment">// setTimeout的返回值是一个数值</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> result;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">// 取消防抖</span></span><br><span class="javascript">        debounced.cancel = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">clearTimeout</span>(timer);</span><br><span class="javascript">            timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> debounced;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> doSome = debounce(doSomeThing, <span class="hljs-number">3000</span>);</span><br><span class="javascript">    app.onmousemove = doSome;</span><br><span class="javascript">    <span class="hljs-comment">// 取消防抖</span></span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        doSome.cancel();</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>应用场景</p><ol><li>scroll鼠标的滚动事件</li><li>搜索框的输入查询</li><li>表单的验证</li><li>窗口大小的缩放resize</li><li>按钮的提交事件</li></ol><h2 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h2><ol><li>节流的原理</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>防抖和节流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-图片懒加载</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是懒加载"><a href="#一、什么是懒加载" class="headerlink" title="一、什么是懒加载"></a>一、什么是懒加载</h2><blockquote><p>懒加载就是优先加载可视区域中的内容，其他部分在进入可视区域再加载</p></blockquote><h2 id="二、为什么需要懒加载"><a href="#二、为什么需要懒加载" class="headerlink" title="二、为什么需要懒加载"></a>二、为什么需要懒加载</h2><blockquote><p> 全部加载会影响网页的性能</p><p>有些用户浏览页面时，并不会浏览全部，如果加载完全，造成资源的浪费</p></blockquote><h2 id="三、懒加载的原理"><a href="#三、懒加载的原理" class="headerlink" title="三、懒加载的原理"></a>三、懒加载的原理</h2><blockquote><p>图片主要是通过src实现资源请求的，那么我们只要控制图片在进入可视区域的时候赋值src，那就可以起到懒加载的目的。</p></blockquote><h2 id="四、核心过程"><a href="#四、核心过程" class="headerlink" title="四、核心过程"></a>四、核心过程</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211001153503.png" alt="image-20211001153455979"></p><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/1.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/3.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/4.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/5.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/6.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/7.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/8.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/9.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/10.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//获取所有图片选择器</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> imgs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 在页面布局的过程中存在着offsetTop不是body的情况，所以需要不断的累加，直到出现body</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTop</span>(<span class="hljs-params">e</span>) </span>&#123; </span><br><span class="javascript">        <span class="hljs-keyword">let</span> T = e.offsetTop;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(T);</span><br><span class="javascript">        <span class="hljs-keyword">while</span> (e = e.offsetParent) &#123;</span><br><span class="javascript"></span><br><span class="javascript">            T += e.offsetTop;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> T;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazyload</span>(<span class="hljs-params">imgs</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//可视区高度</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> H = <span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> S = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (H + S &gt; getTop(imgs[i])) &#123;</span><br><span class="javascript">                imgs[i].src = imgs[i].getAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        lazyload(imgs);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="六、存在问题"><a href="#六、存在问题" class="headerlink" title="六、存在问题"></a>六、存在问题</h2><blockquote><p>onscroll触发的太频繁</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211001155243.gif" alt="111"></p><h2 id="七、优化图片懒加载"><a href="#七、优化图片懒加载" class="headerlink" title="七、优化图片懒加载"></a>七、优化图片懒加载</h2><ol><li><p>控制图片从上次加载的位置进行加载</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/1.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/3.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/4.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/5.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/6.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/7.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/8.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/9.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/10.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>).length;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> imgs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>; <span class="hljs-comment">//存储图片加载的位置，避免每次从第一张开始加载图片</span></span><br><span class="javascript">    lazyload();</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onscroll = lazyload;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazyload</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> H = <span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> S = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = n; i &lt; num; i++) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (H + S &gt; imgs[i].offsetTop) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (imgs[i].getAttribute(<span class="hljs-string">&#x27;src&#x27;</span>) == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">                    imgs[i].src = imgs[i].getAttribute(<span class="hljs-string">&quot;data-src&quot;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                n = i + <span class="hljs-number">1</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用节流函数进行优化</p></li></ol><p>防抖动的原理：</p><blockquote><p>当调用动作之后的n毫秒之后才会执行，如果在这n毫秒内又调用此动作，会重新计算执行时间</p></blockquote><p>​    不足：</p><blockquote><p>当我一直滚动鼠标的时候，lazyload函数就会不断被延迟，这样只有停下来的时候才会执行，那么再有些需要及时显示的情况下，就显得不那么友好了                        </p></blockquote><p>节流原理：</p><blockquote><p>预设一个执行周期，如果这个周期结束还没有触发函数，那就触发一次，如果这个周期还没结束就触发函数，那定时器重置，开始新的周期</p></blockquote><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/1.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/2.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/3.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/4.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/5.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/6.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/7.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/8.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/9.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/10.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>).length;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> imgs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>; <span class="hljs-comment">//存储图片加载的位置，避免每次从第一张开始加载图片</span></span><br><span class="javascript">        lazyload();</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazyload</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> H = <span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> S = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = n; i &lt; num; i++) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (H + S &gt; imgs[i].offsetTop) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (imgs[i].getAttribute(<span class="hljs-string">&#x27;src&#x27;</span>) == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">                        imgs[i].src = imgs[i].getAttribute(<span class="hljs-string">&quot;data-src&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    n = i + <span class="hljs-number">1</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">//节流函数（能够解决onscroll高频触发的问题）</span></span><br><span class="javascript">        <span class="hljs-comment">// fun 执行函数 </span></span><br><span class="javascript">        <span class="hljs-comment">// delay 延迟</span></span><br><span class="javascript">        <span class="hljs-comment">// time 在time时间内必须执行一次</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fun, delay, time</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> timeout;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">let</span> context = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">                args = <span class="hljs-built_in">arguments</span>;</span><br><span class="javascript">                currTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">                <span class="hljs-built_in">clearTimeout</span>(timeout);</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (currTime - startTime &gt;= time) &#123; <span class="hljs-comment">//到达规定的触发时间，触发</span></span><br><span class="javascript">                    fun.apply(context, args);</span><br><span class="javascript">                    startTime = currTime;</span><br><span class="javascript"></span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    timeout = <span class="hljs-built_in">setTimeout</span>(fun, delay);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, throttle(lazyload, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>优化后：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20211001165824.gif" alt="112"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/55311726">原生js实现图片懒加载（lazyLoad）</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图片懒加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-XSS攻击</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httpXSS%E6%94%BB%E5%87%BB/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httpXSS%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是XSS攻击"><a href="#一、什么是XSS攻击" class="headerlink" title="一、什么是XSS攻击"></a>一、什么是XSS攻击</h2><blockquote><p>XSS是跨站脚本攻击，恶意攻击者在web页面中插入恶意的script代码，当用户访问该页面时，恶意的script会执行，达到恶意攻击的目的</p><p>XSS的攻击方式就是“教唆”网站去执行本来不存在于这个网页中的前端代码</p></blockquote><h2 id="二、XSS的危害"><a href="#二、XSS的危害" class="headerlink" title="二、XSS的危害"></a>二、XSS的危害</h2><ol><li>窃取网页浏览中的cookie值</li><li>劫持流量实现恶意跳转</li><li>配合csrf攻击完成恶意请求</li></ol><h2 id="三、xss的分类"><a href="#三、xss的分类" class="headerlink" title="三、xss的分类"></a>三、xss的分类</h2><p>反射型XSS：</p><ul><li>“反射”主要指的是服务器把恶意代码反射注入到浏览器端</li><li>攻击是一次性的</li></ul><p>攻击步骤：</p><ul><li>攻击者在url后面的参数中加入恶意攻击代码</li><li>当用户打开带有恶意代码的url链接的时候，网站的服务器将恶意代码从url中取出，然后拼接到html中返回给浏览器端</li><li>用户浏览器接受到后相应并解析代码，其中的恶意代码也会被执行到</li></ul><p>常见的反射型XSS：</p><ul><li>恶意链接</li></ul><p>存储型XSS：</p><ul><li>攻击是持久性的</li></ul><p>攻击步骤：</p><ul><li>攻击者将恶意代码存放到目标网站的数据库中</li><li>用户浏览目标网站的时候，网站服务器从数据库中把恶意代码取出，然后拼接到html后返回给浏览器</li><li>浏览器接受到响应后解析并执行，其中恶意代码也会被执行</li></ul><p>如何解决：</p><ul><li>后端对提交的数据进行过滤</li><li>前端做一些处理，对script等标签，将特殊字符替换成html编码等</li></ul><p>DOM-based型xss：</p><p>攻击步骤：</p><ul><li>攻击者构造出特殊的url，其中url中含有恶意代码</li><li>用户打开含有恶意代码的url</li><li>用户浏览器响应解析并执行，前端使用js取出url中恶意代码并执行</li></ul><h2 id="四、解决方案"><a href="#四、解决方案" class="headerlink" title="四、解决方案"></a>四、解决方案</h2><ol><li>cookie安全策略</li><li>X-XSS-Protection设置</li><li>XSS防御HTML编码</li><li>XSS 防御HTML Attribute编码</li><li>XSS防御之javascript编码</li><li>XSS 防御之 URL 编码</li><li>XSS 防御之 CSS 编码</li><li>开启CSP网页安全政策防止XSS攻击</li></ol><h2 id="五、sql注入"><a href="#五、sql注入" class="headerlink" title="五、sql注入"></a>五、sql注入</h2><p>在登录界面的时候，都需要输入用户名和密码，如果我输入的密码是‘or’ ‘123’ = ‘123’，在我们查询数据库的时候，拼接以后的sql语句是<code>select * from user where username =&#39;&#39;and password =&#39;&#39; or &#39;123&#39; =&#39;123&#39;</code>,这样用户名和密码的校验是没有意义的。</p><p>sql注入攻击：sql语句伪造参数，然后对参数拼接以后形成xss攻击的sql语句，最后就会导致数据库被攻击了。</p><p>解决方案：</p><ul><li>使用预编译语句，伪造的参数到达服务器端的时候只是简单的字符串，不会形成sql攻击</li><li>数据库中的密码不应该明文存储，最好采取加密的方式</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/26177815">浅谈XSS攻击的那些事（附常用绕过姿势）</a></p><p><a href="https://www.cnblogs.com/tugenhua0707/p/10909284.html">web安全之XSS攻击原理及防范</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-UDP和TCP</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CUDP%E5%92%8CTCP/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9CUDP%E5%92%8CTCP/</url>
    
    <content type="html"><![CDATA[<h2 id="一、UDP"><a href="#一、UDP" class="headerlink" title="一、UDP"></a>一、UDP</h2><ol><li>UDP处在传输层</li><li>不提供数据包分组、组装</li><li>不对数据包进行排序</li><li>不关心发送的数据是否安全完整到达</li><li>不像TCP在发送数据之前进行3次握手，无连接的，想发数据就发</li><li>UDP支持一对一、一对多、多对多、多对一的方式</li><li>UDP是面向报文的</li><li>UDP具有明显的不可靠性（网络不好的情况下会发生丢包，但是网络好的情况下能够达到高效的实时的传输）</li></ol><h2 id="二、TCP"><a href="#二、TCP" class="headerlink" title="二、TCP"></a>二、TCP</h2><ol><li>TCP是一种面向连接的、可靠的、基于字节流的传输层通讯协议</li><li>TCP连接的含义是建立3次握手</li><li>TCP断开连接是要进行4次挥手</li><li>TCP连接是端对端的，只支持一对一的传输</li><li>TCP提供拥塞控制，当网络出现拥塞时，TCP能够减少向网络发送数据的数量和速度</li><li>TCP会处理丢包，确认丢包会进行重传</li></ol><h2 id="三、3次握手"><a href="#三、3次握手" class="headerlink" title="三、3次握手"></a>三、3次握手</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930213906.png" alt="image-20210930213905113"></p><h2 id="四、4次挥手"><a href="#四、4次挥手" class="headerlink" title="四、4次挥手"></a>四、4次挥手</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930214023.png" alt="image-20210930214022564"></p><h2 id="五、为什么是3次握手"><a href="#五、为什么是3次握手" class="headerlink" title="五、为什么是3次握手"></a>五、为什么是3次握手</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930213836.png" alt="image-20210930213835881"></p><p>第一次握手：确认客户端的发送能力</p><p>第二次握手：确认服务器端的收发能力</p><p>第三次握手：确认客户端的接收能力</p><p>二次握手无法确认客户端的接收能力，所以最少是3次握手</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/78244069">一篇搞懂TCP的三次握手 四次挥手</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDP和TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-本地存储</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/http%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/http%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、浏览器缓存分类"><a href="#一、浏览器缓存分类" class="headerlink" title="一、浏览器缓存分类"></a>一、浏览器缓存分类</h2><ul><li>http缓存和本地存储：本篇主要讲解本地存储</li></ul><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930135815.png" alt="image-20210930135813684"></p><h2 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h2><ol><li>cookie机制：</li></ol><blockquote><p>如果没有在浏览器端设置cookie的过期时间，cookie保存在内存中，生命周期随着浏览器的关闭而结束，这种cookie简称回话cookie。如果设置了过期时间，cookie保存在硬盘中，关闭浏览器以后cookie还会存在，到过期时间才会消失。</p></blockquote><ol start="2"><li>cookie的缺点<ul><li>单个cookie的存储大小不能超过4kb，大小受到限制</li><li>安全性较低，cookie欺骗、cookie截获</li><li>有些状态不可能保存在客户端</li><li>每次访问都要携带cookie给服务器，浪费带宽</li><li>cookie数据有路径的概念，可以限制cookie只属于某个路径下</li></ul></li></ol><h2 id="三、服务器端的session机制"><a href="#三、服务器端的session机制" class="headerlink" title="三、服务器端的session机制"></a>三、服务器端的session机制</h2><ol><li>session机制</li></ol><blockquote><p>当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否有sessionId，如果有id，服务器根据该id返回对应的session对象。</p><p>如果客户端请求中没有session对象，服务器会创建新的session对象，并且把sessionId在本次响应中返回给客户端。</p><p>通常使用cookie的方式把sessionId存储到客户端，如果用户禁用了cookie，则要使用URL重写，当浏览器支持cookie时，url不做任何处理，当浏览器不支持cookie的时候，将会重写URL将sessionId拼接到访问地址之后。</p></blockquote><ol start="2"><li>session的安全性大于cookie<ul><li>session存储在cookie，要攻破session先攻破cookie</li><li>sessionId要有人登录，或者启动session_start才会有，所以攻破也不一定得到sessionId</li><li>第二次启动session_start后，前一次的sessionId就失效了，session过期以后，sessionId也就消失了</li><li>sessionId是加密的</li></ul></li><li>session的缺点<ul><li>session保存的东西越多，就越占用服务器内存，对于在线人数比较多的网站，服务器的压力比较大</li><li>依赖cookie，如果不支持cookie，就要进行url重写，不安全</li><li>过度使用session变量会导致代码不可读而且不好维护</li></ul></li></ol><h2 id="四、LocalStorage"><a href="#四、LocalStorage" class="headerlink" title="四、LocalStorage"></a>四、LocalStorage</h2><blockquote><p>将数据保存在客户端本地的硬件设备（通常指硬盘，也可以是其他硬件设备），即使浏览器关闭了，数据任然存在，除非手动删除。</p></blockquote><h2 id="五、SessionStorage"><a href="#五、SessionStorage" class="headerlink" title="五、SessionStorage"></a>五、SessionStorage</h2><blockquote><p>将数据保存在session对象中，session指的是用户浏览某个网站，从进入这个网站到浏览器关闭所经过的时间，session对象可以保存这段时间内的所有数据</p></blockquote><h2 id="五、webSql（已经弃用）"><a href="#五、webSql（已经弃用）" class="headerlink" title="五、webSql（已经弃用）"></a>五、webSql（已经弃用）</h2><h2 id="六、IndexDB（类似于前端数据库）"><a href="#六、IndexDB（类似于前端数据库）" class="headerlink" title="六、IndexDB（类似于前端数据库）"></a>六、IndexDB（类似于前端数据库）</h2><h2 id="七、本地存储的对比"><a href="#七、本地存储的对比" class="headerlink" title="七、本地存储的对比"></a>七、本地存储的对比</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930162805.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css之BFC</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E4%B9%8BBFC/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E4%B9%8BBFC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、常见的定位方式"><a href="#一、常见的定位方式" class="headerlink" title="一、常见的定位方式"></a>一、常见的定位方式</h2><ul><li>普通流 (normal flow)</li></ul><blockquote><p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p></blockquote><ul><li>浮动 (float)</li></ul><blockquote><p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p></blockquote><ul><li>绝对定位 (absolute positioning)</li></ul><blockquote><p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p></blockquote><h2 id="二、BFC"><a href="#二、BFC" class="headerlink" title="二、BFC"></a>二、BFC</h2><p>BFC（Block Formatting Contexts） 块级格式化上下文</p><p>BFC内部的元素布局不会影响到外部元素</p><h2 id="三、触发BFC的条件"><a href="#三、触发BFC的条件" class="headerlink" title="三、触发BFC的条件"></a>三、触发BFC的条件</h2><ul><li>body根元素</li><li>浮动元素，float值除了none以外</li><li>绝对定位元素（absloute、fixed）</li><li>display的值（inline-block、table-cells、flex）</li><li>overflow除了visible以外的值</li></ul><h2 id="四、BFC特性"><a href="#四、BFC特性" class="headerlink" title="四、BFC特性"></a>四、BFC特性</h2><ol><li><p>同一个BFC下外边距会发生折叠</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">    &lt;style&gt;<br>        div&#123;<span class="hljs-attr">width</span>: 100px;height: 100px;background-color: aquamarine;margin: 100px;&#125;<br>    &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929204103.png" alt="image-20210929204102607"></p></li><li><p>解决折叠:让元素不在属于同一个BFC，并且设置其中的一个是BFC，利用<code>overflow: hidden;</code>触发</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">    &lt;style&gt;<br>        p&#123;<span class="hljs-attr">width</span>: 100px;height: 100px;background-color: aquamarine;margin: 100px;&#125;<br>        .container&#123;<span class="hljs-attr">overflow</span>: hidden;&#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929204553.png" alt="image-20210929204552045"></p></li><li><p>清除浮动</p><p>浮动的元素，脱离文本流</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 2px solid #000;&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:100px;background-color:beige;float: left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929204903.png" alt="image-20210929204902623"></p></li></ol><p>触发容器的BFC，那么容器就会包含浮动元素</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 2px solid #000;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:100px;background-color:beige;float: left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929205030.png" alt="image-20210929205029203"></p><ol start="4"><li><p>实现2栏自适应布局</p><p>没有实现BFC，浮动的元素会覆盖其他元素</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px;width: 100px;float: left;background-color: antiquewhite;&quot;</span>&gt;</span>我是一个左浮动的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 200px;width: 200px;background-color: blueviolet;&quot;</span>&gt;</span>我是一个没有设置浮动, </span><br><span class="xml">        也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929205421.png" alt="image-20210929205421015"></p></li></ol><p>设置BFC，实现2栏自动布局,左边的宽度固定，右边会自动适应剩下的宽度</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 500px;&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px;width: 100px;float: left;background-color: antiquewhite;&quot;</span>&gt;</span>我是一个左浮动的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 200px;background-color: blueviolet;overflow: hidden;&quot;</span>&gt;</span>我是一个没有设置浮动, </span><br><span class="xml">            也没有触发 BFC 元素, height:200px; background: #eee;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929210134.png" alt="image-20210929210133042"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/25321647">10 分钟理解 BFC 原理</a></p><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">什么是BFC？看这一篇就够了</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BFC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css父级塌陷</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E7%88%B6%E7%BA%A7%E5%A1%8C%E9%99%B7/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E7%88%B6%E7%BA%A7%E5%A1%8C%E9%99%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对浮动的理解"><a href="#一、对浮动的理解" class="headerlink" title="一、对浮动的理解"></a>一、对浮动的理解</h2><p>在了解什么是浮动之前我们先了解一下html元素在普通流排列方式。在普通流中，元素是按照它在 HTML 中的出现的先后顺序自上而下依次排列布局的，在排列过程中所有的行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为一整行。如果没有特殊样式指定，所有元素默认都是按照普通流方式排列布局，即普通流中元素的位置由该元素在 HTML 文档中的位置决定的。</p><p>浮动使元素脱离文档普通流，漂浮在普通流之上的。浮动元素依然按照其在普通流的位置上出现，然后尽可能的根据设置的浮动方向向左或者向右浮动，直到浮动元素的外边缘遇到包含框或者另一个浮动元素为止，且允许文本和内联元素环绕它。浮动会产生块级框（相当于设置了display:block），而不管该元素本身是什么。<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115840.png" alt="img"></p><p>就如上图的显示的div1，div2，div3就是按照普通流排列布局方式呈现的，而后面的div4，div5，div6中的div5的布局方式就不一样了，因为我给div5设置了向左浮动。此时div5脱离普通流，漂浮在普通流之上，所以导致原来div5在普通流中的位置空了出来，div6自动补上去（普通流（div6）表现的和浮动元素不存在一样）。</p><h2 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h2><p>浮动导致元素已不在普通流中，所以在排列布局的时候文档中的普通流表现的和浮动元素不存在一样，当浮动元素的高度超出包含框的时候，会出现包含框不会自动撑高来包裹浮动元素，即所谓的“高度塌陷”。如下图所示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115823.png" alt="img"></p><h2 id="三、浮动对比"><a href="#三、浮动对比" class="headerlink" title="三、浮动对比"></a>三、浮动对比</h2><h3 id="没有浮动之前："><a href="#没有浮动之前：" class="headerlink" title="没有浮动之前："></a>没有浮动之前：</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    &lt;style&gt;<br>        <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;&#125;<br>        <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195143.png" alt="image-20210929195142231"></p><h3 id="浮动后：子元素脱离了文档流，父元素的高度不会被撑开，成为高度塌陷"><a href="#浮动后：子元素脱离了文档流，父元素的高度不会被撑开，成为高度塌陷" class="headerlink" title="浮动后：子元素脱离了文档流，父元素的高度不会被撑开，成为高度塌陷"></a>浮动后：子元素脱离了文档流，父元素的高度不会被撑开，成为高度塌陷</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    &lt;style&gt;<br>        <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;&#125;<br>        <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195925.png" alt="image-20210929195924737"></p><h2 id="四、清除浮动的方式"><a href="#四、清除浮动的方式" class="headerlink" title="四、清除浮动的方式"></a>四、清除浮动的方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>给父容器添加after伪类</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    &lt;style&gt;<br>        <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;&#125;<br>        <span class="hljs-selector-class">.father</span><span class="hljs-selector-pseudo">::after</span>&#123;<span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-attribute">display</span>: block;<span class="hljs-attribute">clear</span>: both;&#125;<br>        <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>给父元素添加样式overflow: hidden;或者overflow: auto;(不推荐该用法，使用hidden时当内容较多时会被遮挡，使用auto时内容较多会出现滚动条。构建块格式化上下（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    &lt;style&gt;<br>        <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;<span class="hljs-attribute">overflow</span>: hidden;&#125;<br>        <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>添加空标签，并设置clear:both的样式（不推荐使用，可能会增加很多空标签，代码冗余）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;&#125;<br><span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br><span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br><span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br><span class="hljs-selector-class">.blank</span>&#123;<span class="hljs-attribute">clear</span>: both;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;blank&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p>给父容器设置高度 （不推荐，当浮动元素和设置的容器高度不一样时会出现问题，适合固定高度布局时使用）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br>     <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;<span class="hljs-attribute">height</span> :<span class="hljs-number">100px</span>;&#125;<br>     <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>     <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>     <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>&lt;/style&gt;<br> &lt;<span class="hljs-selector-tag">body</span>&gt;<br>     &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>         &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>         &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>         &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>     &lt;/<span class="hljs-selector-tag">div</span>&gt;<br> &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h3 id="方式五"><a href="#方式五" class="headerlink" title="方式五"></a>方式五</h3><p>让父元素一起浮动（不推荐，可能会影响父元素的兄弟元素和其父元素的排列布局）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br>  &lt;style&gt;<br>            <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;<span class="hljs-attribute">float</span>: left;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;&#125;<br>            <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>            <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>            <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>        &lt;/style&gt;<br>    &lt;<span class="hljs-selector-tag">body</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>            &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>            &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>            &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h3 id="方式六"><a href="#方式六" class="headerlink" title="方式六"></a>方式六</h3><p>给父元素设置display:table或者display:inline-block(构建块格式化上下文（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-comment">/* .father &#123; background-color: #7fffd4;display: table;width: 100%;&#125; */</span><br>    <span class="hljs-selector-class">.father</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#7fffd4</span>;<span class="hljs-attribute">display</span>: inline-block;<span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;&#125;<br>    <span class="hljs-selector-class">.son1</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#87ceeb</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    <span class="hljs-selector-class">.son2</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5dc</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>    <span class="hljs-selector-class">.son3</span> &#123;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffe4c4</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son1&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;son3&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929195843.png" alt="image-20210929195842964"></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.csdn.net/u013356907/article/details/82778480">https://blog.csdn.net/u013356907/article/details/82778480</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css父级塌陷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css样式隔离</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<ol><li><p>为什么要做css样式隔离</p><ul><li>防止样式滥用导致全局污染</li><li>复用性低</li></ul></li><li><p>css实现样式隔离的方式</p><ul><li>命名空间，就是给css规范化命名</li></ul></li></ol><ul><li><p>css Modules vue常用，需要webpack配置css-loader或者scss-loader，module为true</p><div class="note note-secondary">            <p>{    </p><p>​     loader: ‘css-loader’,    </p><p>​      options: {        </p><p>​       modules: true, // 开启模块化       </p><p>​       localIdentName: ‘[path][name]-[local]-[hash:base64:5]’   </p><p>​     } </p><p>}  </p>          </div><ul><li>css in js  (暂时不了解)</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6867345501860151309">css 模块化 &amp; 样式隔离</a></p><p><a href="https://zhuanlan.zhihu.com/p/215820573">css隔离</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css样式隔离</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-无重复最长子串</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p>          </div><div class="note note-secondary">            <p>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p>          </div><div class="note note-secondary">            <p>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>          </div><div class="note note-secondary">            <p>输入: s = “”<br>输出: 0</p>          </div><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lengthOfLongestSubstring</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> n = str.length;<span class="hljs-comment">// 字符串长度</span><br>    <span class="hljs-keyword">let</span> rk = -<span class="hljs-number">1</span>; <span class="hljs-comment">//右指针</span><br>    <span class="hljs-keyword">let</span> occ = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(); <span class="hljs-comment">//去重的集合</span><br>    <span class="hljs-keyword">let</span> len = <span class="hljs-number">0</span>; <span class="hljs-comment">// 返回结果的长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 左指针右移 意味着重新计算下一个字符开始的位置</span><br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>            occ.delete(str.charAt(i - <span class="hljs-number">1</span>)); <span class="hljs-comment">//删除一个元素</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (rk + <span class="hljs-number">1</span> &lt; n &amp;&amp; !occ.has(str.charAt(rk + <span class="hljs-number">1</span>))) &#123; <span class="hljs-comment">// 右指针一直右移，直到最后或者是出现重复</span><br>            occ.add(str.charAt(rk + <span class="hljs-number">1</span>));<br>            rk++;<br>        &#125;<br>        len = <span class="hljs-built_in">Math</span>.max(len, rk - i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;jkikodokodokdddqqqqqnnqiwoe&quot;</span>;<br><span class="hljs-built_in">console</span>.log(lengthOfLongestSubstring(str));<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929165614.png" alt="image-20210929165613115"></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>无重复最长子串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-nextTick和事件循环</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuenextTick%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuenextTick%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是进程和线程"><a href="#一、什么是进程和线程" class="headerlink" title="一、什么是进程和线程"></a>一、什么是进程和线程</h2><p>进程：指的是系统正在运行的一个应用程序，程序一旦运行就是一个进程，进程是系统进行资源分配的基本单位，是操作系统的基础。</p><p>线程：线程包含在进程中，是进程中一个独立执行的一个单元执行流，线程是程序执行的最小单位</p><p>进程之间是通过TCP/IP的端口来实现交互的</p><p>线程的通信比较简单，共享同一块内存</p><p>小结：</p><ol><li><p>进程要分配一大块内存，线程只需要分配一部分栈就可以了</p></li><li><p>一个程序至少有一个进程，一个进程至少有一个线程</p></li><li><p>进程是资源分配的最小单位，线程是程序执行的最小单位</p></li><li><p>一个线程可以创建和撤销另一个线程，同一个进程中的多个线程可以并发执行</p></li></ol><h2 id="二、浏览器渲染过程"><a href="#二、浏览器渲染过程" class="headerlink" title="二、浏览器渲染过程"></a>二、浏览器渲染过程</h2><p>浏览器的渲染进程：</p><ol><li>解析html和css文件，加载图片等资源文件，渲染成页面</li><li>执行解析js文件脚本代码</li></ol><p>浏览器渲染进程中的多个线程并发执行</p><ol><li><p>GUI线程</p><p>（1）解析html文件构建DOM树，解析css文件，结合DOM树生成渲染树，然后布局和绘制成页面</p><p>（2）当渲染树需要更改样式属性时，发生重绘；当渲染树中的元素规则尺寸、布局或者显示隐藏的时候，发生回流</p></li><li><p>JS引擎线程</p></li><li><p>时间触发线程</p></li><li><p>定时器触发线程</p></li><li><p>异步http请求线程</p></li></ol><p>GUI线程和js线程是相互排斥的，因为js线程在执行的过程中可能会发生重绘和回流，所以GUI线程执行的时候，js线程会挂起，等待GUI线程执行完成。js线程执行时，同理。（个人感觉有点异步的意思，单线程）</p><p>小结：</p><ol><li>浏览器的渲染进程包括：解析html和css文件加载图片资源，渲染成界面，执行解析js文件</li><li>整个 浏览器的渲染进程会开启多个线程：GUI线程，JS引擎线程，时间触发线程，定时器线程，异步http请求线程</li><li>GUI线程和JS引擎线程相互排斥</li></ol><h2 id="三、什么是事件循坏"><a href="#三、什么是事件循坏" class="headerlink" title="三、什么是事件循坏"></a>三、什么是事件循坏</h2><ol><li><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3></li></ol><p>所有的任务都可以分为同步任务和异步任务</p><p>同步任务可以理解成立即执行任务，同步任务一般会直接进入主线程中进行执行，异步任务比如ajax网络请求，setTimeout定时函数都属于异步任务，异步任务会通过事件队列的机制来进行协调。</p><p>同步任务和异步任务进入不同的执行环境，同步进入主线程，即主执行栈，异步进入事件队列，主线程内的任务执行完成为空，就去查看事件队列里的任务，推入主线程，这个过程不断的循环执行就是事件循环。</p><p>借用网上博主的一篇流程图说明这个过程：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929093719.png" alt="img"></p><ol start="2"><li><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><p>js分为2种任务类型宏任务（macrotask）和微任务（microtask）在ES中，宏任务称为task，微任务称为jobs</p><p>宏任务：每次执行栈执行的代码就是一个宏任务（包括从事件队列中获取一个事件回调并放到执行栈执行）</p><p>每一个<code>宏任务</code>会从头到尾把这个任务执行完成，不会执行其他</p><p>浏览器为了能够使得js内部的宏任务和DOM任务有序的执行，会在一个<code>宏任务</code>结束之后，下一个<code>宏任务</code>开始之前，对页面进行重新渲染（task–&gt;渲染–&gt;task–&gt;…）</p><p>微任务：可以理解成在当前<code>宏任务</code>结束后立即执行的任务，也就是说在当前<code>宏任务</code>结束后，下一个<code>宏任务</code>之前，在渲染之前</p><p>所以微任务的响应速度相比setTImeout要快，因为不需要等待渲染，也就是说在某一个<code>宏任务</code>执行完成后，就会立即执行在它执行期间产生的所有<code>微任务</code>，（在渲染前）</p><p>宏任务主要包括：script整体代码、setTimeout、setInterval、I/O、UI交互事件、setImmediate</p><p>微任务主要包括：Promise、MutaionObserver、process.nextTick(Node.js 环境)</p><div class="note note-secondary">            <p>在node环境中，nextTick的执行优先级高于Promise，可以简单的理解为：在宏任务结束后会先执行微任务nextTick，在执行微任务Promise部分</p>          </div><p>小结：</p><ol><li><p>执行一个宏任务（如果没有就从事件队列中读取）</p></li><li><p>执行过程中如果遇到微任务，就添加到微任务的事件队列中</p></li><li><p>宏任务执行完成，立即执行当前微任务队列中的所有微任务（依次执行）</p></li><li><p>当前宏任务执行完成，开始检查渲染，然后GUI线程接管渲染，渲染完成后，js线程继续接管，开始下一个宏任务</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929111831.png" alt="image-20210929111830215"></p></li></ol></li></ol><h2 id="四、执行栈"><a href="#四、执行栈" class="headerlink" title="四、执行栈"></a>四、执行栈</h2><p> 当我们执行一个方法的时候，js会生成这个方法对象的执行环境，也叫做执行上下文</p><p>这个执行上下文有这个<code>方法的私有作用域</code>、<code>上次作用域的指向</code>、<code>方法的参数</code>、<code>私有作用域中定义的变量</code>、<code>this 对象</code></p><p>这个执行环境被添加到一个栈中，这个栈就是执行栈</p><h2 id="五、Vue的异步更新队列"><a href="#五、Vue的异步更新队列" class="headerlink" title="五、Vue的异步更新队列"></a>五、Vue的异步更新队列</h2><p>Vue中DOM的更新时异步的，是在微任务中更新DOM</p><div class="note note-secondary">            <p>Vue更新DOM是异步执行的，只要侦听到数据变化，vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个watcher被多次触发，只会被推入到队列中一次，这种在缓冲时去除重复数据对于避免不必要的计算和DOM操作是非常重要的，然后在下一次事件循环中，vue刷新队列并执行实例工作，vue在内部对异步尝试使用原生的promise.then</p>          </div><div class="note note-secondary">            <p>例如，当你设置 vm.someData = ‘new value’，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。</p>          </div><p>当我们想要改变vue中某个数据的值时，vue不会立即重新渲染，数据不会立即发生改变，而是会在下一个事件循环的时候更新，这主要是因为vue中DOM操作是异步的</p><h2 id="六、nextTick应用场景"><a href="#六、nextTick应用场景" class="headerlink" title="六、nextTick应用场景"></a>六、nextTick应用场景</h2><ol><li><p>在vue的生命周期函数created钩子函数进行的DOM操作一定要放到Vue.nextTick回调函数中</p></li><li><p>在数据变化后要执行某个操作，这个操作需要使用随数据改变而改变DOM结构的时候，这个操作都应该放到vue.nextTick()的回调函数中</p></li><li><p>代码解释</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>vue中nextTick的作用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">item.id</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">addItem</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-attr">list</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span> &#125;]</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">let</span> length = <span class="hljs-built_in">this</span>.list.length + <span class="hljs-number">1</span>;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.list.push(&#123; <span class="hljs-attr">id</span>: length &#125;);</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.list);</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.list,<span class="hljs-string">&#x27;in nextTick&#x27;</span>);</span><br><span class="javascript">                &#125;)</span><br><span class="javascript"></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210929104527.png" alt="image-20210929104526335"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_43737327/article/details/107578891">nextTick和JS的事件循环机制</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextTick和事件循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue生命周期</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么vue的生命周期</p></li><li><p>created和mounted的区别</p><p>浏览器的渲染过程</p><ul><li>构建DOM 树</li><li>构建css规则树，根据执行顺序解析js文件</li><li>构建渲染树Render Tree</li><li>渲染树布局 layout</li><li>渲染树绘制</li></ul><p>vue的生命周期</p><ul><li>构建DOM 树 ——-实例还没有实例化，data observer和event watcher也没有调用，所以调用data、method、DOM都无法得到正确的数据（beforeCreate）</li><li>构建css规则树，根据执行顺序解析js文件——-解析了dom、css、js但是还没有挂载到页面上，实例被初始化，还没有挂载到$el上，可以获取data、method，无法获取DOM（created）</li><li>构建渲染树render tree ——（beforeMount）</li><li>渲染树布局 layout</li><li>渲染树绘制 ——-完成了渲染，也完成了渲染树的布局，vue的template成功挂载到$el上，整个界面可以显示在浏览器上，可以获取data、method、DOM（mounted）</li></ul><p>代码解释</p><ul><li>在data中定义了数值a:[111],如果在created中更改a的值，会达到想要的效果（还没有挂载到页面上，可以改变在页面中的展示值）</li><li>在data中定义了数值a:[111],如果在mounted中更改a的值，页面不会有任何变化（因为这个时候页面已经构建完成了）</li><li>这也就可以延伸到vue的nextTick，因为在mounted中，DOM已经构建完成，这个时候对DOM的操作是完全有效的，如果要在created中操作DOM，从原理上来说不可以，所以需要nextTick的帮助，完成对DOM的有效操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">    &lt;div id=&#x27;app&#x27;&gt;<br>        &lt;span&gt;&#123;&#123;a&#125;&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    let app = new Vue(&#123;<br>        el: &#x27;#app&#x27;,<br>        data() &#123;<br>            return &#123;<br>                a: [111]<br>            &#125;<br>        &#125;,<br>        // created() &#123;<br>        //     this.a[0] = 222; //页面展示是[222]<br>        // &#125;,<br>        // mounted() &#123;<br>        //     this.a[0] = 222; //页面展示是[111]<br>        // &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识点网络图</title>
    <link href="/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93%E7%9F%A5%E8%AF%86%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9B%BE/"/>
    <url>/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93%E7%9F%A5%E8%AF%86%E7%82%B9%E7%BD%91%E7%BB%9C%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue"><a href="#一、vue" class="headerlink" title="一、vue"></a>一、vue</h2><ol><li>vue中的nextTick<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E4%B8%AD-nexttick/">vue-vue中$nextTick</a></li><li>vue的生命周期<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">vue-vue生命周期</a></li><li>nextTick和事件循环<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E5%B0%8F%E7%B1%BBnexttick%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/">vue-nextTick和事件循环</a></li><li>webpack打包</li><li>vue2 和 vue3 的区别</li><li>vue 实现 nextTick 原理</li><li>vue 组件间通信的方式</li><li>vuex 实现的具体的原理</li><li>vue 双向绑定的原理</li></ol><h2 id="二、js"><a href="#二、js" class="headerlink" title="二、js"></a>二、js</h2><ol><li>防抖和节流</li><li>原型链</li><li>单例模式， 观察者模式和发布-订阅模式</li><li>闭包</li><li>事件冒泡</li><li>Promise(promise 的三种状态)</li><li>JS 的垃圾回收机制</li><li>箭头函数</li><li>this指向</li><li>axios和fetch</li><li>JS 事件循环和 Node.js 的事件循环的区别</li><li>ES6 的新特性</li><li>ES6 的模块化和 CommonJS 模块化的区别<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-jscommonjs%E5%92%8Ces6%E6%A8%A1%E5%9D%97%E5%8C%BA%E5%88%AB/">mjs-jsCommonJs和Es6模块区别</a></li><li>import 和 require的最主要的区别</li><li>promise 和 await async 之间的关系</li><li>ES6 之前的继承方式</li><li>typeof 和 instanceof 的区别，手撕 instanceof</li><li>defer 和 async 的区别</li><li>懒加载具体实现的原理</li><li>优化图片懒加载</li></ol><h2 id="三、css"><a href="#三、css" class="headerlink" title="三、css"></a>三、css</h2><ol><li>样式隔离<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB/">css样式隔离</a></li><li>父级塌陷<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E7%88%B6%E7%BA%A7%E5%A1%8C%E9%99%B7/">css父级塌陷</a></li><li>BFC<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss%E4%B9%8Bbfc/">css之BFC </a></li></ol><h2 id="四、http"><a href="#四、http" class="headerlink" title="四、http"></a>四、http</h2><ol start="2"><li>XSS 攻击<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httpxss%E6%94%BB%E5%87%BB/">http-XSS攻击 </a></li><li>XSS 攻击和 CSRF 攻击</li><li>http和https区别<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-06http%E5%92%8Chttps%E5%AF%B9%E6%AF%94/">http-http和https对比 </a></li><li>状态码301和302<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E7%8A%B6%E6%80%81%E7%A0%81/">http-13状态码</a></li><li>浏览器缓存：http 缓存<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%BC%B1%E7%BC%93%E5%AD%98/">http-强缓存和弱缓存</a></li><li>浏览器缓存：本地存储<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/http%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/">http-本地存储 </a></li><li>cookie、localstorage、sessionstorage的区别<a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/http%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/">http-本地存储 </a></li></ol><h2 id="五、浏览器"><a href="#五、浏览器" class="headerlink" title="五、浏览器"></a>五、浏览器</h2><ol start="4"><li>跨域（原理、实现方式、手写JSONP）</li><li>cookie 的原理</li><li>浏览器输入URL</li></ol><h2 id="六、项目"><a href="#六、项目" class="headerlink" title="六、项目"></a>六、项目</h2><h2 id="七、计算机网络"><a href="#七、计算机网络" class="headerlink" title="七、计算机网络"></a>七、计算机网络</h2><ol><li>TCP 和 UDP <a href="https://kjjblog.netlify.app/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Cudp%E5%92%8Ctcp/">计算机网络-UDP和TCP </a></li></ol><h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><ol><li>前端体系</li><li>websocket 了解</li></ol>]]></content>
    
    
    <categories>
      
      <category>知识总结</category>
      
      <category>前端总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知识点网络图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-ajax初学</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-ajax%E5%88%9D%E5%AD%A6/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-ajax%E5%88%9D%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是同步和异步</p><ul><li>同步是必须等待上一个任务完成，才能执行下一个任务</li><li>异步是不必等待，直接执行下一个任务</li></ul></li><li><p>promise主要解决了回调地狱的问题</p></li><li><p>ajax中不使用promise</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$.ajax(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;username=mtt&amp;password=1&#x27;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function">() =&gt;</span> &#123; &#125;, <span class="hljs-comment">//成功的回调函数</span><br>    <span class="hljs-attr">fail</span>: <span class="hljs-function">() =&gt;</span> &#123; &#125; <span class="hljs-comment">//失败的回调函数</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>不使用promise成功和失败回作为对象的属性返回</li></ul></li><li><p>ajax中使用promise</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myButton&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">responseText</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;成功&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(responseText);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fail</span>(<span class="hljs-params">request</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(request);<br>&#125;<br>myButton.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    $.ajax(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;username=mtt&amp;password=1&#x27;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    &#125;).then(success, fail)<br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>then的回调函数，参数一是成功函数，参数二是失败函数，是固定的</li></ul></li><li><p>使用promise的优点</p><ul><li><p>不用记住成功和失败函数的函数名，then默认位置表示</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$.ajax(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;username=mtt&amp;password=1&#x27;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span><br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">responseText</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(responseText), <span class="hljs-function">(<span class="hljs-params">resquest</span>) =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(resquest) &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>可以对返回值，进行多次处理</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$.ajax(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;username=mtt&amp;password=1&#x27;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span><br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">responseText</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(responseText);<br>    <span class="hljs-keyword">return</span> responseText;<span class="hljs-comment">// 可以传给第二个then的参数</span><br>&#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败&quot;</span>);<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">responseText</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二个then&quot;</span>);<br>    <span class="hljs-built_in">console</span>.log(responseText); <span class="hljs-comment">//拿到第一次then的返回值</span><br>&#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>封装一个类似$.Ajax()中的Promise的简易版本)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ajax = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url, param, type = <span class="hljs-string">&#x27;post&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>     $.ajax(&#123;<br>            <span class="hljs-attr">type</span>: type,<br>            <span class="hljs-attr">url</span>: url,<br>            <span class="hljs-attr">data</span>: data,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>            <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params">res</span>)</span> &#123;<br>                resolve(res);<br>            &#125;,<br>            <span class="hljs-function"><span class="hljs-title">fail</span>(<span class="hljs-params">res</span>)</span> &#123;<br>                reject(res.statusText);<br>            &#125;<br>        &#125;)<br><br>    &#125;)<br>&#125;<br>ajax(<span class="hljs-string">&#x27;https://www.cnblogs.com/elexmiumiu/p/12196122.html&#x27;</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123&#x27;</span> &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>封装ajax</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.JQuery.ajax = <span class="hljs-function">(<span class="hljs-params">&#123; method, path, body, headers &#125;</span>) =&gt;</span> &#123; <span class="hljs-comment">//es6的箭头函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        request.open(method, path); <span class="hljs-comment">//配置打开</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> headers) &#123;<br>            <span class="hljs-keyword">let</span> value = headers[key];<br>            request.setRequestHeader(key, value); <span class="hljs-comment">//设置请求头</span><br>        &#125;<br>        request.send(body); <span class="hljs-comment">//发送数据</span><br>        request.onreadystatechange = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (request.readyState === <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">if</span> (request.status &gt;= <span class="hljs-number">200</span> &amp;&amp; request.status &lt;= <span class="hljs-number">400</span>) &#123;<span class="hljs-comment">// 服务器端返回成功</span><br>                    resolve.call(<span class="hljs-literal">undefined</span>, request.responseText); <span class="hljs-comment">//成功函数</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.status &gt;= <span class="hljs-number">400</span>) &#123; <span class="hljs-comment">//服务器端出错</span><br>                    reject.call(<span class="hljs-literal">undefined</span>, request); <span class="hljs-comment">// 失败函数</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br>myButton.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    $.ajax(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;xxxx&#x27;</span>,<br>        <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;username=tom&amp;password=1&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>            <span class="hljs-string">&quot;mataotao&quot;</span>: <span class="hljs-number">18</span><br>        &#125;<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">responseText</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(responseText);<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">resquest</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(resquest);<br>    &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>模板</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xxx</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//dosomething</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// resolve或者reject</span><br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>&#125;<br>xxx.then(success, fail);<br>xxx.then(success).catch(fail);<br><span class="hljs-comment">//链式操作</span><br>xxx.then(success, fail).then(success, fail)......<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/elexmiumiu/p/12196122.html">ES6之Promise封装ajax()</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ajax初学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-genertor分析</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-genertor%E5%88%86%E6%9E%90/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-genertor%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<ol><li><p>genertor是什么</p><ul><li>genertor是es6引入的新的数据类型，看着像一个函数，不过定义是由<code> function * xxxx（）&#123;&#125;</code>组成，并且可以利用yield返回多次</li></ul></li><li><p>genertor的语法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">genFn</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    y = <span class="hljs-keyword">yield</span> x + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(y);<br>&#125;<br><span class="hljs-keyword">let</span> g = genFn(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(g.next()); <span class="hljs-comment">// &#123; value: 2, done: false &#125;</span><br><span class="hljs-built_in">console</span>.log(g.next()); <span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></div></td></tr></table></figure><ul><li>第一步<code>let g = genFn(1);</code>调用genFn时,返回的是一个指针对象，此时并没有执行函数，只是简单的调用</li><li>第二步，采用next语法，会移动内部指针，指向第一个遇到yield的语句，就暂停执行，交出函数的执行权</li><li>第三步，再次采用next语法，会从上一次的暂停之后继续执行（就像保留了记忆一样）</li><li>next返回一个对象，包含value，done2个属性，value是yield语句后面表达式的值，done表示整个genertor函数是否执行完毕</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">genFn</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    y = <span class="hljs-keyword">yield</span> x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> y;<br>&#125;<br><span class="hljs-keyword">let</span> g = genFn(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(g.next()); <span class="hljs-comment">// &#123; value: 2, done: false &#125;</span><br><span class="hljs-built_in">console</span>.log(g.next(<span class="hljs-number">4</span>)); <span class="hljs-comment">// &#123; value: 4, done: true &#125;</span><br><span class="hljs-built_in">console</span>.log(g.next()); <span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></div></td></tr></table></figure><ul><li>next(xxx)，入参会被当做上一个异步任务返回的结果，被y接受并返回</li></ul></li><li><p>genertor执行机制</p><ul><li>genertor是es6引入的新的数据类型</li><li>genertor函数调用之后并没有执行函数，只是返回一个遍历器对象，必须调用遍历器对象的next的方法，才可以使指针指向下一个状态</li><li>直到遇到下一个yield语句或者return语句才结束</li></ul></li><li><p>yield表达式</p><ul><li>yield是暂停执行的标志</li><li>遇到yield就暂停执行，并且把yield后面表达式的值，作为返回对象的value值</li><li>下一次调用next()，在继续往下执行，直到遇到下一个yield表达式</li><li>如果没有遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return后面表达式的值作为返回对象的value值</li><li>如果没有return语句，则返回对象的value值是undefined</li></ul></li><li><p>yield和return的区别</p><ul><li>区别在与每次遇到yield表达式，函数会暂停执行，下一次在从该位置之后继续执行</li><li>return语句不具备记忆功能</li><li>每个函数里只能执行一次return语句，但是可以执行多次yield表达式</li><li>yield只能用在genertor里，用到其他地方会报错</li></ul></li><li><p>next()</p><ul><li>next()本身没有返回值，或者说总是返回undefined</li><li>next可以带一个参数，这个参数会被当做上一个yield表达式的返回值</li><li>在第一次使用next()传参是无效的，V8引擎会直接忽略第一次使用next()的参数，只用第二次传参才是有效的</li></ul></li><li><p>genertor处理异步</p></li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">genFn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">yield</span> fetch(<span class="hljs-string">&#x27;https://zhuanlan.zhihu.com/p/114374428&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;result&quot;</span>,result);<br>&#125;<br><span class="hljs-keyword">let</span> g = genFn();<br><span class="hljs-keyword">let</span> result = g.next();<br>result.value.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    g.next(data);<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210912105417.png" alt="image-20210912105409435"></p><ol start="8"><li><p>async和await</p><ul><li><p>async是genertor的语法糖</p></li><li><p>async函数就是把*换成了async，把yield换成了await</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210912163721.png" alt="image-20210912163720764"></p></li></ul></li><li><p>async函数的实现原理：就是将genertor函数和自动自动执行器封装封装到一个函数里</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">args</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">args</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> spawn(<span class="hljs-function"><span class="hljs-keyword">function</span>* (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所有的async函数都可以写成第2种形式，spawn就是自动执行函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">spawn</span>(<span class="hljs-params">genF</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> gen = genF();<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step</span>(<span class="hljs-params">nextF</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> next;<br>      <span class="hljs-keyword">try</span> &#123;<br>        next = nextF();<br>      &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-keyword">return</span> reject(e);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(next.done) &#123;<br>        <span class="hljs-keyword">return</span> resolve(next.value);<br>      &#125;<br>      <span class="hljs-built_in">Promise</span>.resolve(next.value).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) </span>&#123;<br>        step(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> gen.next(v); &#125;);<br>      &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>        step(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> gen.throw(e); &#125;);<br>      &#125;);<br>    &#125;<br>    step(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> gen.next(<span class="hljs-literal">undefined</span>); &#125;);<br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/114374428">Generator详解</a></p><p><a href="https://www.jianshu.com/p/f40cdf41e43c">Generator</a></p><p><a href="https://blog.csdn.net/Merciwen/article/details/80963279/">async await 的原理</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>genertor分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-new一个对象的过程</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-new%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-new%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<ol><li><p>es5的构造函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// es5的构造函数</span><br><span class="hljs-keyword">let</span> Parent = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>Parent.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-keyword">const</span> child = <span class="hljs-keyword">new</span> Parent(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">11</span>);<br>child.sayName(); <span class="hljs-comment">//tom</span><br></code></pre></div></td></tr></table></figure></li><li><p>es6的类</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// es6的class</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sayName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> child = <span class="hljs-keyword">new</span> Parent(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">12</span>);<br>child.sayName(); <span class="hljs-comment">//tom</span><br></code></pre></div></td></tr></table></figure></li><li><p>new一个过程的解析</p><ul><li>创建一个空对象，赋值给this，继承函数的原型</li><li>通过this将属性和方法添加到这个空对象</li><li>返回这个this指向的新对象</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> Parent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.创建一个新对象，赋值给this</span><br>    <span class="hljs-built_in">this</span> = &#123;&#125;;<br>    <span class="hljs-comment">// 2.将this指向的对象赋值构造函数的属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>, age = age;<br>    <span class="hljs-number">3.</span> 没有手动返回的对象，默认返回<span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><span class="hljs-keyword">const</span> child = <span class="hljs-keyword">new</span> Parent();<br></code></pre></div></td></tr></table></figure></li><li><p>实现一个new方法:new过程中会<strong>新建对象</strong>，此对象会继承<strong>构造器的原型与原型上的属性</strong>，最后它会被<strong>作为实例返回</strong>这样一个过程。</p><ul><li>以构造器的prototype为原型创造新对象</li><li>将this(新对象)传给构造函数执行</li><li>返回对象</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> Parent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>Parent.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br>Parent.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br><span class="hljs-keyword">let</span> newMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Parent, ...rest</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.以构造器的prototype为原型，创建新的对象</span><br>    <span class="hljs-keyword">let</span> child = <span class="hljs-built_in">Object</span>.create(Parent.prototype);<br>    <span class="hljs-comment">// 2.将this(child)和参数传给构造器执行</span><br>    <span class="hljs-keyword">let</span> result = Parent.apply(child, rest);<br>    <span class="hljs-comment">// 3. 返回对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;object&#x27;</span> ? result : child;<br>&#125;<br><span class="hljs-keyword">const</span>  child = newMethod(Parent,<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;21&#x27;</span>);<br>child.sayName();<br>child.sayAge();<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/echolun/p/10903290.html">js new一个对象的过程，实现一个简单的new方法</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>new一个对象的过程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-this绑定方式</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-this%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-this%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、this默认绑定"><a href="#一、this默认绑定" class="headerlink" title="一、this默认绑定"></a>一、this默认绑定</h2><ul><li><p>函数调用前没有指定任何的对象，默认绑定this指向全局对象，</p></li><li><p>严格模式下，指向undefined，</p></li><li><p>在严格模式下调用不在严格模式中的函数不影响函数的指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// window</span><br>        fn3();<br>    &#125;<br>    fn2();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//window</span><br>&#125;<br>fn1(); <span class="hljs-comment">// fn1里实现fn2并调用 fn2调用fn3 </span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="二、this隐式绑定"><a href="#二、this隐式绑定" class="headerlink" title="二、this隐式绑定"></a>二、this隐式绑定</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;花非花，雾非雾&#x27;</span>,<br>    <span class="hljs-attr">func</span>: fn<br>&#125;<br>obj.func();<span class="hljs-comment">// 花非花，雾非雾</span><br></code></pre></div></td></tr></table></figure><ul><li>函数调用时，前面存在调用它对象的情况,this就会隐式的绑定到这个对象上</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;花非花，雾非雾&#x27;</span>,<br>    <span class="hljs-attr">func</span>: fn<br>&#125;<br><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;雾里看花&#x27;</span>,<br>    <span class="hljs-attr">o</span>:obj<br>&#125;<br>obj1.o.func() <span class="hljs-comment">//花非花，雾非雾</span><br></code></pre></div></td></tr></table></figure><ul><li>this绑定调用自己最近的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-comment">// name: &#x27;花非花，雾非雾&#x27;,</span><br>    <span class="hljs-attr">func</span>: fn<br>&#125;<br><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;雾里看花&#x27;</span>,<br>    <span class="hljs-attr">o</span>:obj<br>&#125;<br>obj1.o.func() <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><ul><li>去掉obj中name属性，返回undefined，因为obj和obj1是2个不同的对象，原型链不同，不存在继承关系</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn</span>(<span class="hljs-params"></span>) </span>&#123; &#125;;<br>Fn.prototype.name = <span class="hljs-string">&quot;雾里看花&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> Fn(); <span class="hljs-comment">//obj会继承Fn的name属性</span><br>obj.func = fn; <span class="hljs-comment">//设置obj的属性</span><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;这是雾都&#x27;</span>,<br>    <span class="hljs-attr">o</span>: obj<br>&#125;<br>obj1.o.func(); <span class="hljs-comment">// 雾里看花</span><br></code></pre></div></td></tr></table></figure><ul><li><p>虽然obj没有name属性，但是他继承了自己原型上的name属性，所以会输出值</p></li><li><p>作用域链和原型链的区别</p><p>（1） 当访问一个变量的时候，如果当前作用域没有找到，就会去父作用域找，作用域的顶端是window，如果全局中都没有，则报错</p><p>（2）当访问一个对象的属性的时候，会在当前对象查找，如果没有就顺着原型链找，原型链的顶端是null，如果没有找到，返回undefined，不报错</p></li><li><p>隐式丢失：变量赋值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;梦里看花&quot;</span>;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;雨天散步&#x27;</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span> (<span class="hljs-params">param</span>)</span>&#123;<br>    param();<br>&#125;<br>fn1(obj.fn) <span class="hljs-comment">//浏览器环境下输出 梦里看花</span><br></code></pre></div></td></tr></table></figure><p>传递参数的时候，this并没有和obj绑定到一起，所以隐式丢失，this指向全局对象</p></li><li><p>隐式丢失：变量赋值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;雨中漫步&#x27;</span>;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;听风是风&#x27;</span>,<br>    <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> fn1 = obj.fn;<br>fn1(); <span class="hljs-comment">//浏览器环境下输出 雨中漫步</span><br></code></pre></div></td></tr></table></figure></li><li><p>隐式丢失不全都指向全局对象，如果在调用的过程中，出现了重新调用就会指向新的对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;看山不是山&quot;</span>;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;看水不是水&#x27;</span>,<br>    <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;看花不是花&#x27;</span><br>&#125;<br>obj1.fn = obj.fn;<br>obj1.fn(); <span class="hljs-comment">//看花不是花</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="三、this显示绑定"><a href="#三、this显示绑定" class="headerlink" title="三、this显示绑定"></a>三、this显示绑定</h2><p>this的显示绑定主要通过call、apply、bind来实现</p><h2 id="四、new绑定"><a href="#四、new绑定" class="headerlink" title="四、new绑定"></a>四、new绑定</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;雾非雾&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> Fn();<br><span class="hljs-built_in">console</span>.log(test.name); <span class="hljs-comment">//雾非雾</span><br></code></pre></div></td></tr></table></figure><p>js中的构造函数只是使用new来调用普通函数</p><h2 id="五、this绑定优先级"><a href="#五、this绑定优先级" class="headerlink" title="五、this绑定优先级"></a>五、this绑定优先级</h2><p>显示绑定&gt;隐式绑定&gt;默认绑定</p><p>new绑定&gt;隐式绑定&gt;默认绑定</p><p>显示绑定和new绑定不能同时存在，不做比较</p><h2 id="六、箭头函数this"><a href="#六、箭头函数this" class="headerlink" title="六、箭头函数this"></a>六、箭头函数this</h2><p>箭头函数没有自己的this，箭头函数的this指向取决于外层作用域中的this</p><p>箭头函数的this一旦绑定就不会再次修改</p><h2 id="七、面试题"><a href="#七、面试题" class="headerlink" title="七、面试题"></a>七、面试题</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;花非花&quot;</span>,<br>    <span class="hljs-attr">fn1</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//正常属性</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;,<br>    <span class="hljs-attr">fn2</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name), <span class="hljs-comment">//箭头函数</span><br>    <span class="hljs-attr">fn3</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//闭包</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">fn4</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">//返回箭头函数</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;雾非雾&#x27;</span><br>&#125;;<br>obj1.fn1();<span class="hljs-comment">//花非花</span><br>obj1.fn1.call(obj2);<span class="hljs-comment">//雾非雾</span><br><br>obj1.fn2();<span class="hljs-comment">//undefined</span><br>obj1.fn2.call(obj2);<span class="hljs-comment">//undefined</span><br><br>obj1.fn3()();<span class="hljs-comment">//undefined</span><br>obj1.fn3().call(obj2);<span class="hljs-comment">//雾非雾</span><br>obj1.fn3.call(obj2)();<span class="hljs-comment">//undefined</span><br><br>obj1.fn4()();<span class="hljs-comment">//花非花</span><br>obj1.fn4().call(obj2);<span class="hljs-comment">//花非花</span><br>obj1.fn4.call(obj2)();<span class="hljs-comment">//雾非雾</span><br></code></pre></div></td></tr></table></figure><ul><li><p>第一个输出<code>花非花</code>,属于正常输出</p></li><li><p>第二个输出<code>雾非雾</code>,属于正常的显式改变this指向</p></li><li><p>第3个输出<code>window</code>,fn2的特殊性是箭头函数，箭头函数的this是外部作用域，obj1不是函数，无法形成函数作用域，所以this只能指向全局作用域，<code>window</code></p></li><li><p>第4个输出<code>window</code>，箭头函数的this一旦指定，就不会因为显示绑定而改变</p></li><li><p>第5个输出<code>window</code>，fn3是个闭包等价于以下代码</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = obj1.fn3();<br>fn();<br></code></pre></div></td></tr></table></figure><p>执行fn()等价于执行window.fn();所以返回<code>window</code></p></li><li><p>第6个输出<code>雾非雾</code>,等价于以下代码</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> fn  = obj1.fn3();<br>fn.call(obj2); <span class="hljs-comment">// 改变了this的指向</span><br></code></pre></div></td></tr></table></figure></li><li><p>第7个输出<code>window</code>，等价于以下代码</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = obj1.fn3.call(obj2);<br><span class="hljs-built_in">window</span>.fn(); <span class="hljs-comment">//默认绑定</span><br></code></pre></div></td></tr></table></figure></li><li><p>第8个输出<code>花非花</code>,fn4返回一个箭头函数，箭头函数的作用域是外部，外部是函数fn4(),fn4的this是obj1</p></li><li><p>第9个输出<code>花非花</code>,这种写法可以理解成，想改变fn4内部箭头函数this的指向，但是箭头函数this不可以改变</p></li><li><p>第10个输出<code>雾非雾</code>这种写法理解成，改变的是fn4的指向，fn4的指向变了，this自然就变了</p></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;window&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.fn1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;,<br>        <span class="hljs-built_in">this</span>.fn2 = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name),<br>        <span class="hljs-built_in">this</span>.fn3 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-built_in">this</span>.fn4 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;花非花&#x27;</span>);<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;雾非雾&#x27;</span>);<br>obj1.fn1(); <span class="hljs-comment">//花非花</span><br>obj1.fn1.call(obj2);<span class="hljs-comment">//雾非雾</span><br><br>obj1.fn2();<span class="hljs-comment">//花非花</span><br>obj1.fn2.call(obj2);<span class="hljs-comment">//花非花</span><br><br>obj1.fn3()();<span class="hljs-comment">//undefined</span><br>obj1.fn3().call(obj2);<span class="hljs-comment">//雾非雾</span><br>obj1.fn3.call(obj2)();<span class="hljs-comment">//undefined</span><br><br>obj1.fn4()();<span class="hljs-comment">//花非花</span><br>obj1.fn4().call(obj2);<span class="hljs-comment">//花非花</span><br>obj1.fn4.call(obj2)();<span class="hljs-comment">//雾非雾</span><br></code></pre></div></td></tr></table></figure><ul><li><p>2种方式只有在箭头函数fn2处，输出不同</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210911160009.png" alt="image-20210911160001665"></p></li><li><p>第一个输出<code>花非花</code>,属于正常输出</p></li><li><p>第二个输出<code>雾非雾</code>,属于正常的显式改变this指向</p></li><li><p>第3个输出的是<code>花非花</code>，因为对于对象obj1{}来说，无法创建自己的函数作用域，只能用全局的作用域，但是对于new obj1（）来说，创建了自己函数作用域，所以箭头函数this继承函数作用域</p></li><li><p>第4个输出<code>window</code>，箭头函数的this一旦指定，就不会因为显示绑定而改变</p></li><li><p>第五个输出<code>window</code>，返回闭包本质上被window调用，this被修改。</p></li><li><p>第六个输出<code>雾非雾</code>，返回闭包后利用call方法显式绑定指向obj2。</p></li><li><p>第七个输出window，返回闭包还是被window调用。</p></li><li><p>第8个输出<code>花非花</code>,fn4返回一个箭头函数，箭头函数的作用域是外部，外部是函数fn4(),fn4的this是obj1</p></li><li><p>第9个输出<code>花非花</code>,这种写法可以理解成，想改变fn4内部箭头函数this的指向，但是箭头函数this不可以改变</p></li><li><p>第10个输出<code>雾非雾</code>这种写法理解成，改变的是fn4的指向，fn4的指向变了，this自然就变了</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/echolun/p/11962610.html">js 五种绑定彻底弄懂this，默认绑定、隐式绑定、显式绑定、new绑定、箭头函数绑定详解</a></p><p><a href="https://www.cnblogs.com/echolun/p/11969938.html">js 从两道面试题加深理解闭包与箭头函数中的this</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>this绑定方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-手写call+apply+bind</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%8B%E5%86%99call-apply-bind/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%8B%E5%86%99call-apply-bind/</url>
    
    <content type="html"><![CDATA[<h2 id="一、方法一"><a href="#一、方法一" class="headerlink" title="一、方法一"></a>一、方法一</h2><ol><li><p>手写call</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._call = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-built_in">window</span>, ...args</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// [Function: fn] this指向调用函数fn</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123; <span class="hljs-comment">//判断调用的对象是不是函数只有函数才可以调用call、apply、bind</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;err&#x27;</span>);<br>    &#125;<br>    args = args ? args : []; <span class="hljs-comment">//判断参数</span><br>    <span class="hljs-keyword">const</span> key = <span class="hljs-built_in">Symbol</span>(); <span class="hljs-comment">// 创建独一无二的属性</span><br>    context.key = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> result = context.key(...args)<span class="hljs-comment">// 隐式绑定调用函数 ==&gt;fn(参数)</span><br>    <span class="hljs-keyword">delete</span> context[key]; <span class="hljs-comment">// 删除属性，不在占用内存</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">arguments</span>);<br>&#125;<br>fn._call(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//1 [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span><br><span class="hljs-comment">// fn.call(obj, 1, 2, 3);// 1 [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>手写apply</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._apply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-built_in">window</span>, args = []</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;err&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-built_in">Symbol</span>();<br>    context.key = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> result = context.key(...args);<br>    <span class="hljs-keyword">delete</span> context.key;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">arguments</span>);<br>&#125;<br>fn1._apply(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">//1 [Arguments] &#123; &#x27;0&#x27;: 4, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>手写bind</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-built_in">window</span>, ...args</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;err&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 返回一个新的函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newFn</span>(<span class="hljs-params">...newFnArgs</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> newFn) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> fn(...args, ...newFnArgs);<br>        &#125;<br>        <span class="hljs-keyword">return</span> fn.apply(context, [...args, ...newFnArgs]);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> resFn = fn._bind(obj,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>resFn(); <span class="hljs-comment">//1 [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、方法二"><a href="#二、方法二" class="headerlink" title="二、方法二"></a>二、方法二</h2><ol><li><p>手写实现call</p><ul><li><p>要判断传入的对象是否存在，如果没有传入对象， 默认的是window</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> _obj = obj ? obj : <span class="hljs-built_in">window</span>; <span class="hljs-comment">// 如果没有传递this，默认是window</span><br></code></pre></div></td></tr></table></figure></li><li><p>判断调用者是不是函数，因为call是Function原型链上的方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>); <span class="hljs-comment">//调用call的必须是函数</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果想要函数的作用域是当前传入的对象<code>_obj</code>,_那么调用的必须是<code>_obj</code>的属性或者方法，将this赋值给<code>_obj</code>的fn方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">_obj.fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 如果想要函数的作用域是obj，那么调用的必须是obj的属性或者方法 将当前的函数this赋值给obj的方法fn</span><br></code></pre></div></td></tr></table></figure></li><li><p>获取参数,从第二项开始</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 获取参数</span><br><span class="hljs-keyword">var</span> argArr = [];<br><span class="hljs-comment">// console.log(arguments);//[Arguments] &#123; &#x27;0&#x27;: &#123; name: &#x27;手写call&#x27;, fn: [Function: test] &#125;,&#x27;1&#x27;: 11,&#x27;2&#x27;: 22,&#x27;3&#x27;: 33&#125;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    argArr.push(<span class="hljs-built_in">arguments</span>[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>参数对比</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-number">1.</span> <span class="hljs-built_in">Function</span>.prototype._call = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(arguments);//[Arguments] &#123; &#x27;0&#x27;: &#123; name: &#x27;手写call&#x27; &#125;, &#x27;1&#x27;: 11, &#x27;2&#x27;: 22, &#x27;3&#x27;: 33 &#125;</span><br>    <br><span class="hljs-number">2.</span>   <span class="hljs-comment">// 获取参数</span><br><span class="hljs-keyword">var</span> argArr = [];<br>    <span class="hljs-comment">// console.log(arguments);//[Arguments] &#123; &#x27;0&#x27;: &#123; name: &#x27;手写call&#x27;, fn: [Function: test] &#125;,&#x27;1&#x27;: 11,&#x27;2&#x27;: 22,&#x27;3&#x27;: 33&#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._call = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(arguments);//[Arguments] &#123; &#x27;0&#x27;: &#123; name: &#x27;手写call&#x27; &#125;, &#x27;1&#x27;: 11, &#x27;2&#x27;: 22, &#x27;3&#x27;: 33 &#125;</span><br>    <span class="hljs-keyword">var</span> _obj = obj ? obj : <span class="hljs-built_in">window</span>; <span class="hljs-comment">// 如果没有传递this，默认是window</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>); <span class="hljs-comment">//调用call的必须是函数</span><br>    &#125;<br>    _obj.fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 如果想要函数的作用域是obj，那么调用的必须是obj的属性或者方法 将当前的函数this赋值给obj的方法fn</span><br>    <span class="hljs-comment">// 获取参数</span><br>    <span class="hljs-keyword">var</span> argArr = [];<br>    <span class="hljs-comment">// console.log(arguments);//[Arguments] &#123; &#x27;0&#x27;: &#123; name: &#x27;手写call&#x27;, fn: [Function: test] &#125;,&#x27;1&#x27;: 11,&#x27;2&#x27;: 22,&#x27;3&#x27;: 33&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>        argArr.push(<span class="hljs-built_in">arguments</span>[i]);<br>    &#125;<br>    <span class="hljs-comment">//执行_obj.fn的方法</span><br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;_obj.fn(&quot;</span> + argArr + <span class="hljs-string">&quot;)&quot;</span>); <span class="hljs-comment">//等价于 _obj.fm(...argArr)</span><br>    <span class="hljs-keyword">delete</span> _obj.fn; <span class="hljs-comment">//删除增加的这个方法</span><br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;手写call&#x27;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    <span class="hljs-built_in">console</span>.log(x + y + z);<br>&#125;<br>test._call(obj, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>);<br><span class="hljs-comment">// 手写call</span><br><span class="hljs-comment">// 66</span><br></code></pre></div></td></tr></table></figure><p>对call方法的理解，就是把调用的方法，加到指定的对象属性上，操作完成后，删除对象属性</p></li></ul></li><li><p>手写实现apply</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._apply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, args</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> _obj = obj ? obj : <span class="hljs-built_in">window</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>);<br>    &#125;<br>    _obj.fn = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">var</span> argArr = [];<br>    <span class="hljs-keyword">if</span> (!args || args.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> _obj.fn;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            argArr.push(args[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(argArr);<br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;_obj.fn(&quot;</span> + argArr + <span class="hljs-string">&quot;)&quot;</span>); <span class="hljs-comment">//等价于 _obj.fm(...argArr)</span><br>    <span class="hljs-keyword">delete</span> _obj.fn;<br>&#125;<br>test._apply(obj, [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">44</span>]);<br><span class="hljs-comment">// 手写call</span><br><span class="hljs-comment">// 77</span><br></code></pre></div></td></tr></table></figure></li><li><p>手写实现bind</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype._bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//接受并传给调用他的函数的参数</span><br>    <span class="hljs-keyword">var</span> _fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 保存这个调用的函数</span><br>    <span class="hljs-keyword">var</span> bindFn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//要返回的函数</span><br>        <span class="hljs-keyword">var</span> newArgs = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">// 获取_bind方法返回函数的参数</span><br>        <span class="hljs-keyword">var</span> _obj = <span class="hljs-built_in">this</span>.constructor === _fn ? <span class="hljs-built_in">this</span> : obj; <span class="hljs-comment">// _bind 可以普通调用也可以构造调用，构造调用的时候，this是指向实例的</span><br>        _fn.apply(_obj, args.concat(newArgs)); <span class="hljs-comment">// 实现函数柯里化</span><br>    &#125;<br>    <span class="hljs-comment">//实现原型继承</span><br>    <span class="hljs-keyword">var</span> ProtoFn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; &#125;;<br>    ProtoFn.prototype = _fn.prototype;<br>    bindFn.prototype = <span class="hljs-keyword">new</span> ProtoFn(); <span class="hljs-comment">// bindFn ===&gt; _fn ===&gt;.... 继承调用他的函数的原型和属性</span><br><br>    <span class="hljs-keyword">return</span> bindFn;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>（1）普通测试</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;前端菜鸟库&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.age = <span class="hljs-string">&#x27;18&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name) <span class="hljs-comment">// 前端菜鸟库</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;x:&#x27;</span>, x, <span class="hljs-string">&#x27;y:&#x27;</span>, y, <span class="hljs-string">&#x27;z:&#x27;</span>, z) <span class="hljs-comment">// x: 1 y: 2 z: 3</span><br>    <span class="hljs-built_in">console</span>.log(x + y + z) <span class="hljs-comment">// 6</span><br>&#125;<br>  <span class="hljs-keyword">var</span> Bound = test._bind(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>Bound();<br></code></pre></div></td></tr></table></figure><p>（2）函数柯理化</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;前端菜鸟库&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.age = <span class="hljs-string">&#x27;18&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name) <span class="hljs-comment">// 前端菜鸟库</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;x:&#x27;</span>, x, <span class="hljs-string">&#x27;y:&#x27;</span>, y, <span class="hljs-string">&#x27;z:&#x27;</span>, z) <span class="hljs-comment">// x: 1 y: 2 z: 3</span><br>    <span class="hljs-built_in">console</span>.log(x + y + z) <span class="hljs-comment">// 6</span><br>&#125;<br><span class="hljs-keyword">var</span> Bound = test._bind(obj, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//函数柯里化</span><br>Bound(<span class="hljs-number">3</span>);<span class="hljs-comment">//5</span><br></code></pre></div></td></tr></table></figure><p>（3）构造调用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;前端菜鸟库&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">x, y, z</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.age = <span class="hljs-string">&#x27;18&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name) <span class="hljs-comment">// undefined new的时候this指向实例，实例没有name属性</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;x:&#x27;</span>, x, <span class="hljs-string">&#x27;y:&#x27;</span>, y, <span class="hljs-string">&#x27;z:&#x27;</span>, z) <span class="hljs-comment">// x: 1 y: 2 z: 3</span><br>    <span class="hljs-built_in">console</span>.log(x + y + z) <span class="hljs-comment">// 6</span><br>&#125;<br>test.prototype.book = <span class="hljs-string">&quot;JS&quot;</span>;<br><span class="hljs-keyword">var</span> Bound = test._bind(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">var</span> bound = <span class="hljs-keyword">new</span> Bound(<span class="hljs-number">3</span>); <span class="hljs-comment">//6</span><br><span class="hljs-built_in">console</span>.log(bound);<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写call、apply、bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-手写promise</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%8B%E5%86%99promise/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%8B%E5%86%99promise/</url>
    
    <content type="html"><![CDATA[<ol><li><p>手写promise.all</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.all = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arrs = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(promises.length); <span class="hljs-comment">// 保存成功的promises数组</span><br>    <span class="hljs-keyword">const</span> len = promises.length;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//成功的promise数量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        promises.forEach(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">Promise</span>.resolve(p).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                count++; <span class="hljs-comment">// 成功的一条记录</span><br>                arrs[index] = value; <span class="hljs-comment">// 把成功的promise放入数组中</span><br>                <span class="hljs-keyword">if</span> (len === count) &#123; <span class="hljs-comment">// 数组中的所有promise都成功</span><br>                    resolve(arrs);<br>                &#125;<br>            &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                reject(err);<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">Promise</span>.all([p1, p2, p3]).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>手写promise.any</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//手写实现promise.any</span><br><span class="hljs-built_in">Promise</span>.any = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        promises = <span class="hljs-built_in">Array</span>.isArray(promises) ? promises : []; <span class="hljs-comment">//判断传入的promises是不是数组</span><br>        <span class="hljs-keyword">let</span> len = promises.length;<br>        <span class="hljs-keyword">let</span> errs = []; <span class="hljs-comment">// 收集错误的信息</span><br>        <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//空数组</span><br>            <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> AggregateError(<span class="hljs-string">&#x27;all promises were rejects&#x27;</span>))<br>        &#125;<br>        promises.forEach(<span class="hljs-function">(<span class="hljs-params">promise</span>) =&gt;</span> &#123;<br>            promise.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                resolve(value); <span class="hljs-comment">// 成功的情况</span><br>            &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                len--;<br>                errs.push(err);<br>                <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123;<br>                    reject(errs);<span class="hljs-comment">//失败的情况</span><br>                &#125;<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> promises = [<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error a&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error b&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;result&#x27;</span>),<br>]<br><span class="hljs-built_in">Promise</span>.any(promises).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-合并2个有序数组</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%90%88%E5%B9%B62%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%90%88%E5%B9%B62%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<ol><li><p>遍历2个数组，比大小</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：遍历比大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeArr</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr3 = [];<br>    <span class="hljs-keyword">let</span> m = arr1.length;<br>    <span class="hljs-keyword">let</span> n = arr2.length;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123; <span class="hljs-comment">//先处理长度相等的部分</span><br>        <span class="hljs-keyword">if</span> (arr1[i] &lt;= arr2[j]) &#123;<br>            arr3.push(arr1[i]);<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arr3.push(arr2[j]);<br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; m) &#123;  <span class="hljs-comment">// 在处理超出长度的部分</span><br>        arr3.push(arr1[i]);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt; n) &#123;<br>        arr3.push(arr2[j]);<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr3;<br>&#125;<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> res = mergeArr(arr1, arr2);<br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">// [ 1, 2, 3,  4,  5, 6, 7, 9, 10, 12, 13]</span><br></code></pre></div></td></tr></table></figure></li><li><p>合并到一个数组中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="hljs-comment">// nums2 = [2,5,6], n = 3</span><br><span class="hljs-comment">// 输出: [1,2,2,3,5,6]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeArr</span>(<span class="hljs-params">arr1, m, arr2, n</span>) </span>&#123;<br>    arr1.splice(m, arr1.length - m); <span class="hljs-comment">// 删除为0的地方</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        arr1.push(arr2[i]); <span class="hljs-comment">// 将数组2 合并到数组1中</span><br>    &#125;<br>    arr1.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>    <span class="hljs-keyword">return</span> arr1;<br>&#125;<br><span class="hljs-keyword">let</span> nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], m = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> res = mergeArr(nums1, m, nums2, n);<br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">// [ 1, 2, 2, 3, 5, 6 ]</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>合并2个数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-数据劫持or数据代理</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81or%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81or%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ol><li><p>Object.defineProperty存在的问题</p><ul><li><p>不能监听数组的变化</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//无法监听到数组</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;arr&#x27;</span>, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;get err&quot;</span>);<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>, newVal);<br>        arr = newVal;<br>    &#125;<br>&#125;)<br>obj.arr.push(<span class="hljs-number">4</span>); <span class="hljs-comment">// 只调用了get方法,没有调用set方法</span><br>obj.arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]; <span class="hljs-comment">//这种方式可以检测到数据的变化</span><br></code></pre></div></td></tr></table></figure></li><li><p>Vue的解决方案，把方法重写</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Vue的解决方案，把方法重写实现数据劫持</span><br><span class="hljs-keyword">const</span> arrMethods = [<span class="hljs-string">&#x27;push&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;shift&#x27;</span>, <span class="hljs-string">&#x27;unshift&#x27;</span>, <span class="hljs-string">&#x27;splice&#x27;</span>, <span class="hljs-string">&#x27;sort&#x27;</span>, <span class="hljs-string">&#x27;reverse&#x27;</span>];<br><span class="hljs-keyword">const</span> arrayAugmentations = [];<br>arrMethods.forEach(<span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> original = <span class="hljs-built_in">Array</span>.prototype[method]; <span class="hljs-comment">//原生的Array的原型方法</span><br>    arrayAugmentations[method] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我被改变了&quot;</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向的是list数组[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span><br>        <span class="hljs-keyword">return</span> original.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);  <span class="hljs-comment">// 调用对应的原生方法并返回结果</span><br>    &#125;<br>&#125;)<br><span class="hljs-keyword">let</span> list = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-comment">// 将我们监听的数组原型指针指向上面定义的空数组对象</span><br>list.__proto__ = arrayAugmentations;<br>list.push(<span class="hljs-string">&#x27;d&#x27;</span>); <span class="hljs-comment">// 我被改变了</span><br><span class="hljs-keyword">let</span> list2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]; <span class="hljs-comment">// list2是原生的数组，没有指向我们定义的方法</span><br>list2.push(<span class="hljs-string">&#x27;d&#x27;</span>); <span class="hljs-comment">//没有输出</span><br></code></pre></div></td></tr></table></figure></li><li><p>必须遍历对象的每一个属性</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//必须遍历对象的每一个属性</span><br><span class="hljs-built_in">Object</span>.keys(obj).forEach(<span class="hljs-function"><span class="hljs-params">key</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">Object</span>.defineProperty(obj,key,&#123;<br>        <br>    &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>如果是嵌套对象，必须进行深层遍历</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//必须进行深层遍历</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">info</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;person&#x27;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Proxy</p><ul><li><p>针对对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Eason&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;<br><span class="hljs-keyword">let</span> handler = &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key, receiver</span>)</span> &#123; <span class="hljs-comment">// get方法返回获取的值</span><br>        <span class="hljs-comment">// console.log(&quot;target:&quot;,target); //&#123; name: &#x27;yom&#x27;, age: 18 &#125; 目标对象</span><br>        <span class="hljs-comment">// // console.log(&quot;receiver:&quot;,receiver); // &#123; name: &#x27;yom&#x27;, age: 18 &#125; 目标对象</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get&#x27;</span>, key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, key, receiver);  <span class="hljs-comment">// 返回值</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value, receiver</span>)</span> &#123; <span class="hljs-comment">//set方法设置属性成功返回true，失败返回false</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>, key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, handler);<br>proxy.name = <span class="hljs-string">&#x27;yom&#x27;</span>; <span class="hljs-comment">// set name yom</span><br>proxy.age = <span class="hljs-number">18</span>; <span class="hljs-comment">// set age 18</span><br><span class="hljs-built_in">console</span>.log(proxy.name);<br><span class="hljs-comment">// get name</span><br><span class="hljs-comment">// yom</span><br><span class="hljs-built_in">console</span>.log(proxy.age);<br><span class="hljs-comment">// get age</span><br><span class="hljs-comment">// 18</span><br></code></pre></div></td></tr></table></figure></li><li><p>支持数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(array, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key, receiver</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get&#x27;</span>, key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, key, receiver);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value, receiver</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>, key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver);<br>    &#125;<br>&#125;)<br>proxy.push(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// get push 得到方法名是push</span><br><span class="hljs-comment">// get length // 得到数组的长度属性</span><br><span class="hljs-comment">// set 3 4 // 设置下标 3 值是4</span><br><span class="hljs-comment">// set length 4 // 改变长度是4</span><br></code></pre></div></td></tr></table></figure></li><li><p>不支持嵌套，需要在get方法里递归调用proxy</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">info</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>        <span class="hljs-attr">blogs</span>: [<span class="hljs-string">&#x27;webpack&#x27;</span>, <span class="hljs-string">&#x27;babel&#x27;</span>, <span class="hljs-string">&#x27;cahce&#x27;</span>]<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> handler = &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key, receiver</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get&#x27;</span>, key)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; target[key] !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target[key], handler); <span class="hljs-comment">//递归调用</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, key, receiver);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value, receiver</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>, key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj,handler);<br>proxy.info.name = <span class="hljs-string">&#x27;tom&#x27;</span>;<br>proxy.info.blogs.push(<span class="hljs-string">&#x27;proxy&#x27;</span>)<br><span class="hljs-comment">// get info</span><br><span class="hljs-comment">// set name tom</span><br><span class="hljs-comment">// get info</span><br><span class="hljs-comment">// get blogs</span><br><span class="hljs-comment">// get push</span><br><span class="hljs-comment">// get length</span><br><span class="hljs-comment">// set 3 proxy</span><br><span class="hljs-comment">// set length 4</span><br></code></pre></div></td></tr></table></figure></li><li><p>proxy的第二个参数，支持13种拦截方法，比Object.defineProperty()更加丰富</p></li><li><p>proxy做为新标准，受到了关注和性能优化</p></li><li><p>proxy的兼容性不如Object.defineProperty()</p></li></ul></li><li><p>相关面试题</p><ul><li><p>什么样的 a 可以满足 (a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3) === true 呢？(注意是 3 个 =，也就是严格相等)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> current = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">window</span>, <span class="hljs-string">&#x27;a&#x27;</span>, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        current++;<br>        <span class="hljs-keyword">return</span> current;<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(a === <span class="hljs-number">1</span> &amp;&amp; a === <span class="hljs-number">2</span> &amp;&amp; a === <span class="hljs-number">3</span>); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li><li><p>多继承</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> foo = &#123;<br>    <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> bar = &#123;<br>    <span class="hljs-function"><span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 正常情况下，对象只能继承一个对象</span><br><span class="hljs-keyword">let</span> sonOfFoo = <span class="hljs-built_in">Object</span>.create(foo);<br>sonOfFoo.foo(); <span class="hljs-comment">//foo</span><br><span class="hljs-keyword">let</span> sonOfBar = <span class="hljs-built_in">Object</span>.create(bar);<br>sonOfBar.bar(); <span class="hljs-comment">//bar</span><br><span class="hljs-keyword">let</span> sonOfFooBar = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;&#125;, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> target[key] || foo[key] || bar[key];<br>    &#125;<br>&#125;)<br>sonOfFooBar.foo(); <span class="hljs-comment">//既有foo</span><br>sonOfFooBar.bar(); <span class="hljs-comment">//还有bar</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据劫持or数据代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-promise.any</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-promise-any/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-promise-any/</url>
    
    <content type="html"><![CDATA[<ol><li><p>Promise.any的作用</p><ul><li><p>Promise.any接受一个可迭代的对象做为参数，（比如数组）</p></li><li><p>只要其中的一个promise成功，就返回那个成功的promise</p></li><li><p>如果所有可迭代的对象中没有一个promise成功，就返回一个失败的promise和AggregateError类型的实例，AggregateError是Error的一个子集，他用于把单一的错误集合在一起。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//有一个成功，就返回成功</span><br><span class="hljs-keyword">const</span> promises = [<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error a&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error b&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&#x27;result&#x27;</span>),<br>]<br><span class="hljs-built_in">Promise</span>.any(promises).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value&quot;</span> + value);<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err&quot;</span> + err);<br>&#125;)<br><span class="hljs-comment">// 浏览器状态下返回的结果</span><br><span class="hljs-comment">// value result</span><br><span class="hljs-comment">// Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span><br><span class="hljs-comment">// [[Prototype]]: Promise</span><br><span class="hljs-comment">// [[PromiseState]]: &quot;fulfilled&quot;</span><br><span class="hljs-comment">// [[PromiseResult]]: undefined</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//所有的失败，就返回失败</span><br><span class="hljs-keyword">const</span> promises = [<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error a&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error b&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error c&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error d&#x27;</span>),<br>]<br><span class="hljs-built_in">Promise</span>.any(promises).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value&quot;</span> + value);<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;err:&#x27;</span> + err); <span class="hljs-comment">// err: AggregateError: All promises were rejected</span><br>    <span class="hljs-built_in">console</span>.log(err.message);<span class="hljs-comment">// All promises were rejected</span><br>    <span class="hljs-built_in">console</span>.log(err.name); <span class="hljs-comment">// AggregateError</span><br>    <span class="hljs-built_in">console</span>.log(err.errors);<span class="hljs-comment">// (4) [&quot;error a&quot;, &quot;error b&quot;, &quot;error c&quot;, &quot;error d&quot;]</span><br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>Promise.any的应用场景</p><p>（1）从最快的服务器检索资源</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//从服务器加载最快的资源</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser</span>(<span class="hljs-params">endpoint</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fetch(<span class="hljs-string">`https://superfire.<span class="hljs-subst">$&#123;endpoint&#125;</span>.com/users`</span>).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json());<br>&#125;<br><span class="hljs-keyword">const</span> promises = [getUser(<span class="hljs-string">&#x27;jp&#x27;</span>), getUser(<span class="hljs-string">&#x27;ab&#x27;</span>), getUser(<span class="hljs-string">&#x27;us&#x27;</span>), getUser(<span class="hljs-string">&#x27;au&#x27;</span>), getUser(<span class="hljs-string">&#x27;in&#x27;</span>)];<br><span class="hljs-built_in">Promise</span>.any(promises).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;) <br></code></pre></div></td></tr></table></figure><p>（2）显示第一张已经加载的照片</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//显示第一张加载的图片</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchAndDecode</span>(<span class="hljs-params">url</span>) </span>&#123; <span class="hljs-comment">// h获取图片的函数</span><br>    <span class="hljs-keyword">return</span> fetch(url).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!response.ok) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`http error! status:<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> response.blob();<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">let</span> coffee = fetchAndDecode(<span class="hljs-string">&#x27;coffee.jpg&#x27;</span>);<br><span class="hljs-keyword">let</span> tea = fetchAndDecode(<span class="hljs-string">&#x27;tea.ipg&#x27;</span>);<br><span class="hljs-built_in">Promise</span>.any([coffee, tea]).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">// 利用promise.any的特性进行加载</span><br>    <span class="hljs-keyword">let</span> objectURL = URL.createObjectURL(value);<br>    <span class="hljs-keyword">let</span> image = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>);<br>    image.src = objectURL;<br>    <span class="hljs-built_in">document</span>.body.appendChild(<span class="hljs-string">&#x27;image&#x27;</span>);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(e.message);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>Promise.any VS Promise.all</p><ul><li>Promise.all是所有的成功，才会返回成功，有一个失败，都返回失败</li><li>Promise.any是有一个成功，就会返回成功，所有的失败，才会返回失败</li></ul></li><li><p>Promise.any VS Promise.race</p><ul><li>Promise.any 关注Promise是否已经解决</li><li>Promise.race 关注Promise执行的状态，其中哪个最先完成就返回其状态，不管成功与否</li></ul></li><li><p>手写一个Promise.any方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//手写实现promise.any</span><br><span class="hljs-built_in">Promise</span>.any = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        promises = <span class="hljs-built_in">Array</span>.isArray(promises) ? promises : []; <span class="hljs-comment">//判断传入的promises是不是数组</span><br>        <span class="hljs-keyword">let</span> len = promises.length;<br>        <span class="hljs-keyword">let</span> errs = []; <span class="hljs-comment">// 收集错误的信息</span><br>        <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//空数组</span><br>            <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> AggregateError(<span class="hljs-string">&#x27;all promises were rejects&#x27;</span>))<br>        &#125;<br>        promises.forEach(<span class="hljs-function">(<span class="hljs-params">promise</span>) =&gt;</span> &#123;<br>            promise.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                resolve(value); <span class="hljs-comment">// 成功的情况</span><br>            &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                len--;<br>                errs.push(err);<br>                <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123;<br>                    reject(errs);<span class="hljs-comment">//失败的情况</span><br>                &#125;<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> promises = [<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error a&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;error b&#x27;</span>),<br>    <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;result&#x27;</span>),<br>]<br><span class="hljs-built_in">Promise</span>.any(promises).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br><br></code></pre></div></td></tr></table></figure></li><li><p>应用解决</p><ul><li>Promise.all 前端发起多个请求并根据请求顺序获取和使用数据</li><li>Promise.all 合并多个请求结果并处理错误</li><li>Promise.any 从最快的服务器检索资源</li><li>Promise.race 请求超时提醒</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Promise.any</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue响应式原理</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是Vue的响应式原理</p><p>简单的理解就是数据发生变化的时候，视图也会跟着变化</p></li><li><p>如何实现vue的响应式原理</p><ul><li><p>监听的实现</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 实现监听obj对象的属性</span><br><span class="hljs-keyword">var</span> bValue;<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;b&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// get方法一定会有返回值的</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在获取监听的值&quot;</span>);<br>        <span class="hljs-keyword">return</span> bValue;<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue</span>) </span>&#123;<br>        bValue = newValue; <span class="hljs-comment">// newValue是用户的传值,将将对象的值改变</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在设置监听的值&quot;</span>);<br>    &#125;,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>&#125;);<br>obj.b = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(obj.b);<br><span class="hljs-comment">// 正在设置监听的值</span><br><span class="hljs-comment">// 正在获取监听的值</span><br><span class="hljs-comment">// 123</span><br></code></pre></div></td></tr></table></figure><p>从上面的代码中可以看出，执行<code>obj.b = 123;</code>这个操作的时候，其实就是调用的对象的set方法，执行<code>console.log(obj.b);</code>这个操作的时候，其实就是调用的对象的get方法，通过对set和get方法进行改造，我们就可以监听到对象数据的变化。</p></li><li><p>极简的实现数据的双向绑定</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> span = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;span&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="javascript">    <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;msg&#x27;</span>, &#123;</span><br><span class="javascript">        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 当obj的msg的属性被调用的时候，同时赋值给input和span</span></span><br><span class="javascript">            input.value = newValue;</span><br><span class="javascript">            span.innerText = newValue;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">    input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">        obj.msg = event.target.value; <span class="hljs-comment">// 给对象的msg属性赋值</span></span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>Vue中给data的所有属性设置set、get的这个过程叫做Reactive化(活跃化)</li></ul></li><li><p>实现一个观察者的类</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 以买蛋糕为例</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Observer</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.dep = []; <span class="hljs-comment">// 订阅器</span><br>    <span class="hljs-built_in">this</span>.register = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123; <span class="hljs-comment">//注册环节</span><br>        <span class="hljs-built_in">this</span>.dep.push(fn)<br>    &#125;<br>    <span class="hljs-built_in">this</span>.notify = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//发布环节</span><br>        <span class="hljs-built_in">this</span>.dep.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item())<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> wantCake = <span class="hljs-keyword">new</span> Observer(); <span class="hljs-comment">// 定义买蛋糕的人(订阅者)</span><br>wantCake.register(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是订蛋糕1号&quot;</span>) &#125;);<br>wantCake.register(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是订蛋糕2号&quot;</span>) &#125;);<br>wantCake.register(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是订蛋糕3号&quot;</span>) &#125;);<br>wantCake.register(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是订蛋糕4号&quot;</span>) &#125;);<br><span class="hljs-comment">// 在蛋糕做好以后，发布信息(消费者)</span><br>wantCake.notify();<br><span class="hljs-comment">// 我是订蛋糕1号</span><br><span class="hljs-comment">// 我是订蛋糕2号</span><br><span class="hljs-comment">// 我是订蛋糕3号</span><br><span class="hljs-comment">// 我是订蛋糕4号</span><br></code></pre></div></td></tr></table></figure></li><li><p>分析vue的响应式原理</p><p><img src="C:/Users/11090/Desktop/20210906171137.png" alt="image-20210906171136664"></p><ul><li>组件初始化的时候，vue的data属性都会被reactive化，这里的Dep相当于一个观察者，当调用getter方法的时候，会去Dep里注册函数，到调用setter方法的时候，会去Dep里执行刚刚注册的函数。</li></ul><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210906184618.png" alt="image-20210906172100148"></p><ul><li><p>mount阶段会创建一个Watcher对象，Watcher是连接Vue组件和Dep的桥梁，每一个Watcher对应一个vue组件。看的出在constructor里的this.getter.call(vm, vm)函数会被执行，而this.getter()就是updateComponent，所以会调用组件的render函数来重新渲染组件。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210906184623.png" alt="image-20210906172413852"></p></li><li><p>在render函数里，会访问data的属性值，那就会调用getter方法，触发注册函数，在depend里，Dep.target就是Watcher本身，这里的功能就是给data的属性注册Watcher这个对象，这样每次重新渲染一个组件的时候，如果这个组件用到了data中的属性，那个这个组件对应的Watcher都会被注册到data属性对应的Dep中。</p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210906184627.png" alt="image-20210906183007274" style="zoom:80%;" /></li></ul></li><li><p>对官方图解的理解</p></li></ul></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210906191400.png" alt="image-20210906191357778"></p><ol><li>第一步组件初始化的时候，给data的属性加上getter和setter方法，然后new一个Watcher，Watcher会立即调用组件的render函数去生成虚拟的DOM，</li><li>第二步就是在render函数中，会调用data的属性，会触发getter方法，getter方法里有注册方法，所以就把watcher注册到了sub里</li><li>第三步就是数据发生变化，会触发setter方法，setter方法里有触发执行的方法，然后会遍历注册的sub里的Watcher对象，然后重新渲染</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/88648401">最简化 VUE的响应式原理</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue响应式原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js发布订阅模式</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是发布订阅模式</p><p>发布订阅模式也叫观察者模式，是一种一对多的依赖关系，当一个状态发生变化的时候，所有依赖这个状态的对象都会收到通知。</p></li><li><p>简单的发布订阅模式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> salesOffices = &#123;&#125;; <span class="hljs-comment">//发布者</span><br>salesOffices.books = []; <span class="hljs-comment">// 缓存列表，存放订阅者的回调函数</span><br>salesOffices.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.books.push(fn); <span class="hljs-comment">// 订阅的消息添加到缓存列表中</span><br>&#125;<br>salesOffices.trigger = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 发布消息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn;fn = <span class="hljs-built_in">this</span>.books[i++];) &#123;<br>        <span class="hljs-comment">// console.log(this); // this是salesOffices对象</span><br>        fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>); <span class="hljs-comment">// argments是发布消息带的参数</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 购买者a</span><br>salesOffices.listen(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">price, areas</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`购买者a价格是<span class="hljs-subst">$&#123;price&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`购买者a面积是<span class="hljs-subst">$&#123;areas&#125;</span>`</span>);<br>&#125;)<br><span class="hljs-comment">//购买者b</span><br>salesOffices.listen(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">price, areas</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`购买者b价格是<span class="hljs-subst">$&#123;price&#125;</span>`</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`购买者b面积是<span class="hljs-subst">$&#123;areas&#125;</span>`</span>);<br>&#125;)<br>salesOffices.trigger(<span class="hljs-number">2000</span>, <span class="hljs-number">80</span>);<br>salesOffices.trigger(<span class="hljs-number">8000</span>, <span class="hljs-number">100</span>);<br><span class="hljs-comment">// 订阅者会接受到发布者发布的每一个信息</span><br><span class="hljs-comment">// 购买者a价格是2000</span><br><span class="hljs-comment">// 购买者a面积是80</span><br><span class="hljs-comment">// 购买者b价格是2000</span><br><span class="hljs-comment">// 购买者b面积是80</span><br><span class="hljs-comment">// 购买者a价格是8000</span><br><span class="hljs-comment">// 购买者a面积是100</span><br><span class="hljs-comment">// 购买者b价格是8000</span><br><span class="hljs-comment">// 购买者b面积是100</span><br></code></pre></div></td></tr></table></figure></li><li><p>改进版发布订阅模式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> salesOffices = &#123;&#125;; <span class="hljs-comment">// 定义售楼处</span><br>salesOffices.clientList = &#123;&#125;; <span class="hljs-comment">// 缓存列表，存放订阅者的回调函数</span><br>salesOffices.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.clientList[key]) &#123; <span class="hljs-comment">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span><br>        <span class="hljs-built_in">this</span>.clientList[key] = [];<br>    &#125;<br>    <span class="hljs-built_in">this</span>.clientList[key].push(fn); <span class="hljs-comment">// 订阅的消息添加进消息缓存列表</span><br>&#125;;<br>salesOffices.trigger = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 发布消息</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//[Arguments] &#123; &#x27;0&#x27;: &#x27;squareMeter88&#x27;, &#x27;1&#x27;: 2000000 &#125;</span><br>    <span class="hljs-keyword">let</span> key = <span class="hljs-built_in">Array</span>.prototype.shift.call(<span class="hljs-built_in">arguments</span>), <span class="hljs-comment">// 取出消息类型key值</span><br>        fns = <span class="hljs-built_in">this</span>.clientList[key]; <span class="hljs-comment">// 取出该消息对应的回调函数集合</span><br>    <span class="hljs-keyword">if</span> (!fns || fns.length === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果没有订阅该消息，则返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn; fn = fns[i++];) &#123;<br>        fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>); <span class="hljs-comment">// (2) // arguments 是发布消息时附送的参数</span><br>    &#125;<br>&#125;;<br>salesOffices.listen(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) </span>&#123; <span class="hljs-comment">// 小明订阅 88 平方米房子的消息</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;价格= &#x27;</span> + price); <span class="hljs-comment">// 输出： 2000000</span><br>&#125;);<br>salesOffices.listen(<span class="hljs-string">&#x27;squareMeter110&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) </span>&#123; <span class="hljs-comment">// 小红订阅 110 平方米房子的消息</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;价格= &#x27;</span> + price); <span class="hljs-comment">// 输出： 3000000</span><br>&#125;);<br>salesOffices.trigger(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, <span class="hljs-number">2000000</span>); <span class="hljs-comment">// 发布 88 平方米房子的价格</span><br>salesOffices.trigger(<span class="hljs-string">&#x27;squareMeter110&#x27;</span>, <span class="hljs-number">3000000</span>); <span class="hljs-comment">// 发布 110 平方米房子的价格</span><br></code></pre></div></td></tr></table></figure></li><li><p>Vue中的数据双向绑定用到了发布-订阅模式</p></li><li><p>Vue中的<code>$emit</code>和<code>$on</code>也用到了发布订阅模式，$emit$负责订阅消息，on负责发布消息</p></li><li><p>发布订阅模式的思想就是【订阅者】—&gt;【中转站】—&gt;【消费者】</p></li><li><p>Dep是Vue中的订阅器，主要完成【收集订阅消息】、【通知对应订阅者】两件事</p></li><li><p>Watcher是Vue中的订阅者，主要完成【订阅消息】、【在订阅的时候让收集器Dep收集】、【接受订阅器的消息】、【做好更新工作】4件事</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发布订阅模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js防抖</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E9%98%B2%E6%8A%96/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E9%98%B2%E6%8A%96/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是防抖</p><p>可以通过一个例子理解，假定做公交车的时候，司机需要等待最后一个人进入在关门，每次新进一个人，司机就会把计数器清零并重新开始计时，重新等待一分钟在关门，如果后续都没有乘客上车，司机会认为乘客全部上全，将关门发车。</p><p>【上车的乘客】就是我们频繁操作不断调用的回调函数，【1分钟】就是计数器，他是决定【关门】的关键，如果有【上车的乘客】就把计数器清零并重新计时，【关门】就是最后需要执行的函数。</p><p>专业的解释：在一定的时间间隔内，事件被触发多次，但是只执行最后一次。</p></li><li><p>需要防抖的情况</p><p>如鼠标移动事件onmousemove, 滚动滚动条事件onscroll，窗口大小改变事件onresize</p></li><li><p>防抖的实现:需求是当鼠标移出app这个div时，h2的内容发生变化</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br><span class="hljs-keyword">var</span> h2 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;h2&#x27;</span>);<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>app.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 这样操作dom性能会非常差</span><br>    h2.innerHTML = count;<br>    count++;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210904222538.gif" alt="96"></p><p>但是会出现问题，当用户频繁的去移入移出鼠标的时候，页面的性能会非常差。</p></li><li><p>解决的方法，就是利用防抖</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br><span class="hljs-keyword">var</span> h2 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;h2&#x27;</span>);<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 解决办法就是防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 计时器</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//闭包</span><br>        <span class="hljs-keyword">if</span> (timer !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">//清空计时器，重新设置</span><br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(fn, wait);<br>    &#125;<br>&#125;<br>app.onmousemove = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    h2.innerHTML = count;<br>    count++;<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210904222916.gif" alt="97"></p><ol start="5"><li>保存ev和this</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 解决办法就是防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 计时器</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//闭包</span><br>        <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 传递this</span><br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>; <span class="hljs-comment">// 传递事件</span><br>        <span class="hljs-keyword">if</span> (timer !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">//清空计时器，重新设置</span><br>        &#125;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            fn.apply(context, args)<br>        &#125;, wait);<br>    &#125;<br>&#125;<br>app.onmousemove = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) </span>&#123;<br>    <span class="hljs-comment">// console.log(this);</span><br>    <span class="hljs-comment">// console.log(ev);</span><br>    h2.innerHTML = count;<br>    count++;<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure><p>fn是要进行防抖的函数，wait是延迟的时间，debounce返回一个匿名函数，形成闭包，内部调用了timer，定时器返回一个id给timer，如果在同一时间内频繁触发这个函数，就会清空定时器，从新计时。</p><ol start="6"><li><p>立即执行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 第一次是立即执行的</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait, immediate</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 计时器</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//闭包</span><br>         <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 传递this</span><br>         <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>; <span class="hljs-comment">// 传递事件</span><br>         timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);<br>         <span class="hljs-keyword">if</span> (immediate) &#123; <span class="hljs-comment">//需要立即执行</span><br>             <span class="hljs-keyword">const</span> doNow = !timer;<br>             timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                 timer = <span class="hljs-literal">null</span>;<br>             &#125;, wait)<br>             doNow &amp;&amp; fn.apply(context, args);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                 fn.apply(context, args)<br>             &#125;, wait);<br>         &#125;<br>     &#125;<br> &#125;<br> app.onmousemove = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>     h2.innerHTML = count;<br>     count++;<br> &#125;, <span class="hljs-number">1000</span>,<span class="hljs-literal">true</span>)<br></code></pre></div></td></tr></table></figure></li><li><p>兼容返回值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait, immediate</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">const</span> context = <span class="hljs-built_in">this</span>;<br>          <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span>;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>              timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);  <span class="hljs-comment">//计时器存在，清空计时器</span><br>              <span class="hljs-keyword">if</span> (immediate) &#123;<br>                  <span class="hljs-keyword">const</span> doNow = !timer;<br>                  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 重新计时</span><br>                      timer = <span class="hljs-literal">null</span>;<br>                  &#125;, wait);<br>                  doNow &amp;&amp; resolve(fn.apply(context, args));<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                      resolve(fn.apply(context, args));<br>                  &#125;, wait);<br>              &#125;<br>          &#125;)<br>      &#125;<br>  &#125;<br>  app.onmousemove = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      h2.innerHTML = count;<br>      count++;<br>  &#125;, <span class="hljs-number">1000</span>, <span class="hljs-literal">true</span>);<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>防抖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-java回溯算法</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/javajava-java%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/javajava-java%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li><p>全排列</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kjj.test;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kjj 创建时间：2021年9月3日 下午6:39:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 回溯算法<span class="hljs-title">_</span>全排列 </span>&#123;<br><span class="hljs-comment">// 返回值</span><br><span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-comment">// 全排列方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span> nums[]) &#123;<br>LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br><span class="hljs-comment">// 回溯方法</span><br>backtrack(track, nums);<br><span class="hljs-keyword">return</span> res;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(LinkedList&lt;Integer&gt; track, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br><span class="hljs-comment">// 如果选择列表和路径一样，说明到达叶子节点</span><br><span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br><span class="hljs-comment">// 将数组加入结果集</span><br>res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(track));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 遍历多叉树</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br><span class="hljs-comment">// 做选择 选择列表已经存在值，就直接下一次循环</span><br><span class="hljs-keyword">if</span> (track.contains(nums[i])) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">// 将选择加入选择列表</span><br>track.add(nums[i]);<br><span class="hljs-comment">// 递归</span><br>backtrack(track, nums);<br><span class="hljs-comment">// 撤销选择 LinkListed有removeLast()方法</span><br>track.removeLast();<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> nums[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-comment">// [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span><br>System.out.println(permute(nums));<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>N皇后</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kjj.test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kjj 创建时间：2021年9月3日 下午7:09:37</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 回溯算法<span class="hljs-title">_N</span>皇后 </span>&#123;<br><span class="hljs-comment">// 返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="hljs-keyword">int</span> n) &#123;<br><span class="hljs-comment">// 初始化棋盘</span><br>String[][] track = <span class="hljs-keyword">new</span> String[n][n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>track[i][j] = <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 回溯算法</span><br>backTrack(track, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> res;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backTrack</span><span class="hljs-params">(String[][] track, <span class="hljs-keyword">int</span> row)</span> </span>&#123;<br><span class="hljs-comment">// 存放满足的行</span><br>List&lt;String&gt; list = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">// 行和棋盘行相等，说明放完一次，跳出循环</span><br><span class="hljs-keyword">if</span> (row == track.length) &#123;<br><span class="hljs-comment">// 有满足的情况，初始化list</span><br>list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; row; i++) &#123;<br><span class="hljs-comment">// 将得到的字符用str连接</span><br>String str = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; row; j++) &#123;<br>str += track[i][j];<br>&#125;<br><span class="hljs-comment">// 得到一行，放入list</span><br>list.add(str);<br>&#125;<br><span class="hljs-comment">// list放入结果</span><br>res.add(list);<br>&#125;<br><span class="hljs-keyword">int</span> n = track.length;<br><span class="hljs-comment">// 做选择</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br><span class="hljs-keyword">if</span> (!valid(track, row, col)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>track[row][col] = <span class="hljs-string">&quot;Q&quot;</span>;<br><span class="hljs-comment">// 递归</span><br>backTrack(track, row + <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 撤销选择</span><br>track[row][col] = <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">valid</span><span class="hljs-params">(String[][] track, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col)</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = track.length;<br><span class="hljs-comment">// 列冲突</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">if</span> (track[i][col] == <span class="hljs-string">&quot;Q&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 左上方冲突</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br><span class="hljs-keyword">if</span> (track[i][j] == <span class="hljs-string">&quot;Q&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 右上方冲突</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col + <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;<br><span class="hljs-keyword">if</span> (track[i][j] == <span class="hljs-string">&quot;Q&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">1</span>;<br>List&lt;List&lt;String&gt;&gt; res = solveNQueens(n);<br>System.out.println(res);<br><span class="hljs-comment">// for (int i = 0; i &lt; res.size(); i++) &#123;</span><br><span class="hljs-comment">// System.out.println(res.get(i));</span><br><span class="hljs-comment">// &#125;</span><br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法练习</tag>
      
      <tag>回溯算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-强缓存和弱缓存</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%BC%B1%E7%BC%93%E5%AD%98/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%BC%B1%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、浏览器缓存分类"><a href="#一、浏览器缓存分类" class="headerlink" title="一、浏览器缓存分类"></a>一、浏览器缓存分类</h2><ul><li>http缓存和本地存储：本篇主要讲解http缓存</li></ul><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930135815.png" alt="image-20210930135813684"></p><h2 id="二、什么是http缓存"><a href="#二、什么是http缓存" class="headerlink" title="二、什么是http缓存"></a>二、什么是http缓存</h2><blockquote><p>http缓存指的是：当客户端向服务器端请求资源的时候，会先到达浏览器缓存，如果浏览器缓存中存在这个资源的“副本”，就可以直接从浏览器缓存中读取，不需要在向服务器端获取这个资源。</p></blockquote><blockquote><p>常见的http缓存只能缓存get请求响应的资源，对其他的类型的响应无能为力，所以http缓存讨论的都是get请求响应的资源。</p></blockquote><h2 id="三、http缓存分类"><a href="#三、http缓存分类" class="headerlink" title="三、http缓存分类"></a>三、http缓存分类</h2><ol><li><p>强缓存</p><p>当浏览器去请求某个文件的时候，服务器在response header里面对文件做了缓存配置，</p><p>respone header 的cache-control，常见的设置是max-age public private no-cache no-store等</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903230009.webp" alt="img"></p><ul><li><p>cache-control: max-age=xxxx，public</p><ul><li><p>public的意思是客户端和代理服务器都可以缓存该资源</p></li><li><p>客户端在xxx秒的有效期内，如果发起了请求就去直接读缓存，返回状态200，如果用户做了刷新操作，就去请求服务器。</p></li></ul></li><li><p>cache-control: max-age=xxxx，private</p><ul><li>private的意思是只有客户端可以进行缓存</li><li>客户端在xxx秒的有效期内，如果发起了请求就去直接读缓存，返回状态200，如果用户做了刷新操作，就去请求服务器。</li></ul></li><li><p>cache-control: max-age=xxxx，immutable（<strong>强缓存</strong>）</p><ul><li>客户端在xxx秒的有效期内，如果发起请求就直接去读缓存，返回状态200，如果用户做了刷新操作也不会去请求服务器</li></ul></li><li><p>cache-control: no-cache（不设置强缓存，不是字面意思的没有缓存）</p><ul><li>跳过设置强缓存，但是不妨碍设置协商缓存</li><li>如果设置了强缓存，一般强缓存失效，才会去走协商缓存</li><li>但是设置了no-cache，就没有强缓存了，每次都会去请求服务器</li></ul></li><li><p>cache-control: no-store</p><ul><li>不缓存，没有强缓存或者协商缓存的说法</li></ul></li></ul></li></ol><blockquote><p>跟强制缓存相关的header头属性</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930091719.webp" alt="img"></p><ol><li><p>协商缓存</p><ul><li><p>上面说到的强缓存就是给资源设置一个过期时间，每次请求都去看过期了没有，如果过期了就去发送请求到服务器，如果没有过期就读取内存的数据。</p></li><li><p>这时候在去请求服务器的过程就可以设置协商缓存</p><p>response header里面的设置</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">etag: <span class="hljs-string">&#x27;5c20abbd-e2e8&#x27;</span> <span class="hljs-comment">//可以理解成每个文件的id，唯一标识（实体标签）</span><br>last-modified: Mon, <span class="hljs-number">24</span> Dec <span class="hljs-number">2018</span> <span class="hljs-number">09</span>:<span class="hljs-number">49</span>:<span class="hljs-number">49</span> GMT <span class="hljs-comment">// 上一次修改时间，精确到秒</span><br></code></pre></div></td></tr></table></figure><p>这就是说，每次请求返回的response header的etag和last-modified，在下一次请求request header的时候都会带上，服务器把带过来的标识进行对比，如果没变就还是返回旧的，如果变了，就返回新的值。</p><p>对于客户端来说每次请求都要进行协商缓存了</p><p>发请求—&gt;看资源是否过期—&gt;过期—&gt;请求服务器—&gt;服务器对比是否真的过期—&gt;没过期—&gt;返回304 状态码—&gt;客户端用缓存的资源</p><p>如果真的过期了，走下面这条路</p><p>发请求—&gt;看资源是否过期—&gt;过期—&gt;请求服务器—&gt;服务器对比是否真的过期—&gt;过期—&gt;返回200状态码—&gt;客户端就向第一次请求资源一样，记录cache-control中的max-age、etag、last-modified的值</p></li></ul></li><li><p>为什么有etag？</p><ul><li>主要解决last-modified的不足<ol><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新get；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，if-modified-since能检查到的粒度是秒级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ol></li></ul></li></ol><blockquote><p>跟协商缓存相关的header头属性有（ETag/If-Not-Match 、 Last-Modified/If-Modified-Since）请求头和 响应头需要成对出现</p></blockquote><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930092016.webp" alt="img"></p><h2 id="四、2种缓存的对比"><a href="#四、2种缓存的对比" class="headerlink" title="四、2种缓存的对比"></a>四、2种缓存的对比</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930091529.webp" alt="img"></p><h2 id="五、为什么需要http缓存"><a href="#五、为什么需要http缓存" class="headerlink" title="五、为什么需要http缓存"></a>五、为什么需要http缓存</h2><ol><li>减少了冗余数据的传输</li><li>缓解了服务器的压力，大大提高了网站的性能</li><li>加快了客户端加载网页的速度</li></ol><h2 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h2><ol><li><p>强缓存，服务器通知浏览器设置一个过期时间，在缓存时间内请求资源，直接读取缓存，时间过期，走协商缓存</p></li><li><p>协商缓存，将协商缓存的关键字段ETag/Last-Modified通过请求发给服务器端，由服务器检验，返回304状态码直接读取缓存，返回200服务器返回新的资源</p></li><li><p>浏览器首次请求和再次发送http请求的流程图</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930093014.png" alt="img"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930093001.png" alt="img"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/9c95db596df5">彻底弄懂强缓存与协商缓存</a></p><p>[<a href="https://www.cnblogs.com/yxkNotes/p/13931717.html">浏览器设置强缓存和协商缓存</a>]</p><p><a href="https://www.jianshu.com/p/227cee9c8d15">一文读懂http缓存</a></p><p><a href="https://www.cnblogs.com/ranyonsue/p/8918908.html">HTTP缓存机制</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
      <tag>强缓存和弱缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-状态码</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<ol><li><p>301</p><ul><li>永久移动，指请求的资源已经被永久的移动到新的url，返回的信息会包含新的url，浏览器还会自动定向到新的url</li></ul></li><li><p>302</p><ul><li>临时移动，与301类似，但是资源只是被临时的移动，客户端继续使用原有的url</li></ul></li><li><p>304</p><ul><li>未修改，所访问的资源没有修改，服务器端返回此状态码时，不会返回任何资源，常用于缓存机制</li></ul></li><li><p>4xx</p><ul><li>一般是客户端问题，代码错误</li></ul></li><li><p>5xx</p><ul><li>一般是服务端问题</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>状态码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-13css位置</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E4%BD%8D%E7%BD%AE/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ol><li><p>position的值：relative、absolute、fixed、static、sticky</p><p>relative：相对布局，相对于自己正常位置进行定位,(原来的位置还在保留，向下移动了10px)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    <span class="hljs-selector-class">.relative</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;relative&quot;&gt;<span class="hljs-number">111</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903220832.gif" alt="95"></p><p>absolute：绝对布局，相对于static定位以外的第一个父元素进行定位</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">     <span class="hljs-selector-class">.absolute</span> &#123;<br>         <span class="hljs-attribute">position</span>: absolute;<br>         <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>         <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>     &#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;absolute&quot;&gt;<span class="hljs-number">111</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903220218.png" alt="image-20210903220217661"></p><p>fixed：固定布局，相对于浏览器窗口定位</p><p>static：默认布局，没有定位，元素出现在正常的流中</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.static</span> &#123;<br>           <span class="hljs-attribute">position</span>: static;<br>       &#125;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;static&quot;&gt;<span class="hljs-number">111</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903220340.png" alt="image-20210903220339541"></p><p>sticky：粘性布局（适用场合：一开始不显示，滚动到一定位置需要显示的元素）</p><p>inherit：从父级继承position属性</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css位置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-13css布局</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E5%B8%83%E5%B1%80/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是flex</p><ul><li>flex 是W3C提出的新的布局方式，也叫弹性布局</li></ul></li><li><p>特性</p><ul><li>任何元素都可以设置弹性布局</li><li>设置flex布局以后，子元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性都无效</li></ul></li><li><p>属性</p><ul><li><p>所有子元素自动成为容器的一部分，可以叫做项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910210442.png" alt="img"></p></li><li><p>单个项目占据的主轴的空间叫做mian-size</p></li></ul></li><li><p>6个基本属性</p><ul><li><p>flex-direction：设置主轴的方向，4个值：row | row-reverse | column | column-reverse</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211100.png" alt="img"></p></li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">- `row`（默认值）：主轴为水平方向，起点在左端。<br>- `row-reverse`：主轴为水平方向，起点在右端。<br>- `column`：主轴为垂直方向，起点在上沿。<br>- `column-reverse`：主轴为垂直方向，起点在下沿。<br></code></pre></div></td></tr></table></figure><ul><li><p>flex-wrap:控制项目是否换行，3个值：  flex-wrap: nowrap | wrap | wrap-reverse;</p><p>（1）<code>nowrap</code>（默认）：不换行。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211332.png" alt="img"></p><p>（2）<code>wrap</code>：换行，第一行在上方</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211340.jpeg" alt="img"></p><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211349.jpeg" alt="img"></p></li><li><p>flex-flow：是flex-direction、flex-warp的缩写，默认值是 row nowrap 水平排列不换行</p></li><li><p>justify-content：定义项目的对齐方式，5个值：justify-content: flex-start | flex-end | center | space-between | space-around;</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211645.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br></code></pre></div></td></tr></table></figure></li><li><p>align-items :交叉轴（可以理解成一般情况下的垂直轴）5个值：flex-start | flex-end | center | baseline | stretch;</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910211958.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br><span class="hljs-attr">baseline</span>: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br></code></pre></div></td></tr></table></figure></li><li><p>align-content:定义多个维度的对齐方式，如果只有一个轴线，不起作用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910212221.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>子元素(项目)属性</p><ul><li><p>order定义项目的排列属性，值越小，越在前面</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910213203.png" alt="img"></p></li><li><p>flex-gorw：定义项目的放大比例，默认为0，不放大，如果都是1，就平分，如果有一个是2，则占据的空间比其他的大一倍</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910213434.png" alt="img"></p></li><li><p>flex-shink：定义项目的缩小比例，默认是1，如果空间不够，就被挤小，如果值是0，则不会被挤小</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910213641.jpeg" alt="img"></p></li><li><p>flex-basis：定义项目占据的主轴空间，默认是auto，就是项目本来的大小</p></li><li><p>flex :是flex-grow、flex-shink、flex-basis的缩写，默认值是 0 1 auto </p></li><li><p>align-self：允许单个项目有不同的对齐方式 6个值：auto | flex-start | flex-end | center | baseline | stretch;默认值是auto，继承父元素的属性，如果没有父元素，等同于stretch</p></li></ul></li><li><p>总结<br>容器的属性：flex-direction、flex-wrap、flex-flow（flex-direction+flex-wrap）、justify-content、align-items、align-content</p><p>项目的属性：order、flex-grow、flex-shink、flex-basis、flex（flex-grow+flex-shink+flex-basis）、align-self</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flex布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js全排列</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-js%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-js%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<ol><li><p>js方法全排列</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// // 输入 123 输出 123 132 213 231 321 312</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fulPerm</span>(<span class="hljs-params">list, k, m</span>) </span>&#123; <span class="hljs-comment">//k是第一个元素的下标，m是数组的长度-1</span><br>    <span class="hljs-keyword">if</span> (k == m) &#123;<br>        <span class="hljs-built_in">console</span>.log(list);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = k; i &lt;=m; i++) &#123;<br>            <span class="hljs-keyword">let</span> temp = list[k]; <span class="hljs-comment">//swap(list[k],list[i])</span><br>            list[k] = list[i];<br>            list[i] = temp;<br>            fulPerm(list, k + <span class="hljs-number">1</span>, m);<br>            list[i] = list[m];<span class="hljs-comment">// swap(list[k],list[i])</span><br>            list[m] = temp;<br><br>        &#125;<br>    &#125;<br>&#125;<br>list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>fulPerm(list, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure></li><li><p>java方法全排列</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kjj.test;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kjj 创建时间：2021年9月3日 下午6:39:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 回溯算法<span class="hljs-title">_</span>全排列 </span>&#123;<br><span class="hljs-comment">// 返回值</span><br><span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-comment">// 全排列方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span> nums[]) &#123;<br>LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br><span class="hljs-comment">// 回溯方法</span><br>backtrack(track, nums);<br><span class="hljs-keyword">return</span> res;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(LinkedList&lt;Integer&gt; track, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br><span class="hljs-comment">// 如果选择列表和路径一样，说明到达叶子节点</span><br><span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br><span class="hljs-comment">// 将数组加入结果集</span><br>res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(track));<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 遍历多叉树</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br><span class="hljs-comment">// 做选择 选择列表已经存在值，就直接下一次循环</span><br><span class="hljs-keyword">if</span> (track.contains(nums[i])) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">// 将选择加入选择列表</span><br>track.add(nums[i]);<br><span class="hljs-comment">// 递归</span><br>backtrack(track, nums);<br><span class="hljs-comment">// 撤销选择 LinkListed有removeLast()方法</span><br>track.removeLast();<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> nums[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-comment">// [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span><br>System.out.println(permute(nums));<br>&#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>全排列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js实现indexOf方法</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%AE%9E%E7%8E%B0indexOf%E6%96%B9%E6%B3%95/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%AE%9E%E7%8E%B0indexOf%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li><p>实现自己的indexOf</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">indexOf</span>(<span class="hljs-params">str, subStr, n</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> index = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> i = n ? n : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; str.length) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] === subStr[j]) &#123; <span class="hljs-comment">//找到第一个字符以后，比较长度</span><br>            <span class="hljs-keyword">if</span> (str.slice(i, i + subStr.length) === subStr) &#123;<br>                index = i;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 第一次找到循环就结束</span><br>            &#125;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> index;<br>&#125;<br><span class="hljs-comment">// let str = &quot;acanacd&quot;;</span><br><span class="hljs-comment">// let subStr = &quot;acd&quot;;</span><br><span class="hljs-comment">// let str = &quot;asddffrg&quot;;</span><br><span class="hljs-comment">// let subStr = &quot;frg&quot;;</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;acadecamic&quot;</span>;<br><span class="hljs-keyword">let</span> subStr = <span class="hljs-string">&quot;ca&quot;</span>;<br><span class="hljs-built_in">console</span>.log(indexOf(str, subStr,<span class="hljs-number">3</span>)); <span class="hljs-comment">// 4 5 5</span><br></code></pre></div></td></tr></table></figure></li><li><p>实现自己的indexOf</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 情况分析</span><br><span class="hljs-comment">    * 1.全部不匹配 &quot;abcdefg&quot; &quot;nom&quot; 遍历完发现没有匹配首字母(那其他字母就不看了) 返回-1</span><br><span class="hljs-comment">    * 2.部分匹配 &quot;abcdefg&quot; &quot;adf&quot;   首字母匹配后，开始匹配第二个字母，发现不匹配，跳出循坏，接着匹配首字母，循坏完没有，返回-1</span><br><span class="hljs-comment">    * 3.全部匹配 &quot;abcdefg&quot; &quot;abc&quot;   匹配首字母之后，匹配剩余的字符，返回首字母所在的位置</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>n </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-built_in">String</span>.prototype.myIndexOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str, n</span>) </span>&#123;<br>       <span class="hljs-keyword">let</span> len1 = <span class="hljs-built_in">this</span>.length;<br>       <span class="hljs-keyword">let</span> len2 = str.length;<br>       <span class="hljs-keyword">let</span> i = n || <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (i; i &lt; len1; i++) &#123; <span class="hljs-comment">//遍历原字符串</span><br>           <span class="hljs-keyword">if</span> (str[<span class="hljs-number">0</span>] === <span class="hljs-built_in">this</span>[i]) &#123; <span class="hljs-comment">//找到了第一次首字符匹配的地方</span><br>               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len2; j++) &#123; <span class="hljs-comment">//遍历目标字符串</span><br>                   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>[i + j] !== str[j]) &#123; <span class="hljs-comment">// 如果遍历开始出现不匹配</span><br>                       <span class="hljs-keyword">if</span> (i === len1 - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 找完了所有首字符匹配的情况返回-1</span><br>                           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                       &#125; <span class="hljs-keyword">else</span> &#123;<br>                           <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 不匹配跳出当前循坏，重新开始查找首字母</span><br>                       &#125;<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       <span class="hljs-keyword">if</span> (j == len2 - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//每一个都匹配，且遍历完了str</span><br>                           <span class="hljs-keyword">return</span> i;<br>                       &#125;<br>                   &#125;<br>   <br>               &#125;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">if</span> (i === len1 - <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//找完也没找到，就是不存在</span><br>                   <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>               &#125;<br>           &#125;<br>   <br>       &#125;<br>   <br>   &#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;acanacd&quot;</span>.myIndexOf(<span class="hljs-string">&quot;acd&quot;</span>);<br>   <span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;acadecamic&quot;</span>.myIndexOf(<span class="hljs-string">&quot;cai&quot;</span>);<br>   <span class="hljs-keyword">let</span> c = <span class="hljs-string">&quot;asddffrg&quot;</span>.myIndexOf(<span class="hljs-string">&quot;frg&quot;</span>);<br>   <span class="hljs-keyword">let</span> d = <span class="hljs-string">&quot;acadecamic&quot;</span>.myIndexOf(<span class="hljs-string">&quot;ca&quot;</span>, <span class="hljs-number">3</span>);<br>   <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//4</span><br>   <span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">//-1</span><br>   <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//5</span><br>   <span class="hljs-built_in">console</span>.log(d);<span class="hljs-comment">//5</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实现indexOf方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue中$nextTick</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E4%B8%AD-nextTick/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E4%B8%AD-nextTick/</url>
    
    <content type="html"><![CDATA[<ol><li><p>vue更新数据是异步的，(也就是说你执行的DOM更新不会立马执行)</p></li><li><p>$nextTick(()=&gt;{}) 与DOM相关的操作写在该函数回调中，确保DOM已经渲染</p></li><li><p>在create()钩子函数进行的DOM操作一定要放在Vue.$nextTick()的回调函数中</p></li><li><p>在create()钩子函数执行的时候，DOM其实并没有做任何的渲染，所以此时进行DOM操作，没有任何作用</p></li><li><p>mounted()钩子函数，因为该钩子函数执行的时候，所以的DOM都已经执行完成</p></li><li><p>在某些动作可能改变DOM元素结构的时候，对DOM进行的一系列js操作都应该放在Vue.nextTick()的回调函数中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>        &lt;div id=&quot;div&quot; v-if=&quot;showDiv&quot;&gt;这是一段文本&lt;/div&gt;<br>        &lt;button @click=&quot;getText&quot;&gt;点击&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    var app = new Vue(&#123;<br>        el: &#x27;#app&#x27;,<br>        data: &#123;<br>            showDiv: false<br>        &#125;,<br>        methods: &#123;<br>            // getText() &#123;<br>            //     this.showDiv = true;<br>            //     var text = document.getElementById(&#x27;div&#x27;);<br>            //     console.log(text); //得到是空值，因为此时dom并没有重新渲染，所以div里没有值<br>            // &#125;,<br>            getText() &#123;<br>                this.showDiv = true;<br>                this.$nextTick(function () &#123;<br>                    var text = document.getElementById(&#x27;div&#x27;).innerHTML;<br>                    console.log(text); //这是一段文本<br>                &#125;)<br><br>            &#125;<br>        &#125;,<br>    &#125;)<br>&lt;/script&gt;<br><br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>$nextTick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-jsCommonJs和Es6模块区别</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-jsCommonJs%E5%92%8CEs6%E6%A8%A1%E5%9D%97%E5%8C%BA%E5%88%AB/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-jsCommonJs%E5%92%8CEs6%E6%A8%A1%E5%9D%97%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h2><ol><li><p>CommonJs是定义模块，提供通用的模块组织方式</p></li><li><p>模块导出</p><ul><li><p>关键字 module.exports 、exports</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//counter.js</span><br><span class="hljs-built_in">exports</span>.count = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">module</span>.exports.count2 = <span class="hljs-number">2</span>;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p> 模块导入</p></li></ol><ul><li><p>关键词 require</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./counter.js&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(counter.count); <span class="hljs-comment">//1 </span><br><span class="hljs-built_in">console</span>.log(counter.count2); <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure></li></ul><ol start="4"><li><p>CommonJs对基本数据类型</p><ul><li><p>属于复制，会被模块缓存，同时，在另一个模块可以对模块输出的变量重新赋值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//aa.js</span><br><span class="hljs-built_in">exports</span>.aa = <span class="hljs-string">&#x27;aa&#x27;</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">const</span> aa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./aa&#x27;</span>)<br>aa.aa = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">const</span> bb = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./aa&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(bb.aa); <span class="hljs-comment">//aaa</span><br><span class="hljs-built_in">console</span>.log(aa.aa); <span class="hljs-comment">//aaa</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>CommonJs对复杂数据类型</p><ul><li><p>属于浅拷贝，两个模块引用的同一个内存空间，对该模块做修改会影响另一个模块</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//a.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">2</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a.foo); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(b.foo); <span class="hljs-comment">//2</span><br>a.foo = <span class="hljs-string">&#x27;a3&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(a.foo); <span class="hljs-comment">//a3</span><br><span class="hljs-built_in">console</span>.log(b.foo); <span class="hljs-comment">//a3 a模块改变，b模块也会改变</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>CommonJs的循环引用和缓存</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//b.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;in b, a.a1 = %j, a.a2 = %j&#x27;</span>, a.a1, a.a2);<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//a.js</span><br><span class="hljs-built_in">exports</span>.a1 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;in a, b.done = %j&#x27;</span>, b.done);<br><span class="hljs-built_in">exports</span>.a2 = <span class="hljs-literal">true</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;in main, a.a1 = %j, a.a2 = %j&#x27;</span>, a.a1, a.a2);<br><span class="hljs-comment">//in b, a.a1 = true, a.a2 = undefined</span><br><span class="hljs-comment">// in a, b.done = undefined</span><br><span class="hljs-comment">// in main, a.a1 = true, a.a2 = true</span><br></code></pre></div></td></tr></table></figure><ul><li><p>实际在模块a还没有执行之前就已经创建好了Module实例写入缓存中，此时代码没有执行，exports是一个空对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;d:\kjj_project\面试\js\11commonJs和Es6区别\测试\a.js&#x27;</span>: <br>   Module &#123;<br>     <span class="hljs-attr">exports</span>: &#123;&#125;,<br>     <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>a.js 中的代码<code>exports.a1 = true;</code>修改了module.exports上的a1为true，这个时候a2的代码还没有执行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;d:\kjj_project\面试\js\11commonJs和Es6区别\测试\a.js&#x27;</span>: <br>  Module &#123;<br>     <span class="hljs-attr">exports</span>: &#123;<br>      <span class="hljs-attr">a1</span>: <span class="hljs-literal">true</span><br>    &#125;<br>     <span class="hljs-comment">//...</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>进入到b.js，require a.js 发现缓存已经存在了，直接获取a模块上的exports,打印a1,a2分别是true，undefined</p></li><li><p>运行完b.js 继续a模块的代码，<code>exports.a2 = true</code>; 又往 <code>exports</code> 对象上增加了<code>a2</code>属性，此时 <code>module a</code> 的 <code>export</code>对象 <code>a1</code>, <code>a2</code> 均为 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-built_in">exports</span>: &#123;<br>  <span class="hljs-attr">a1</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">a2</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>回到main模块，再回到 <code>main</code> 模块，由于 require(‘./a.js’) 得到的是 <code>module a export</code> 对象的引用，这时候打印 <code>a1</code>, <code>a2</code> 就都为 <code>true</code>。</p></li></ul></li><li><p>小结</p><p>CommonJs模块加载的过程是同步阻塞性的加载。在模块运行前就已经写入了cache,同一个模块被多次require只会执行一次，重复的require得到的是相同的exports的引用</p></li></ol><h2 id="Es6"><a href="#Es6" class="headerlink" title="Es6"></a>Es6</h2><h3 id="Es6的模块机加载分成3步："><a href="#Es6的模块机加载分成3步：" class="headerlink" title="Es6的模块机加载分成3步："></a>Es6的模块机加载分成3步：</h3><ol><li><p>查找、下载、解析、构建所有模块实例</p><p>Es6在程序开始会先根据模块关系找到所有模块，生成一个无环关系图，这个方式天然的避免了循环引用的问题，当然也有模块加载缓存，重复引入import，实际上只执行一次</p></li><li><p>在内存中腾出空间给即将export的内容，使用import和export指向这些内容，这个过程也叫连接</p><ul><li><p>CommonJs</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//counter</span><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increment</span>(<span class="hljs-params"></span>) </span>&#123;<br>    count++<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    count,<br>    increment<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./counter&#x27;</span>)<br>counter.increment(); <span class="hljs-comment">// 修改的是模块内基础数据类型的变量，不会改变导出的值</span><br><span class="hljs-built_in">console</span>.log(counter.count); <span class="hljs-comment">// 1 </span><br></code></pre></div></td></tr></table></figure></li><li><p>Es6</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//counter.mjs</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increment</span>(<span class="hljs-params"></span>) </span>&#123;<br>    count++;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//main.mjs</span><br><span class="hljs-keyword">import</span> &#123; increment, count &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./counter.mjs&quot;</span>;<br>increment();<br><span class="hljs-built_in">console</span>.log(count); <span class="hljs-comment">//2 </span><br></code></pre></div></td></tr></table></figure><ul><li>从上面的对比中可以看出，从结果上看使用 <code>ES6</code> 模块的写法，当 <code>export</code> 的变量被修改时，会影响 <code>import</code> 的结果。</li></ul></li></ul></li><li><p> 运行模块代码将变量的实际值填写在第二步生成的空间中</p></li><li><p>区别</p><ul><li>require会将完整的exports对象引入，import可以只引入必要的内容</li><li>import没有找到export的变量，在执行前就会报错，而Common.js在运行时才会报错</li></ul></li><li><p>开发中为什么CommonJs和Es6模块可以混用？</p><ul><li>原因是在开发中写的Es6模块都会被打包工具处理成CommonJs模块</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/xgangzai/article/details/106935104">CommonJS 和 ES6 Module 究竟有什么区别？</a></p><p><a href="https://www.cnblogs.com/unclekeith/p/7679503.html">CommonJS模块和ES6模块的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CommonJs和Es6模块区别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue插槽</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E6%8F%92%E6%A7%BD/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-vue%E6%8F%92%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<ol><li><p>slot什么时候用？</p><ul><li>父组件向子组件传递内容</li></ul></li><li><p>为什么需要slot？</p><ul><li>实际上父组件向子组件传值可以通过props实现，但是，父组件传递给子组件很多内容的时候，子组件无法用一个div包裹来显示，所以slot出现</li><li><strong>解决方法：</strong>Vue内置语法 : <em><strong>slot*</strong> 。</em><strong>slot*</strong> 里插入父组件向子组件插入的内容</li></ul></li><li><p>默认插槽</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210901114037.png" alt="image-20210901114036393"></p></li><li><p>为什么需要具名插槽？</p><ul><li>如果没有定义父组件插入子组件内容的唯一性，那么父组件的内容会被一个slot占用并使用</li><li><strong>解决方法：</strong>给父组件和子组件都取一个唯一的标识名，父组件和子组件需要对应</li></ul></li><li><p>具名插槽</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210901114200.png" alt="image-20210901114159899"></p></li><li><p>当<strong>子组件做循环显示列表</strong> 或 <strong>某一部分由外部传递进来</strong> 时，则使用 <strong>作用域插槽</strong></p></li><li><p>作用域插槽</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210901151354.png" alt="image-20210901151350380"></p><div class="note note-success">            <ul><li>具名插槽在vue 2.6+ 之后，弃用</li><li> 在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 <code>v-slot</code> 指令)</li><li>已经废弃的slot=“插槽名”用v-slot:“插槽名”代替</li><li>已经废弃的slot-scope = “任意名字(一般取scope)”用v-slot=“任意名字(一般取scope)”代替</li></ul>          </div></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/51107654">（深入Vue组件）6.slot插槽+作用域插槽</a></p><p><a href="https://blog.csdn.net/xiaodi520520/article/details/90524878">slot的使用</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue插槽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js分析call,apply,bind作用</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%88%86%E6%9E%90call-apply-bind%E4%BD%9C%E7%94%A8/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%88%86%E6%9E%90call-apply-bind%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>call、apply、bind是Function.prototype原型上的方法</p></li><li><p>任何函数在任何地方都可以使用call、apply、bind，因为任何函数的原型链上都有Function.prototype原型</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210830231603.png" alt="image-20210830231602549"></p></li><li><p>call和apply</p><ul><li><p>调用函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 调用函数</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>  &#125;<br>  fn.call(); <span class="hljs-comment">// 123</span><br>  fn.apply(); <span class="hljs-comment">// 123</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-built_in">console</span>.log(x + y);<br>  &#125;<br>  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>  sum.apply(<span class="hljs-literal">null</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// 5 第一个参数传入null,this指向js的全局对象，浏览器中是window</span><br>  sum.call(<span class="hljs-literal">null</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 5 </span><br></code></pre></div></td></tr></table></figure></li><li><p>传参数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  调用函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">105</span>, <span class="hljs-number">52</span>];<br><span class="hljs-keyword">let</span> max1 = <span class="hljs-built_in">Math</span>.max.call(<span class="hljs-literal">null</span>, <span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">105</span>, <span class="hljs-number">52</span>);<br><span class="hljs-built_in">console</span>.log(max1); <span class="hljs-comment">//105</span><br><span class="hljs-keyword">let</span> max2 = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr)<br><span class="hljs-built_in">console</span>.log(max2);<span class="hljs-comment">// 105</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改this指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 改变this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> dog = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小青&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animal</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a + b);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// js全局对象 浏览器window</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br>animal(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>animal.call(dog, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">// this指向dog对象&#123; name: &#x27;小青&#x27;, age: 3 &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>借用对象方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建伪数组:常见的伪数组 argments、jQuery对象、document.querySelectorAll的返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&quot;卡卡西&quot;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;佐助&quot;</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;鸣人&quot;</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;;<br>[].push.call(obj, <span class="hljs-string">&#x27;小孩&#x27;</span>); <span class="hljs-comment">// 利用数组的方法，往伪数组后面添加一项</span><br><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123; &#x27;0&#x27;: &#x27;卡卡西&#x27;, &#x27;1&#x27;: &#x27;佐助&#x27;, &#x27;2&#x27;: &#x27;鸣人&#x27;, &#x27;3&#x27;: &#x27;小孩&#x27;, length: 4 &#125;</span><br><span class="hljs-keyword">var</span> arr = [].slice.call(obj); <span class="hljs-comment">// 数组的slice方法可以把未数组转换成真数组</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[ &#x27;卡卡西&#x27;, &#x27;佐助&#x27;, &#x27;鸣人&#x27;, &#x27;小孩&#x27; ]</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 借用max求数组而定最大值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">99</span>, <span class="hljs-number">105</span>, <span class="hljs-number">52</span>];<br><span class="hljs-keyword">var</span> ret = <span class="hljs-built_in">Math</span>.max.apply(arr, arr);<br><span class="hljs-built_in">console</span>.log(ret); <span class="hljs-comment">// 105</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>bind</p><ul><li><p>改变this指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * bind改变this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> fn2 = fn.bind([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]); <span class="hljs-comment">// thi固定指定值[10,20,30]</span><br><span class="hljs-built_in">console</span>.log(fn === fn2);<br>fn2();<br></code></pre></div></td></tr></table></figure></li><li><p>修改定时器指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * bind修改定时器指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">hi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向obj</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>        &#125;.bind(<span class="hljs-built_in">this</span>), <span class="hljs-number">1000</span>)<span class="hljs-comment">// this不在定时器内部，指向的是对象obj</span><br>    &#125;<br>&#125;<br>obj.hi(); <span class="hljs-comment">// 13</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>拓展</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * var that = this 解决定时器指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,<br>    <span class="hljs-attr">hi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向window</span><br>            <span class="hljs-built_in">console</span>.log(that.age);<span class="hljs-comment">// that 指向obj</span><br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br>obj.hi(); <span class="hljs-comment">// 13</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 箭头函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">hi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//箭头函数没有自己的this,使用的是外部函数的this 由于箭头函数不绑定this， 它会捕获其所在（即定义的位置）上下文的this值， 作为自己的this值，</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this指向obj</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>        &#125;, <span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br>obj.hi();<span class="hljs-comment">// 12</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call,apply,bind作用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js函数调用模式</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>函数调用模式：函数中的this指向window</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数中this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// window </span><br>&#125;<br>test2();<br></code></pre></div></td></tr></table></figure></li><li><p>方法调用模式：方法中的this指向方法所在的对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法中函数的指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//obj&#123;&#125;这个对象</span><br>    &#125;<br>&#125;<br>obj.sayHi();<br>obj[<span class="hljs-string">&#x27;sayHi&#x27;</span>]();<br></code></pre></div></td></tr></table></figure></li><li><p>构造函数调用模式：指向新构造的函数对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构造方法中的函数指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//Person&#123;&#125;</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>上下文调用模式：call、apply、bind改变this的指向</p><ul><li><p>call和apply可以改变this的指向(第一个参数就是this的指向)</p></li><li><p>其他的参数可以给函数传递实参</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  call改变this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> vm = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<span class="hljs-comment">//undefined</span><br>        <span class="hljs-built_in">console</span>.log(a + b); <span class="hljs-comment">//NaN</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fn2 = vm.fn;<br>fn2.call();<span class="hljs-comment">// 没有参数，默认this指向window</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  call改变this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> vm = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//11 </span><br>        <span class="hljs-built_in">console</span>.log(a + b); <span class="hljs-comment">//3 </span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fn2 = vm.fn;<br>fn2.call(vm, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//this指定是vm</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  apply改变this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> vm = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,<br>    <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//11 </span><br>        <span class="hljs-built_in">console</span>.log(a + b); <span class="hljs-comment">//3 </span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fn2 = vm.fn;<br>fn2.apply(vm, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">//this指定是vm</span><br></code></pre></div></td></tr></table></figure></li><li><p>bind可以改变函数指向，它通过构造一个新的函数</p></li><li><p>新函数和旧函数一样，但是在内存中是2份函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//[ 1, 3, 4 ]</span><br>&#125;<br><span class="hljs-keyword">var</span> fn2 = fn.bind([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br><span class="hljs-built_in">console</span>.log(fn === fn2); <span class="hljs-comment">//false</span><br>fn2(); <br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>setTimeout中函数的指向是this，定时器中的function是window来调用的</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * setTimeout中this指向</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a); <span class="hljs-comment">// 200</span><br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">200</span>;<br>test();<br></code></pre></div></td></tr></table></figure></li><li><p>事件中的this指向当前的元素，是浏览器让当前元素调用了function</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_45674894/article/details/102524862">函数的四种调用模式=&gt;分析this指向</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数调用模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社科处维护</title>
    <link href="/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E7%A4%BE%E7%A7%91%E5%A4%84%E7%BB%B4%E6%8A%A4/"/>
    <url>/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E7%A4%BE%E7%A7%91%E5%A4%84%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、2021-08-30"><a href="#一、2021-08-30" class="headerlink" title="一、2021-08-30"></a>一、2021-08-30</h2><ul><li><p>问题：更新网站内容的时候会发现显示内容会超出边界那个白色</p></li><li><p>解决：对div中table盒子的属性做限制,设置表格的宽度由表格宽度和列宽度设定</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.index_container</span> <span class="hljs-selector-class">.index-content</span> <span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">table-layout</span>: fixed;//列宽由表格宽度和列宽度设定。<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210830170436.png"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210830171605.png"></p></li></ul><h2 id="二、2021-9-10"><a href="#二、2021-9-10" class="headerlink" title="二、2021-9-10"></a>二、2021-9-10</h2><ul><li><p>问题：文本没有省略显示</p></li><li><p>解决设置li是弹性布局，li中的a和span是块级元素，并且要求a的内容省略显示</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.all_container</span> <span class="hljs-selector-class">.content_container</span> <span class="hljs-selector-class">.list_container</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.2rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.3rem</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.all_container</span> <span class="hljs-selector-class">.content_container</span> <span class="hljs-selector-class">.list_container</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.all_container</span> <span class="hljs-selector-class">.content_container</span> <span class="hljs-selector-class">.list_container</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.25rem</span>;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">color</span>: black <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-weight</span>: normal <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910204655.png" alt="image-20210910204647312"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210910204713.png" alt="image-20210910204712089"></p></li></ul><h2 id="三、2021-9-14"><a href="#三、2021-9-14" class="headerlink" title="三、2021-9-14"></a>三、2021-9-14</h2><ul><li><p>问题：修改轮播图，原版轮播图大小占满首屏，再次要求轮播图的大小跟二级菜单页的大小一致。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210928111316.png" alt="image-20210928111308548"></p></li><li><p>解决：重新规划轮播图的css和代码,代码利用bootstrap的代码，css设置轮播图的大小,之前在首页引入的index.js也可以删除，js的代码主要是获取页面高度和监听鼠标变化，现在没有这个需求，就是冗余代码了。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 滑动图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slider&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carousel-example-generic&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel slide&quot;</span> <span class="hljs-attr">data-ride</span>=<span class="hljs-string">&quot;carousel&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Indicators轮播指标 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-indicators&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <br>            <span class="hljs-comment">&lt;!-- Wrapper for slides --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;listbox&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item active&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image/banner1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>  <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image/banner2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>  <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image/banner3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>  <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image/banner4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>  <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./image/banner5.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>  <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>            <span class="hljs-comment">&lt;!-- Controls --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left carousel-control&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-slide</span>=<span class="hljs-string">&quot;prev&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right carousel-control&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-slide</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.swiper</span> &#123;<br>  <span class="hljs-attribute">height</span>: (<span class="hljs-number">285rem</span> / @baseFont);<br><br>  <span class="hljs-selector-class">.slider</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>    <span class="hljs-selector-class">.carousel</span> &#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>      <span class="hljs-selector-class">.carousel-indicators</span> &#123;<br>        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;<br>      &#125;<br><br>      <span class="hljs-selector-class">.carousel-inner</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br><br>        <span class="hljs-selector-class">.item</span> &#123;<br>          <span class="hljs-attribute">height</span>             : <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">width</span>              : <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">background-position</span>: center center;<br>          <span class="hljs-attribute">background-size</span>    : cover;<br><br>          <span class="hljs-selector-tag">img</span> &#123;<br>            <span class="hljs-attribute">height</span>             : <span class="hljs-number">100%</span>;<br>            <span class="hljs-attribute">width</span>              : <span class="hljs-number">100%</span>;<br>            <span class="hljs-attribute">background-position</span>: center center;<br>            <span class="hljs-attribute">background-size</span>    : cover;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>// 设置圆点选中效果<br><span class="hljs-selector-class">.carousel-indicators</span> <span class="hljs-selector-class">.active</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#a3080c</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="四、2021-9-28"><a href="#四、2021-9-28" class="headerlink" title="四、2021-9-28"></a>四、2021-9-28</h2><p>问题：需要设置二级导航栏</p><p>解决：利用bootstrap的导航栏，二级菜单默认是点击显示，利用css设置鼠标悬浮显示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;nav navbar-nav&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/index.html&#x27;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/dept/dept.html&#x27;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>部门简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/policy/policy.html&#x27;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>政策法规<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/research/research.html&#x27;</span></span><br><span class="hljs-tag"><span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>科研基地<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/result/result.html&#x27;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>社科成果<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;/download/download.html&#x27;</span></span><br><span class="hljs-tag"><span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>资料下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 设置鼠标悬停显示二级菜单<br><span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-class">.nav</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropdown-menu</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210928124328.png" alt="image-20210928124326968"></p><p>站群内修改，需要大量的工作</p><ol><li><p>先选择二级菜单的样式</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930111929.png" alt="image-20210930111927960"></p></li><li><p>选择多级菜单显示，根据代码逻辑删减成二级菜单</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930112102.png" alt="image-20210930112101788"></p></li><li><p>编辑代码；设置样式，设置菜单显示与否</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;#--<br>说明：<br><span class="hljs-number">1.</span>放置此导航的页面需要加入DOCTYPE声明，否则不能正常使用，比如在页面模板的最上方放置下面一句话<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br><span class="hljs-number">2.</span>您可以参照样式中的说明修改具体的样式， 如字体大小，颜色，背景色等<br><span class="hljs-number">3.</span>此导航支持 IE6, IE7, IE8... 以及 FireFox<br><span class="hljs-number">4.</span>默认设置为显示三层，可配置<br>--&gt;<br>                <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="xml">                &lt;#list list_menu as menu&gt;&lt;#--1级导航列表--&gt;</span><br><span class="xml">                   &lt;#if (menu.showTitle==&#x27;通知公告&#x27;)&gt;</span><br><span class="xml">                    &lt;#elseif (menu.showTitle==&#x27;社科动态&#x27;)&gt;</span><br><span class="xml">                    &lt;#elseif (menu.showTitle==&#x27;学术交流&#x27;)&gt;</span><br><span class="xml">                    &lt;#elseif (menu.showTitle==&#x27;成果推介&#x27;)&gt;</span><br><span class="xml">                    &lt;#else&gt;</span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;menu.url&#125;&quot;</span> $&#123;<span class="hljs-attr">menu.target</span>&#125;&gt;</span>$&#123;menu.showTitle&#125;<span class="hljs-comment">&lt;!--[if gte IE 7]&gt;&lt;!--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span>  </span><br><span class="xml">                    &lt;#if menu.hasSubMenu&gt;&lt;#--如果有子导航--&gt;</span><br><span class="xml">                    <span class="hljs-comment">&lt;!--[if lte IE 6]&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;![endif]--&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="xml">                        &lt;#list menu.list_subMenu as menu&gt;&lt;#--2级导航列表--&gt;</span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;menu.url&#125;&quot;</span> $&#123;<span class="hljs-attr">menu.target</span>&#125;&gt;</span>$&#123;menu.showTitle&#125;<span class="hljs-comment">&lt;!--[if gte IE 7]&gt;&lt;!--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!--&lt;![endif]--&gt;</span> </span><br><span class="xml">                        &lt;/#list&gt;</span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-comment">&lt;!--[if lte IE 6]&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/a&gt;&lt;![endif]--&gt;</span></span><br><span class="xml">                    &lt;#else&gt;</span><br><span class="xml">                    <span class="hljs-comment">&lt;!--[if lte IE 6]&gt;&lt;/a&gt;&lt;![endif]--&gt;</span></span><br><span class="xml">                    &lt;/#if&gt;</span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>                     &lt;/#<span class="hljs-keyword">if</span>&gt;<br>                &lt;/#list&gt;<br>                &lt;/ul&gt;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="五、2021-9-28"><a href="#五、2021-9-28" class="headerlink" title="五、2021-9-28"></a>五、2021-9-28</h2><p>问题：修改二级页面的展示文字</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210928124458.png" alt="image-20210928124457929"></p><p>解决：在站群中进行编辑</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210928124609.png" alt="image-20210928124608811"></p><p>六、更改二级菜单样式</p><ol><li><p>问题：二级菜单默认显示白色不好看</p></li><li><p>解决：css控制二级菜单的展示</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-class">.nav</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropdown-menu</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#a3080c</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>,<br><span class="hljs-selector-class">.dropdown-menu</span> &gt; <span class="hljs-selector-tag">li</span> &gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ba0003</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210930134203.png" alt="image-20210930134202835"></p></li></ol><p>七、分页功能调整</p>]]></content>
    
    
    <categories>
      
      <category>实战项目</category>
      
      <category>研究生项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-Vuex学习</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-09Vuex%E5%AD%A6%E4%B9%A0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-09Vuex%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是vuex</p><ul><li>vuex是vue.js的状态管理模式</li><li>将组件的共享状态抽取出来，以一个全局单例模式进行管理</li><li>每一个vuex应用的核心就是store</li></ul></li><li><p>vuex与单纯的全局变量的不同点</p><ul><li>vuex的状态管理是响应式的</li><li>不能直接改变store中的状态值，必须通过显示提交到mutation的方式</li></ul></li><li><p>state:单一状态树</p><ul><li>从store实例中读取状态最简单的方法就是在计算属性中返回这个状态</li><li>通过根组件注册store，该store会注册到所有的子组件中</li><li>mapState辅助函数</li></ul></li><li><p>getter</p><ul><li>getter可以理解换成store的计算属性，</li><li>getter的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生改变的才会重新计算</li><li>getter接受state作为它的第一个参数</li><li>getter通过属性访问store.getter.dosomething</li><li>getter通过属性访问时，是作为Vue的响应式系统的一部分缓存其中的</li><li>getter也可以接受其他的getter作为第二个参数</li><li>getter通过方法访问</li><li>getter通过方法访问时，每次都回去调用，不会缓存结果</li><li>mapGetters辅助函数将store的getter映射到局部计算属性中</li></ul></li><li><p>mutation</p><ul><li>每一个mutation都有一个事件类型(方法名)和一个回调函数</li><li>回调函数接受state作为第一个参数</li><li>可以向store.commit()中传入额外的参数</li><li>mutation必须是同步函数</li></ul></li><li><p>action</p><ul><li>action提交到mutation</li><li>action中可以包含任何异步操作</li><li>action通过store.dispatch()触发</li><li>store.dispatch可以处理action内部函数返回的promise，并且store.dispatch返回的任何是一个Promise</li><li>store.dispatch可以触发多个action函数，触发的函数都结束以后，才可以执行返回的Promise操作</li></ul></li><li><p>modules</p><ul><li>将store的管理模块化</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-买股票</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E4%B9%B0%E8%82%A1%E7%A5%A8/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E4%B9%B0%E8%82%A1%E7%A5%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>一次买股票-暴力</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 暴力：后一天的值和前一天的值进行比较，求最大</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>prices </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit</span>(<span class="hljs-params">prices</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (prices.length === <span class="hljs-number">0</span> || prices.length === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; prices.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; prices.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (max &lt; prices[j] - prices[i]) &#123;<br>                max = prices[j] - prices[i];<br><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-keyword">let</span> prices = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">57</span>,<span class="hljs-number">30</span>,<span class="hljs-number">82</span>,<span class="hljs-number">90</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">13</span>];<br><span class="hljs-built_in">console</span>.log(maxProfit(prices));<br></code></pre></div></td></tr></table></figure></li><li><p>一次买股票-一次遍历</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一次遍历</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>prices </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit</span>(<span class="hljs-params">prices</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (prices.length === <span class="hljs-number">0</span> || prices.length === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-keyword">let</span> min = <span class="hljs-literal">Infinity</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; prices.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (min &gt; prices[i]) &#123;<br>            min = prices[i]; <span class="hljs-comment">// 找到某天前可获得的最小值</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (max &lt; prices[i] - min) &#123; <span class="hljs-comment">// 某天减去最小值获得最大的收益</span><br>            max = prices[i] - min;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-keyword">let</span> prices = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">57</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>];<br><span class="hljs-built_in">console</span>.log(maxProfit(prices));<br></code></pre></div></td></tr></table></figure></li><li><p>多次买股票 -贪心</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit</span>(<span class="hljs-params">prices</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (prices.length === <span class="hljs-number">0</span> || prices.length === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; prices.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (prices[i] &gt; prices[i - <span class="hljs-number">1</span>]) &#123; <span class="hljs-comment">// 只要后一天比前一天多，就是有收益的，计算累计收益</span><br>            max += prices[i] - prices[i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-keyword">let</span> prices = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">57</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>];<br><span class="hljs-built_in">console</span>.log(maxProfit(prices));<br></code></pre></div></td></tr></table></figure></li><li><p>多次买股票-动态规划</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态规划</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit1</span>(<span class="hljs-params">prices1</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> n = prices1.length; <span class="hljs-comment">//天数</span><br>    <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>).fill(<span class="hljs-number">0</span>)); <span class="hljs-comment">//定义一个二维数组</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// dp[i][0] 表示第i天手上没有股票的最大利润状态</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];<span class="hljs-comment">// dp[i][1]表示第i天手上有股票的最大利润转态</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 第i天手上没有股票的转态 = (前一天手上没有股票dp[i - 1][0], 前一天手手上有股票，第i天卖掉 dp[i - 1][1] + prices[i])</span><br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">Math</span>.max(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + prices1[i]);<br>        <span class="hljs-comment">// 第i天手上有股票状态 = (前一天手上有股票 dp[i - 1][1], 前一天手上没有股票，第i天买入dp[i - 1][0] - prices[i])</span><br>        dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">Math</span>.max(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices1[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]; <span class="hljs-comment">//手上没有股票的收益一定不低于手上有股票的收益，所以返回dp[n-1][0]</span><br>&#125;<br><span class="hljs-keyword">let</span> prices1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">57</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>];<br><span class="hljs-built_in">console</span>.log(maxProfit1(prices));<br></code></pre></div></td></tr></table></figure></li><li><p>多次买股票有手续费-动态规划</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态规划</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>prices </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>fee </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit</span>(<span class="hljs-params">prices, fee</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> n = prices.length;<br>    <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>).fill(<span class="hljs-number">2</span>));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//手上没有股票</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 手上有股票</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">Math</span>.max(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + prices[i] - fee);<span class="hljs-comment">//手续费在完成一次交易的时候计算，在卖出时计算</span><br>        dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">Math</span>.max(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-keyword">let</span> prices = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">57</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>];<br><span class="hljs-keyword">let</span> fee = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(maxProfit(prices, fee));<br></code></pre></div></td></tr></table></figure></li><li><p>多次买股票有手续费-贪心算法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 贪心算法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;&#125;</span> </span>prices1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>fee1 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxProfit1</span>(<span class="hljs-params">prices1, fee1</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> n = prices1.length;<br>    <span class="hljs-keyword">let</span> buy = prices1[<span class="hljs-number">0</span>] + fee1; <span class="hljs-comment">// 某次最低买入价格</span><br>    <span class="hljs-keyword">let</span> profit = <span class="hljs-number">0</span>; <span class="hljs-comment">// 收益</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 对于第i天的股票价格prices[i]来说，你买还是卖？</span><br><span class="hljs-comment">         * 如果买：只有当天价格prices[i] &lt; 某次最低买入的价格 buy 你才会买</span><br><span class="hljs-comment">         * 如果卖：只有当天价格prices[i] &gt; 某次最低买入的价格 buy 你才会卖，卖了以后获得收益</span><br><span class="hljs-comment">         * 但是你卖的时候，不一定是最大利益的那一次，所以你还要反悔，在买当前的股票 buy = prices[i]</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (prices1[i] + fee1 &lt; buy) &#123;<br>            buy = prices1[i] + fee1;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (prices1[i] &gt; buy) &#123; <span class="hljs-comment">//i天的价格&gt;买入的价格 卖出会获得收益</span><br>            profit += prices1[i] - buy;<br>            buy = prices1[i]; <span class="hljs-comment">//当我们卖出一支股票时，我们就立即获得了以相同价格并且免除手续费买入一支股票的权利。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> profit;<br>&#125;<br><span class="hljs-keyword">let</span> prices1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">57</span>, <span class="hljs-number">30</span>, <span class="hljs-number">82</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>];<br><span class="hljs-keyword">let</span> fee1 = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(maxProfit1(prices1, fee1));<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>买股票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-http网络</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-08http%E7%BD%91%E7%BB%9C/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-08http%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<ol><li><p>7层模型</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829210727.jpeg" alt="一文看懂网络七层协议/OSI七层模型"></p></li></ol><ul><li><strong>物理层</strong></li></ul><p>解决两个硬件之间怎么通信的问题，常见的物理媒介有光纤、电缆、中继器等。它主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。</p><p>它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输，到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。</p><ul><li><strong>数据链路层：</strong></li></ul><p>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。该层的主要功能就是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p>它的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层的数据叫做帧。</p><ul><li><strong>网络层：</strong></li></ul><p>计算机网络中如果有多台计算机，怎么找到要发的那台？如果中间有多个节点，怎么选择路径？这就是路由要做的事。</p><p>该层的主要任务就是：通过路由选择算法，为报文（该层的数据单位，由上一层数据打包而来）通过通信子网选择最适当的路径。这一层定义的是IP地址，通过IP地址寻址，所以产生了IP协议。</p><ul><li><strong>传输层：</strong></li></ul><p>当发送大量数据时，很可能会出现丢包的情况，另一台电脑要告诉是否完整接收到全部的包。如果缺了，就告诉丢了哪些包，然后再发一次，直至全部接收为止。</p><p>简单来说，传输层的主要功能就是：监控数据传输服务的质量，保证报文的正确传输。</p><ul><li><strong>会话层：</strong></li></ul><p>虽然已经可以实现给正确的计算机，发送正确的封装过后的信息了。但我们总不可能每次都要调用传输层协议去打包，然后再调用IP协议去找路由，所以我们要建立一个自动收发包，自动寻址的功能。于是会话层出现了：它的作用就是建立和管理应用程序之间的通信。</p><ul><li><strong>表示层：</strong></li></ul><p>表示层负责数据格式的转换，将应用处理的信息转换为适合网络传输的格式，或者将来自下一层的数据转换为上层能处理的格式。</p><ul><li><strong>应用层：</strong></li></ul><p>应用层是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。前端同学对应用层肯定是最熟悉的。</p><ol start="2"><li>各模型对比</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829210750.png" alt="img"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/296670054">一文看懂网络七层协议/OSI七层模型</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-组合结果</title>
    <link href="/uncategorizedmjs-%E7%BB%84%E5%90%88%E7%BB%93%E6%9E%9C/"/>
    <url>/uncategorizedmjs-%E7%BB%84%E5%90%88%E7%BB%93%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<ol><li><p>封装一个console</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logInfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log.apply(<span class="hljs-built_in">console</span>, <span class="hljs-built_in">arguments</span>);<br>&#125;<br>logInfo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 1 2 3</span><br></code></pre></div></td></tr></table></figure><ul><li>argments 是一个类数组对象</li><li>argments 不是数组，除了length和索引元素，没有数组的任何属性</li><li>apply会将数组(arguments)中的每个元素作为参数传递给函数(console.log)</li></ul></li><li><p>promise实现异步操作</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.resolve()<br>    .then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 第一步要执行的任务</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">const</span> data1 = ... <span class="hljs-comment">//往下传递的数据</span><br>    <span class="hljs-built_in">Promise</span>.resolve(data1)<br>&#125;)<br>    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">// 上一步传过来的数据</span><br>        <span class="hljs-comment">//第二步要执行的任务</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">const</span> data2 = ... <span class="hljs-comment">// 要往下传递的数据</span><br>    <span class="hljs-built_in">Promise</span>.resolve(data2); <br><br>&#125;)<br>.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">// 上一步传过来的数据</span><br>        <span class="hljs-comment">// 最后异步要执行的任务</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>组合结果</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-comment">//  * 初始值：[[&quot;红色&quot;, &quot;绿色&quot;], [&quot;大号&quot;, &quot;小号&quot;]]</span><br><span class="hljs-comment">//  * 返回值：[[&quot;红色&quot;, &quot;大号&quot;], [&quot;红色&quot;, &quot;小号&quot;], [&quot;绿色&quot;, &quot;大号&quot;], [&quot;绿色&quot;, &quot;小号&quot;]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">group</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        result = resGroup(result, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resGroup</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr2.length; j++) &#123;<br>            result.push([arr1[i], arr2[j]])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> arr = [[<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;绿色&quot;</span>], [<span class="hljs-string">&quot;大号&quot;</span>, <span class="hljs-string">&quot;小号&quot;</span>]];<br><span class="hljs-built_in">console</span>.log(group(arr)); <span class="hljs-comment">// [ [ &#x27;红色&#x27;, &#x27;大号&#x27; ], [ &#x27;红色&#x27;, &#x27;小号&#x27; ], [ &#x27;绿色&#x27;, &#x27;大号&#x27; ], [ &#x27;绿色&#x27;, &#x27;小号&#x27; ] ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>组合结果优化,上面的输出格式适合2*2的数组，如果是m*n的组合，输出不正确</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-comment">//  * 初始值：[[&quot;红色&quot;, &quot;绿色&quot;], [&quot;大号&quot;, &quot;小号&quot;]]</span><br><span class="hljs-comment">//  * 返回值：[[&quot;红色&quot;, &quot;大号&quot;], [&quot;红色&quot;, &quot;小号&quot;], [&quot;绿色&quot;, &quot;大号&quot;], [&quot;绿色&quot;, &quot;小号&quot;]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">group</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        result = resGroup(result, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resGroup</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr2.length; j++) &#123;<br>            <span class="hljs-keyword">var</span> arr = (arr1[i] + <span class="hljs-string">&quot;,&quot;</span> + arr2[j]).split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            result.push(arr)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> arr = [[<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-string">&quot;绿色&quot;</span>], [<span class="hljs-string">&quot;大号&quot;</span>, <span class="hljs-string">&quot;小号&quot;</span>], [<span class="hljs-string">&quot;你&quot;</span>, <span class="hljs-string">&quot;我&quot;</span>],[<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>]];<br><span class="hljs-built_in">console</span>.log(group(arr)); <br>[<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;红色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;大号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;你&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span> ],<br>  [ <span class="hljs-string">&#x27;绿色&#x27;</span>, <span class="hljs-string">&#x27;小号&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span> ]<br>]<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>组合结果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-vue双向绑定原理</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-07vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/vuevue-07vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ol><li><p>vue实现数据双向绑定是通过数据劫持+发布/订阅模式实现的</p></li><li><p>vue通过Object.defineProperty()来实现数据劫持</p></li><li><p>实现数据劫持的demo</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">obj</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.obj)</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>控制台看到：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828225457.png" alt="image-20210828225457164"></p><p>分析：对get和set方法进行重写，可以得到我们想得到的值，也就是可以实现数据劫持</p></li><li><p>get和set方法重写demo</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Book = &#123;&#125;;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-built_in">Object</span>.defineProperty(Book, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>    <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>        name = value <span class="hljs-comment">//参数值赋值给对象的属性名</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;你的书名是&quot;</span> + value);<br>    &#125;,<br>    <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;《&quot;</span> + name + <span class="hljs-string">&quot;》&quot;</span><br>    &#125;<br>&#125;)<br>Book.name = <span class="hljs-string">&quot;vue双向绑定原理&quot;</span>;<br><span class="hljs-built_in">console</span>.log(Book.name);<br><span class="hljs-built_in">console</span>.log(Book);<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828225941.png" alt="image-20210828225940903"></p></li><li><p>对Object.defineProperty的解释</p><div class="note note-secondary">            <ul><li>Object.defineProperty(参数1，参数2，参数3) 返回值为该对象obj</li><li>参数1为该对象obj</li><li>参数2是要定义或者修改对象的属性名</li><li>参数3为属性描述符，属性描述符是一个对象，主要有2种形式，数据描述符和存取描述符，这2种只能选一种用，不可以混合使用</li><li>get和set属于存取描述符对象的属性</li><li>Object.defineProperty方法会在一个对象上定义一个新属性或者修改对象的现有属性，并返回该对象</li></ul>          </div></li><li><p>mvvm实现数据双绑定，views变化改data，data变化改变views</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828231141.jpeg" alt="img"></p></li><li><p>views变化改变数据可以通过事件监听实现，比如input输入数据，监听’input’就可以了</p></li><li><p>data变化改变视图可以通过Object.definePropery实现，通过这个方法设置一个set函数，数据变化时会触发这个函数，将更新的方法放到里面就可以了</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828232245.png" alt="image-20210828232244434"></p></li><li><p>实现过程</p><ul><li>监听器Observer<ul><li>用来监听所有属性</li><li>属性变化，告诉订阅者是否需要更新</li></ul></li><li>消息订阅器Dep<ul><li>收集这些订阅者</li><li>在监听器Observer和订阅者Watcher之间进行统一管理</li></ul></li></ul></li></ol><ul><li>订阅者Watcher<ul><li>收到属性的变化通知并且执行相关的函数，从而更新视图</li></ul></li><li>指令解析器Compile<ul><li>对每个节点进行扫描和解析</li><li>将相关的指令对应初始化成一个订阅者Watcher</li><li>替换模板数据或者绑定相应的函数</li></ul><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829105716.png" alt="img"></li></ul><ol start="10"><li><p>实现一个监听器Observer</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, val</span>) </span>&#123;<br>    observe(val); <span class="hljs-comment">// 递归遍历所有子属性</span><br>    <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123; <span class="hljs-comment">// 参数：&#123;name1:&#x27;&#x27;&#125;,&#x27;name1&#x27;</span><br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;对象属性&quot;</span> + key + <span class="hljs-string">&quot;的原值:&quot;</span> + val);<br>            val = newVal;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;对象属性&quot;</span> + key + <span class="hljs-string">&quot;的新值:&quot;</span> + newVal);<br>        &#125;,<br>        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> val;<br>        &#125;<br>    &#125;)<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">val</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!val || <span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123; <span class="hljs-comment">// 值不存在或者不是对象类型 返回</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// console.log(Object.keys(val)); // [&#x27;book&#x27;,&#x27;book2&#x27;]</span><br>    <span class="hljs-built_in">Object</span>.keys(val).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123; <span class="hljs-comment">// Object.keys(val)返回对象属性名组成的数组</span><br>        <span class="hljs-comment">// 参数 library,book1,&#123;name1:&#x27;&#x27;&#125; </span><br>        <span class="hljs-comment">// 参数 &#123;name1:&#x27;&#x27;&#125;,name1,&#x27;&#x27;</span><br>        defineReactive(val, key, val[key]);<br><br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> library = &#123;<br>    <span class="hljs-attr">book1</span>: &#123;<br>        <span class="hljs-attr">name1</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">book2</span>: &#123;<br>        <span class="hljs-attr">name2</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">book3</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>observe(library);<br>library.book1.name1 = <span class="hljs-string">&quot;属性1的书籍名字&quot;</span>;<br>library.book2.name2 = <span class="hljs-string">&quot;属性2的书籍名字&quot;</span>;<br>library.book3 = <span class="hljs-string">&quot;属性3的书籍名字&quot;</span>;<br><span class="hljs-comment">// 对象属性name1的原值:</span><br><span class="hljs-comment">// 对象属性name1的新值:属性1的书籍名字</span><br><span class="hljs-comment">// 对象属性name2的原值:</span><br><span class="hljs-comment">// 对象属性name2的新值:属性2的书籍名字</span><br><span class="hljs-comment">// 对象属性book3的原值:</span><br><span class="hljs-comment">// 对象属性book3的新值:属性3的书籍名字</span><br></code></pre></div></td></tr></table></figure></li><li><p>实现一个消息订阅器Dep</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据劫持</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>key </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, val</span>) </span>&#123;<br>    observe(val); <span class="hljs-comment">// 递归遍历所有子属性</span><br>    Dep dep = <span class="hljs-keyword">new</span> Dep(); <span class="hljs-comment">// 初始化一个订阅器</span><br>    <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123; <span class="hljs-comment">// 参数：&#123;name1:&#x27;&#x27;&#125;,&#x27;name1&#x27;</span><br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (val === newVal) &#123; <span class="hljs-comment">//值不变什么都不做</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            val = newVal;<br>            dep.notify(); <span class="hljs-comment">//值变化，通知所以订阅者</span><br><br>        &#125;,<br>        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (是否需要添加订阅者) &#123;<br>                dep.addSub(watcher); <span class="hljs-comment">//添加订阅者</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> val;<br>        &#125;<br>    &#125;)<br><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历所以属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">val</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!val || <span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123; <span class="hljs-comment">// 值不存在或者不是对象类型 返回</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// console.log(Object.keys(val)); // [&#x27;book&#x27;,&#x27;book2&#x27;]</span><br>    <span class="hljs-built_in">Object</span>.keys(val).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123; <span class="hljs-comment">// Object.keys(val)返回对象属性名组成的数组</span><br>        <span class="hljs-comment">// 参数 library,book1,&#123;name1:&#x27;&#x27;&#125; </span><br>        <span class="hljs-comment">// 参数 &#123;name1:&#x27;&#x27;&#125;,name1,&#x27;&#x27;</span><br>        defineReactive(val, key, val[key]);<br><br>    &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订阅器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dep</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.subs = []; <span class="hljs-comment">// 订阅器是一个容器，用list容纳订阅者</span><br>&#125;<br>Dep.prototype = &#123;<br>    <span class="hljs-attr">addSub</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.push(sub);<br>    &#125;,<br>    <span class="hljs-attr">notify</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>&#123;<br>            sub.update();<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>实现一个订阅者Watcher</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Watcher</span>(<span class="hljs-params">vm, exp, cb</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.vm = vm;<br>    <span class="hljs-built_in">this</span>.exp = exp;<br>    <span class="hljs-built_in">this</span>.cb = cb;<br>    <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.get(); <span class="hljs-comment">//将自己添加到订阅器</span><br>&#125;<br>Watcher.prototype = &#123;<br>    <span class="hljs-attr">update</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.run();<br>    &#125;,<br>    <span class="hljs-attr">run</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">this</span>.vm.data[<span class="hljs-built_in">this</span>.exp];<br>        <span class="hljs-keyword">var</span> oldVal = <span class="hljs-built_in">this</span>.value;<br>        <span class="hljs-keyword">if</span> (value !== oldVal) &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.cb.call(<span class="hljs-built_in">this</span>.vm, value, oldVal);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        Dep.target = <span class="hljs-built_in">this</span>; <span class="hljs-comment">//缓存自己</span><br>        <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">this</span>.vm.data[<span class="hljs-built_in">this</span>.exp];<span class="hljs-comment">// 强制执行监听器里的get函数</span><br>        Dep.target = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 释放自己</span><br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>监听器调整</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Observer</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.data = data;<br>    <span class="hljs-built_in">this</span>.walk(data);<br><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听器原型</span><br><span class="hljs-comment"> */</span><br>Observer.prototype = &#123;<br>    <span class="hljs-attr">walk</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>            self.defineReactive(data, key, data[key]);<br>        &#125;)<br>    &#125;,<br>    <span class="hljs-attr">defineReactive</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, key, val</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> dep = <span class="hljs-keyword">new</span> Dep(); <span class="hljs-comment">// 初始化一个订阅器</span><br>        <span class="hljs-keyword">var</span> childObj = observe(val);<br>        <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123; <span class="hljs-comment">// 参数：&#123;name1:&#x27;&#x27;&#125;,&#x27;name1&#x27;</span><br>            <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (val === newVal) &#123; <span class="hljs-comment">//值不变什么都不做</span><br>                    <span class="hljs-keyword">return</span><br>                &#125;<br>                val = newVal;<br>                dep.notify(); <span class="hljs-comment">//值变化，通知所以订阅者</span><br><br>            &#125;,<br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (Dep.target) &#123; <span class="hljs-comment">//添加一个订阅者</span><br>                    dep.addSub(Dep.target);<br>                &#125;<br>                <span class="hljs-keyword">return</span> val;<br>            &#125;<br>        &#125;)<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遍历所以属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">val, vm</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!val || <span class="hljs-keyword">typeof</span> val !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123; <span class="hljs-comment">// 值不存在或者不是对象类型 返回</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Observer(val);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订阅器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dep</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.subs = []; <span class="hljs-comment">// 订阅器是一个容器，用list容纳订阅者</span><br>&#125;<br>Dep.prototype = &#123;<br>    <span class="hljs-attr">addSub</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.push(sub);<br>    &#125;,<br>    <span class="hljs-attr">notify</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>&#123;<br>            sub.update();<br>        &#125;)<br>    &#125;<br>&#125;<br>Dep.target = <span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>关联文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span>(<span class="hljs-params">data, el, exp</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.data = data;<br>    observe(data);<br>    el.innerHTML = <span class="hljs-built_in">this</span>.data[exp]; <span class="hljs-comment">//初始化模板的值</span><br>    <span class="hljs-keyword">new</span> Watcher(<span class="hljs-built_in">this</span>, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>        el.innerHTML = value;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>html页面</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/js-08watcher.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/js-08index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/js-08observer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#name&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> selfVue = <span class="hljs-keyword">new</span> SelfVue(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hello world&quot;</span> &#125;, ele, <span class="hljs-string">&#x27;name&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;name值改变&quot;</span>);</span><br><span class="javascript">        selfVue.data.name = <span class="hljs-string">&#x27;canfoo&#x27;</span>;</span><br><span class="javascript">    &#125;, <span class="hljs-number">2000</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>展示：页面本来的值是<code>hello world</code>,2秒后变成<code>canfoo</code></p><p> <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829152346.gif" alt="92"></p></li><li><p>改变<code> selfVue.data.name = &#39;canfoo&#39;</code>-&gt;<code> selfVue.name = &#39;canfoo&#39;;</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span>(<span class="hljs-params">data, el, exp</span>) </span>&#123; <span class="hljs-comment">//参数：&#123; name: &quot;hello world&quot; &#125;, ele, &#x27;name&#x27;</span><br>    <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">this</span>.data = data;<br>    <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123; <span class="hljs-comment">// 做代理属性</span><br>        self.proxyKeys(key);<br>    &#125;)<br>    observe(data);<br>    el.innerHTML = <span class="hljs-built_in">this</span>.data[exp]; <span class="hljs-comment">//初始化模板的值</span><br>    <span class="hljs-keyword">new</span> Watcher(<span class="hljs-built_in">this</span>, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>        el.innerHTML = value;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br>SelfVue.prototype = &#123;<br>    <span class="hljs-attr">proxyKeys</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">this</span>, key, &#123;<br>            <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxyGetter</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> self.data[key];<br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxySetter</span>(<span class="hljs-params">newVal</span>) </span>&#123;<br>                self.data[key] = newVal;<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>实现解析器Compile</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compile</span>(<span class="hljs-params">el, vm</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.vm = vm;<br>    <span class="hljs-built_in">this</span>.el = <span class="hljs-built_in">document</span>.querySelector(el);<br>    <span class="hljs-built_in">this</span>.fragment = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.init();<br>&#125;<br><br>Compile.prototype = &#123;<br>    <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.el) &#123;<br>            <span class="hljs-built_in">this</span>.fragment = <span class="hljs-built_in">this</span>.nodeToFragment(<span class="hljs-built_in">this</span>.el);<br>            <span class="hljs-built_in">this</span>.compileElement(<span class="hljs-built_in">this</span>.fragment);<br>            <span class="hljs-built_in">this</span>.el.appendChild(<span class="hljs-built_in">this</span>.fragment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Dom元素不存在&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">nodeToFragment</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br>        <span class="hljs-keyword">var</span> child = el.firstChild;<br>        <span class="hljs-keyword">while</span> (child) &#123;<br>            <span class="hljs-comment">// 将Dom元素移入fragment中</span><br>            fragment.appendChild(child);<br>            child = el.firstChild<br>        &#125;<br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;,<br>    <span class="hljs-attr">compileElement</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> childNodes = el.childNodes;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        [].slice.call(childNodes).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\&#123;\&#123;\s*(.*?)\s*\&#125;\&#125;/</span>;<br>            <span class="hljs-keyword">var</span> text = node.textContent;<br>            <span class="hljs-keyword">if</span> (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;  <span class="hljs-comment">// 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令</span><br>                self.compileText(node, reg.exec(text)[<span class="hljs-number">1</span>]);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;<br>                self.compileElement(node);  <span class="hljs-comment">// 继续递归遍历子节点</span><br>            &#125;<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">compileText</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, exp</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">var</span> initText = <span class="hljs-built_in">this</span>.vm[exp];<br>        <span class="hljs-built_in">this</span>.updateText(node, initText);  <span class="hljs-comment">// 将初始化的数据初始化到视图中</span><br>        <span class="hljs-keyword">new</span> Watcher(<span class="hljs-built_in">this</span>.vm, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123; <span class="hljs-comment">// 生成订阅器并绑定更新函数</span><br>            self.updateText(node, value);<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">updateText</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value</span>) </span>&#123;<br>        node.textContent = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;undefined&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : value;<br>    &#125;,<br>    <span class="hljs-attr">isTextNode</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>修改index.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span> (<span class="hljs-params">options</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">this</span>.vm = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">this</span>.data = options.data;<br><br>    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;<br>        self.proxyKeys(key);<br>    &#125;);<br><br>    observe(<span class="hljs-built_in">this</span>.data);<br>    <span class="hljs-keyword">new</span> Compile(options.el, <span class="hljs-built_in">this</span>.vm);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><br>SelfVue.prototype = &#123;<br>    <span class="hljs-attr">proxyKeys</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">this</span>, key, &#123;<br>            <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxyGetter</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> self.data[key];<br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxySetter</span>(<span class="hljs-params">newVal</span>) </span>&#123;<br>                self.data[key] = newVal;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../v1/js/js-08observer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../v1//js/js-08watcher.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/compile.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-keyword">var</span> selfVue = <span class="hljs-keyword">new</span> SelfVue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello world&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        selfVue.title = <span class="hljs-string">&#x27;你好&#x27;</span>;</span><br><span class="javascript">    &#125;, <span class="hljs-number">2000</span>);</span><br><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        selfVue.name = <span class="hljs-string">&#x27;canfoo&#x27;</span>;</span><br><span class="javascript">    &#125;, <span class="hljs-number">2500</span>);</span><br><span class="javascript"> </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果：界面一开始是title: ‘hello world’,name: ‘’，2秒后：title和name均发生改变</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829155848.gif" alt="93"></p></li><li><p>实现解析器解析其他的指令</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compile</span>(<span class="hljs-params">el, vm</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.vm = vm;<br>    <span class="hljs-built_in">this</span>.el = <span class="hljs-built_in">document</span>.querySelector(el);<br>    <span class="hljs-built_in">this</span>.fragment = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.init();<br>&#125;<br><br>Compile.prototype = &#123;<br>    <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.el) &#123;<br>            <span class="hljs-built_in">this</span>.fragment = <span class="hljs-built_in">this</span>.nodeToFragment(<span class="hljs-built_in">this</span>.el);<br>            <span class="hljs-built_in">this</span>.compileElement(<span class="hljs-built_in">this</span>.fragment);<br>            <span class="hljs-built_in">this</span>.el.appendChild(<span class="hljs-built_in">this</span>.fragment);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Dom元素不存在&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">nodeToFragment</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br>        <span class="hljs-keyword">var</span> child = el.firstChild;<br>        <span class="hljs-keyword">while</span> (child) &#123;<br>            <span class="hljs-comment">// 将Dom元素移入fragment中</span><br>            fragment.appendChild(child);<br>            child = el.firstChild<br>        &#125;<br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;,<br>    <span class="hljs-attr">compileElement</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> childNodes = el.childNodes;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        [].slice.call(childNodes).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;<br>            <span class="hljs-keyword">var</span> text = node.textContent;<br><br>            <span class="hljs-keyword">if</span> (self.isElementNode(node)) &#123;  <br>                self.compile(node);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;<br>                self.compileText(node, reg.exec(text)[<span class="hljs-number">1</span>]);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;<br>                self.compileElement(node);<br>            &#125;<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">compile</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> nodeAttrs = node.attributes;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">Array</span>.prototype.forEach.call(nodeAttrs, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">attr</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> attrName = attr.name;<br>            <span class="hljs-keyword">if</span> (self.isDirective(attrName)) &#123;<br>                <span class="hljs-keyword">var</span> exp = attr.value;<br>                <span class="hljs-keyword">var</span> dir = attrName.substring(<span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">if</span> (self.isEventDirective(dir)) &#123;  <span class="hljs-comment">// 事件指令</span><br>                    self.compileEvent(node, self.vm, exp, dir);<br>                &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// v-model 指令</span><br>                    self.compileModel(node, self.vm, exp, dir);<br>                &#125;<br>                node.removeAttribute(attrName);<br>            &#125;<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">compileText</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, exp</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">var</span> initText = <span class="hljs-built_in">this</span>.vm[exp];<br>        <span class="hljs-built_in">this</span>.updateText(node, initText);<br>        <span class="hljs-keyword">new</span> Watcher(<span class="hljs-built_in">this</span>.vm, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>            self.updateText(node, value);<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">compileEvent</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp, dir</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> eventType = dir.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">var</span> cb = vm.methods &amp;&amp; vm.methods[exp];<br><br>        <span class="hljs-keyword">if</span> (eventType &amp;&amp; cb) &#123;<br>            node.addEventListener(eventType, cb.bind(vm), <span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">compileModel</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp, dir</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">var</span> val = <span class="hljs-built_in">this</span>.vm[exp];<br>        <span class="hljs-built_in">this</span>.modelUpdater(node, val);<br>        <span class="hljs-keyword">new</span> Watcher(<span class="hljs-built_in">this</span>.vm, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>            self.modelUpdater(node, value);<br>        &#125;);<br><br>        node.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> newValue = e.target.value;<br>            <span class="hljs-keyword">if</span> (val === newValue) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            self.vm[exp] = newValue;<br>            val = newValue;<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">updateText</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value</span>) </span>&#123;<br>        node.textContent = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;undefined&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : value;<br>    &#125;,<br>    <span class="hljs-attr">modelUpdater</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, value, oldValue</span>) </span>&#123;<br>        node.value = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&#x27;undefined&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : value;<br>    &#125;,<br>    <span class="hljs-attr">isDirective</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">attr</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> attr.indexOf(<span class="hljs-string">&#x27;v-&#x27;</span>) == <span class="hljs-number">0</span>;<br>    &#125;,<br>    <span class="hljs-attr">isEventDirective</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> dir.indexOf(<span class="hljs-string">&#x27;on:&#x27;</span>) === <span class="hljs-number">0</span>;<br>    &#125;,<br>    <span class="hljs-attr">isElementNode</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">1</span>;<br>    &#125;,<br>    <span class="hljs-attr">isTextNode</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>index.js文件更改</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span> (<span class="hljs-params">options</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">this</span>.data = options.data;<br>    <span class="hljs-built_in">this</span>.methods = options.methods;<br><br>    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;<br>        self.proxyKeys(key);<br>    &#125;);<br><br>    observe(<span class="hljs-built_in">this</span>.data);<br>    <span class="hljs-keyword">new</span> Compile(options.el, <span class="hljs-built_in">this</span>);<br>    options.mounted.call(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 所有事情处理好后执行mounted函数</span><br>&#125;<br><br>SelfVue.prototype = &#123;<br>    <span class="hljs-attr">proxyKeys</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">this</span>, key, &#123;<br>            <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getter</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> self.data[key];<br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setter</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>                self.data[key] = newVal;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>self-vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../v1//js/js-08observer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/compile.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../v1/js/js-08watcher.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> SelfVue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;canfoo&#x27;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>展示：<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210829161412.gif" alt="94"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/chenhuichao/p/10818396.html">vue的双向绑定原理及实现</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-07css垂直居中</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="一、固定宽高"><a href="#一、固定宽高" class="headerlink" title="一、固定宽高"></a>一、固定宽高</h2><ol><li><p>水平居中margin+ 垂直居中：transform</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.diva</span> &#123;<br>   <br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aquamarine;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-comment">/* 水平居中*/</span><br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-comment">/* 垂直居中 */</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>水平居中：margin+垂直居中：margin-top负值</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.diva</span> &#123;<br>   <br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aquamarine;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-comment">/* 水平居中*/</span><br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-comment">/* 垂直居中 */</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>弹性布局</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-comment">/*垂直居中*/</span><br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-comment">/*水平居中*/</span><br>&#125;<br>   <br><span class="hljs-selector-class">.diva</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aquamarine;<br>   <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>水平和垂直都使用transform</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.diva</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aquamarine;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>   <br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、不知道宽高"><a href="#二、不知道宽高" class="headerlink" title="二、不知道宽高"></a>二、不知道宽高</h2><ol><li><p>弹性布局</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>   <br>&#125;<br><span class="hljs-selector-class">.index-dialog</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;index&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;index-dialog&quot;&gt;<span class="hljs-number">22222222</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903212936.png" alt="image-20210903212928423"></p></li><li><p>transform+absolute</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>    <span class="hljs-attribute">position</span>: relative;<br>   <br>&#125;<br><span class="hljs-selector-class">.index-dialog</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    box-align: center;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>&#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;index&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;index-dialog&quot;&gt;<span class="hljs-number">22222222</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903213129.png" alt="image-20210903213128601"><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903213153.png" alt="image-20210903213152163"></p></li><li><p>table实现</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>    <span class="hljs-attribute">display</span>: table;<br>   <br>&#125;<br>   <br><span class="hljs-selector-class">.index-dialog</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">display</span>: table-cell;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>   <br>&#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;index&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;index-dialog&quot;&gt;<span class="hljs-number">22222222</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903213247.png" alt="image-20210903213246565"></p></li><li><p>伪类实现</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: gray;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>   <br>&#125;<br>   <br><span class="hljs-selector-class">.index</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br>   <br><span class="hljs-selector-class">.index-dialog</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: rebeccapurple;<br>&#125;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;index&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;index-dialog&quot;&gt;<span class="hljs-number">222</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210903213324.png" alt="image-20210903213324051"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>垂直居中</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-css伪类和伪元素</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-07css%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-07css%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>伪类与伪元素的区别在于：有没有创建一个文档树之外的元素(或者说操作的对象是否存在于原来的dom结构中)</p></li><li><p>伪类是在已有的DOM元素下操作</p></li><li><p>伪元素是创建一些不在DOM树存在的元素</p></li><li><p>定义的伪类有：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828204317.png" alt="img"></p></li><li><p>定义的伪元素有：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828204329.png" alt="img"></p></li><li><p>css3对伪类和伪元素的定义更加清晰</p></li><li><p>css3中伪元素的使用必须使用<code>::</code></p></li><li><p>任何常规选择器可以在任何位置使用伪类</p></li><li><p>一个选择器只能使用一个伪元素，并且伪元素必须放到选择器之后</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ihardcoder/p/5294927.html">CSS3伪类和伪元素的特性和区别</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-js闭包</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E9%97%AD%E5%8C%85/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-js%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是闭包</p><ul><li>闭包：一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包</li><li>闭包可以使你在一个内层函数中访问到外层函数的作用域</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 词法作用域</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;yom&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayName</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//闭包</span><br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    displayName();<br>&#125;<br>init();<br></code></pre></div></td></tr></table></figure><p>解释：</p><ul><li>name是init()函数的局部变量</li><li>displayName()是init()函数的内部函数</li><li>displayName()函数可以使用父函数init()声明的变量name</li></ul></li><li><p>闭包</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 闭包</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeFun</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;tom&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> displayName;<br>&#125;<br><span class="hljs-keyword">var</span> myFunc = makeFun();<br>myFunc();<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 闭包</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeAdder</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">y</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> makeA = makeAdder(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">var</span> makeB = makeAdder(<span class="hljs-number">7</span>);<br><span class="hljs-built_in">console</span>.log(makeA(<span class="hljs-number">2</span>));<br><span class="hljs-built_in">console</span>.log(makeB(<span class="hljs-number">2</span>));<br></code></pre></div></td></tr></table></figure><p>解释：</p><ul><li>makeAdder函数接受一个参数x，返回一个函数</li><li>返回的函数接受一个参数y，返回x+y</li><li>makeAdder(5) 传入一个参数x:<code>x=5</code>，返回函数，makeA接收函数，并且makeA传入参数y:<code>y=2</code></li></ul></li><li><p>实用闭包，通过点击链接，实现改变body的字体大小</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;size-12&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;size-14&quot;</span>&gt;</span>14<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;size-16&quot;</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeSize</span>(<span class="hljs-params">size</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">document</span>.body.style.fontSize = size + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;size-12&#x27;</span>).onclick = makeSize(<span class="hljs-number">12</span>);</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;size-14&#x27;</span>).onclick = makeSize(<span class="hljs-number">14</span>);</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;size-16&#x27;</span>).onclick = makeSize(<span class="hljs-number">16</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828174708.gif" alt="91"></p></li><li><p>闭包模拟私有方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 闭包模拟私有方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> makeCounter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> privateCounter = <span class="hljs-number">0</span>; <span class="hljs-comment">//私有变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeBy</span>(<span class="hljs-params">val</span>) </span>&#123; <span class="hljs-comment">//私有变量</span><br>        privateCounter += val;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">increment</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            changeBy(<span class="hljs-number">1</span>);<br>        &#125;,<br>        <span class="hljs-attr">decrement</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            changeBy(-<span class="hljs-number">1</span>);<br>        &#125;,<br>        <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> privateCounter;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// console.log(makeCounter().value()); // 0</span><br><span class="hljs-keyword">var</span> count1 = makeCounter();<br><span class="hljs-keyword">var</span> count2 = makeCounter();<br><span class="hljs-built_in">console</span>.log(count1.value()); <span class="hljs-comment">//0</span><br>count1.increment();<br><span class="hljs-built_in">console</span>.log(count1.value()); <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(count2.value()); <span class="hljs-comment">// 0</span><br>count2.increment();<br>count2.increment();<br><span class="hljs-built_in">console</span>.log(count2.value()); <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure><p>解释：</p><p>匿名函数创建了2个私有属性：变量privateCounter和函数changeBy</p><p>这两项无法在外部环境中进行访问，所以通过匿名函数返回3个公共函数访问</p><p>这3个函数共享同一环境的闭包</p><p>2个计数器count1和count2的环境是相互独立的</p><p>在count1的闭包环境中对变量做的改变不会影响到另一个闭包环境中的变量</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-几种异步方法</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%87%A0%E7%A7%8D%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%87%A0%E7%A7%8D%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li><p>回调函数</p><ul><li><p>回调函数是一个函数做为一个参数传到另一个函数里了，在函数执行完成之后在执行。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        callback();<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;f2执行&quot;</span>);<br>&#125;<br>f1(f2);<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>发布订阅模式</p><ul><li>通过pub/sub模式，我们可以在信息中心清楚的看到有多少信号来源，放便集中管理，更加放便模块化管理，但是如果整个项目都使用pub/sub模式的话，流程就变得不太清晰，数据的得到和数据的处理分开，对于后期维护也是一个大问题。</li></ul></li><li><p>事件监听</p><ul><li><p>监听函数有：on、bind、listen、addEventListener、observe</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">f1.on(<span class="hljs-string">&#x27;done&#x27;</span>,f2);<br></code></pre></div></td></tr></table></figure><p>当f1发生done事件，就执行f2</p></li></ul></li><li><p>Promise</p><ul><li><p>promise是提出的一种规范</p></li><li><p>promise是一种模式，promise可以帮忙管理异步方式返回的代码</p></li><li><p>promise有2种状态，1.等待2.完成</p></li><li><p>promise会一直处理等待状态，直到它所包装的异步调用返回/超时/结束</p></li><li><p>promise的状态分成2类：1.解决(resolve) 2.拒绝(rejected)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">if</span> (result === <span class="hljs-number">50</span>) &#123;<br>            resolve(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            reject(result);<br>        &#125;<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;成功之后返回的参数是&quot;</span> + data);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败之后返回的参数是&quot;</span> + data);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>async/await异步处理</p><ul><li><p>async 返回一个promise对象</p></li><li><p>await 后面可以接受一个promise对象</p></li><li><p>异步成功</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">h</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">22</span>);<br>    <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 22 </span><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-built_in">console</span>.log(h());<br><span class="hljs-comment">// Promise &#123; &lt;pending&gt; &#125;</span><br>&#123;<span class="hljs-comment">/* 22 */</span>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>异步失败</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">22</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span>);  <span class="hljs-comment">// 不会执行 </span><br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>) <span class="hljs-comment">// 输出 222 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">333</span> <br>&#125;<br><span class="hljs-built_in">console</span>.log(c());<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210828165147.png" alt="image-20210828165139242"></p></li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_30776273/article/details/97360419">异步的几种常用方法</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>几种异步方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-小数计算</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<ol><li><p>0.1+0.2 = 0.3？</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827171636.png" alt="image-20210827171635559"></p></li></ol><p>2.原因分析</p><p>十进制转换成2进制的时候，会损失精度</p><p>0.1 转化成2进制数的时候是0.00011…..是一个最接近于0.1的数</p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-http和https对比</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-06http%E5%92%8Chttps%E5%AF%B9%E6%AF%94/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-06http%E5%92%8Chttps%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<ol><li><p>http的特点</p><ul><li>http是超文本传输协议，顾名思义就是除了传输文本还可以传输视频、图片…..</li><li>http是无状态传输</li><li>http默认的端口是80</li><li>http是明文传输，也就是说采取技术手段获得传输报文，就可以获取传输的所有内容(想想就可怕)</li><li>http是互联网上应用最广泛的一个网络传输协议，是客户端和服务端请求和应答的标准(TCP)</li></ul></li><li><p>https的特点</p><ul><li>解决http不安全的问题</li><li>https = http + SSL </li><li>https默认的端口是443</li><li>https协议构建的可进行加密传输，身份认证的网络协议，相对来说，比较安全</li><li>https需要申请证书，需要花钱</li></ul></li><li><p>https的传输</p><p>(1) 客户端发送请求到服务器端，请求https连接，(可以理解成客户端想请求开门送东西)</p><p>(2) 服务器端返回证书(证书中有公钥)(可以理解成服务器给了钥匙)</p><p>(3) 客户端产生随机(对称)密钥</p><p>(4) 使用公钥对对称密钥加密(可以理解成客户端拿到钥匙，自己再包装包装要发送的东西，别让别人看见了)</p><p>(5) 客户端发送加密后的对称密钥</p><p>(6) 服务器和客户端通过加密后的对称密钥进行通信</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/wqhwe/p/5407468.html">HTTP与HTTPS的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-DNS学习</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-06DNS%E5%AD%A6%E4%B9%A0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-06DNS%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>DNS是什么</p><div class="note note-secondary">            <ul><li>通常人们更容易记住的是百度的地址<a href="https://www.baidu.com/">https://www.baidu.com/</a></li><li>计算机能够认识的是百度的ip地址，202.108.22.5</li><li>那么在人和计算机之间都需要兼顾，所以就有了DNS</li><li>DNS的角色像一个翻译，你想去百度，你只会说网络语，所以在地址栏输入百度地址后，会去DNS查找对应的ip，如果找到，它就翻译成ip地址给了计算机，也就算访问的第一步成功了。</li><li>如果没有找到，就向更高的一级发送。</li></ul>          </div><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827145850.gif" alt="9"></p></li><li><p>可以查看自己本机的hosts文件</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827150337.png" alt="image-20210827150336604"></p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot-druid-05ruid连接数据库</title>
    <link href="/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Springjava-druid-04druid%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Springjava-druid-04druid%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p>创建sping项目点击<code>File</code>-&gt;<code>Settings</code>-&gt;<code>Spring Initializr</code></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827110347.png" alt="image-20210827110339762"></p></li><li><p>创建包名，项目中组的名字</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827110454.png" alt="image-20210827110453655"></p></li><li><p>点击下一步</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827110524.png" alt="image-20210827110523545"></p></li><li><p>选择项目放在本地的位置，项目创建完成。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827110600.png" alt="image-20210827110600065"></p></li><li><p>项目的目录结构</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827110700.png" alt="image-20210827110659302"></p><ol start="6"><li><p>设置maven环境目参见文章<a href="https://kjjblog.netlify.app/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/">java-jdbc-01jdbc连接数据库</a></p></li><li><p>配置pom.xml</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">2.5</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>    &lt;/parent&gt;<br>    &lt;groupId&gt;com.druid&lt;/groupId&gt;<br>    &lt;artifactId&gt;demo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;demo&lt;/name&gt;<br>    &lt;description&gt;Demo project <span class="hljs-keyword">for</span> Spring Boot&lt;/description&gt;<br>    &lt;properties&gt;<br>        &lt;java.version&gt;<span class="hljs-number">1.8</span>&lt;/java.version&gt;<br>    &lt;/properties&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--这里是lombok工具包，用来简写bean类的--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.16</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>            &lt;scope&gt;provided&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--mysql连接--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.45</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--druid包--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.9</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--lang工具包--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.6</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br><br>&lt;/project&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>测试springBoot项目启动</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">demo</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;hello world, hello sringBoot&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>预期是希望能在浏览器看到”hello world, hello sringBoot”这句话，但是项目没有启动起来</p></li><li><p>因为我没有写配置文件(………)application.properties,(配置端口和数据库)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#访问端口<br>server.port=<span class="hljs-number">8080</span><br>#编码格式<br>server.tomcat.uri-encoding=utf-<span class="hljs-number">8</span><br>#一般数据库相关配置<br>#spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>#spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/emp-driud</span><br>#spring.datasource.username=root<br>#spring.datasource.password=<span class="hljs-number">123456</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动项目，在浏览器看到</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826114334.png" alt="image-20210826114333532"></p></li><li><p>至此，第一步springboot项目初步搭建完成</p></li><li><p>更改配置文件，使用druid，使用mybatis</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#访问端口<br>server.port=<span class="hljs-number">8080</span><br>#编码格式<br>#server.tomcat.uri-encoding=utf-<span class="hljs-number">8</span><br>#一般数据库相关配置<br>#spring.datasource.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>#spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/emp-driud</span><br>#spring.datasource.username=root<br>#spring.datasource.password=<span class="hljs-number">123456</span><br>#druid数据库配置<br>spring.datasource.druid.driver-<span class="hljs-class"><span class="hljs-keyword">class</span>-<span class="hljs-title">name</span></span>=com.mysql.jdbc.Driver<br>spring.datasource.druid.url=jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/emp-driud?useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span><br>spring.datasource.druid.username=root<br>spring.datasource.druid.password=<span class="hljs-number">123456</span><br>spring.datasource.druid.max-wait=<span class="hljs-number">60000</span><br>spring.datasource.druid.max-active=<span class="hljs-number">10</span><br>spring.datasource.druid.min-idle=<span class="hljs-number">3</span><br>spring.datasource.druid.initial-size=<span class="hljs-number">3</span><br>#mybatis配置<br>mybatis.check-config-location=<span class="hljs-keyword">true</span><br>mybatis.mapper-locations=classpath:mybatis/mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment">mybatis.config-location=classpath:mybatis/mybatis-config.xml</span><br><span class="hljs-comment">mybatis.type-aliases-package=com.druid.demo.entity</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置mybatis-config.xml</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE configuration PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;typeAliases&gt;<br>        &lt;typeAlias type=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> alias=<span class="hljs-string">&quot;Integer&quot;</span> /&gt;<br>        &lt;typeAlias type=<span class="hljs-string">&quot;java.lang.Long&quot;</span> alias=<span class="hljs-string">&quot;Long&quot;</span>  /&gt;<br>        &lt;typeAlias alias=<span class="hljs-string">&quot;HashMap&quot;</span> type=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> /&gt;<br>        &lt;typeAlias alias=<span class="hljs-string">&quot;LinkedHashMap&quot;</span> type=<span class="hljs-string">&quot;java.util.LinkedHashMap&quot;</span> /&gt;<br>        &lt;typeAlias alias=<span class="hljs-string">&quot;ArrayList&quot;</span> type=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> /&gt;<br>        &lt;typeAlias alias=<span class="hljs-string">&quot;LinkedList&quot;</span> type=<span class="hljs-string">&quot;java.util.LinkedList&quot;</span> /&gt;<br>    &lt;/typeAliases&gt;<br>&lt;/configuration&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>编写实体User</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo.entity;<br><br><br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写Mapper层UserMapper</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo.mapper;<br><br><span class="hljs-keyword">import</span> com.druid.demo.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUserEmailById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id,<span class="hljs-meta">@Param(&quot;email&quot;)</span> String email)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>编写UserMapper.xml</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.druid.demo.mapper.UserMapper&quot;</span>&gt;<br>    &lt;resultMap id=<span class="hljs-string">&quot;BaseMap&quot;</span> type=<span class="hljs-string">&quot;com.druid.demo.entity.User&quot;</span>&gt;<br>        &lt;id column=<span class="hljs-string">&quot;id&quot;</span> property=<span class="hljs-string">&quot;id&quot;</span> jdbcType=<span class="hljs-string">&quot;BIGINT&quot;</span>/&gt;<br>        &lt;result column=<span class="hljs-string">&quot;username&quot;</span> property=<span class="hljs-string">&quot;username&quot;</span> jdbcType=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;<br>        &lt;result column=<span class="hljs-string">&quot;password&quot;</span> property=<span class="hljs-string">&quot;password&quot;</span> jdbcType=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;<br>    &lt;/resultMap&gt;<br>    &lt;sql id=<span class="hljs-string">&quot;BaseColumn&quot;</span>&gt;<br>        id,username,password,email<br>    &lt;/sql&gt;<br>    &lt;insert id=<span class="hljs-string">&quot;insertUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.druid.demo.entity.User&quot;</span>&gt;<br>        <span class="hljs-function">INSERT INTO <span class="hljs-title">user</span></span><br><span class="hljs-function">        <span class="hljs-params">(username,password,email)</span></span><br><span class="hljs-function">        <span class="hljs-title">VALUE</span></span><br><span class="hljs-function">        <span class="hljs-params">(#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)</span></span><br><span class="hljs-function">    &lt;/insert&gt;</span><br><span class="hljs-function">    &lt;update id</span>=<span class="hljs-string">&quot;updateUserEmailById&quot;</span> parameterType=<span class="hljs-string">&quot;com.druid.demo.entity.User&quot;</span>&gt;<br>        UPDATE user<br>        SET<br>        email = #&#123;email&#125;<br>        WHERE id =#&#123;id&#125;<br>    &lt;/update&gt;<br>    &lt;delete id=<span class="hljs-string">&quot;deleteUserById&quot;</span> parameterType=<span class="hljs-string">&quot;Integer&quot;</span>&gt;<br>        DELETE FROM user<br>        WHERE id = #&#123;id&#125;<br>    &lt;/delete&gt;<br>    &lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> resultMap=<span class="hljs-string">&quot;BaseMap&quot;</span> parameterType=<span class="hljs-string">&quot;Integer&quot;</span>&gt;<br>        SELECT<br>        &lt;include refid=<span class="hljs-string">&quot;BaseColumn&quot;</span>/&gt;<br>        FROM user<br>        WHERE id = #&#123;id&#125;<br>    &lt;/select&gt;<br>    &lt;select id=<span class="hljs-string">&quot;getAllUser&quot;</span> resultMap=<span class="hljs-string">&quot;BaseMap&quot;</span>&gt;<br>        SELECT<br>        &lt;include refid=<span class="hljs-string">&quot;BaseColumn&quot;</span>/&gt;<br>        FROM user<br>    &lt;/select&gt;<br><br>&lt;/mapper&gt;<br><br></code></pre></div></td></tr></table></figure></li><li><p>解释</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827112344.png" alt="image-20210827112343820"></p></li><li><p>编写接口UserService</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo.service;<br><br><span class="hljs-keyword">import</span> com.druid.demo.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getAllUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUserEmailById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id,<span class="hljs-meta">@Param(&quot;email&quot;)</span> String email)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure></li><li><p>编写接口的实现类UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo.service.impl;<br><br><span class="hljs-keyword">import</span> com.druid.demo.entity.User;<br><span class="hljs-keyword">import</span> com.druid.demo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.druid.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>     <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getAllUsers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.getAllUser();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userMapper.getUserById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUserEmailById</span><span class="hljs-params">(Integer id,String email)</span> </span>&#123;<br>        userMapper.updateUserEmailById(id,email);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUserById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        userMapper.deleteUserById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = userMapper.insertUser(user);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>编写controller层UserController</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.druid.demo.controller;<br><br><br><span class="hljs-keyword">import</span> com.druid.demo.entity.User;<br><span class="hljs-keyword">import</span> com.druid.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/getAllUser&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; resultList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        resultList = userService.getAllUsers();<br>        <span class="hljs-keyword">return</span> resultList;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/getUserById/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> </span>&#123;<br>        List&lt;User&gt; resultList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        resultList = userService.getUserById(id);<br>        <span class="hljs-keyword">return</span> resultList;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/updateUserById/&#123;id&#125;/&#123;email&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id,<span class="hljs-meta">@PathVariable</span> String email)</span> </span>&#123;<br>        userService.updateUserEmailById(id,email);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/deleteUserById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> </span>&#123;<br>        userService.deleteUserById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/insertUser&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> result =  userService.insertUser(<span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;qqq&quot;</span>, <span class="hljs-string">&quot;qqq&quot;</span>, <span class="hljs-string">&quot;qq&quot;</span>));<br>        <span class="hljs-keyword">if</span>(result ==<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>增删改查编写完成，启动项目报错</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826145333.png" alt="image-20210826145333195"></p></li><li><p>最后终于找到原因</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827112910.png" alt="image-20210827112909332"></p></li><li><p>测试</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827124739.gif"></p></li><li><p>分析</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827125357.png" alt="image-20210827125356934"></p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端学习</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot-druid-05druid连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-mybatis-04mybatis连接数据库</title>
    <link href="/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-mybatis-04mybatis%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-mybatis-04mybatis%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p>创建maven项目参见文章<a href="https://kjjblog.netlify.app/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/">java-jdbc-01jdbc连接数据库</a></p></li><li><p>创建后的目录如图所示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826230232.png" alt="image-20210826230231770"></p></li><li><p>配置pom.xml文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--这里是lombok工具包，用来简写bean类的--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.16</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>    &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.45</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--mybatis核心jar包：开始--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.5</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--测试代码用--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;junit&lt;/groupId&gt;<br>    &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;<br>    &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;<br>    &lt;version&gt;RELEASE&lt;/version&gt;<br>    &lt;scope&gt;compile&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>编写<code>mybatis-config.xml</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;<br>        &lt;environment id=<span class="hljs-string">&quot;mysql&quot;</span>&gt;<br>            &lt;!--配置事务管理器：目前记住。JDBC采用Jdbc中的事务管理--&gt;<br>            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;&lt;/transactionManager&gt;<br>            &lt;!--配置使用的数据源：目前使用mybaits内置的带有连接池的数据源--&gt;<br>            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;<br>                &lt;!--内置数据源的参数及取值。注意：参数名不能随便写--&gt;<br>                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;<br>                &lt;!--测试连接Mysql库时报错：<br>                java.sql.SQLException: The server time zone value <span class="hljs-string">&#x27;xxx&#x27;</span> is unrecognized or represents more…<br>                在配置url的时候要加上： ?serverTimezone=UTC--&gt;<br>                &lt;!--此处连接的是本地数据库 写法为jdbc:mysql:<span class="hljs-comment">//localhost：数据库创建时的端口号/数据库名</span><br>                数据库创建此处使用的是navicat工具创建的 所以端口号 账号密码要和navicat里的一致<br>                不会navicat的可自行百度--&gt;<br>                &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/emp-mybatis?serverTimezone=UTC&amp;amp;useSSL=false&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;123456&quot;</span> /&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br>    &lt;mappers&gt;<br>        &lt;mapper resource=<span class="hljs-string">&quot;mapper/userMapper.xml&quot;</span>/&gt;<br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>配置连接数据库SqlUtil、BaseUtil</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br><br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;加载配置文件失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打开数据库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">openSql</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span>  factory.openSession();<br>    &#125;<br><br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.After;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseUtil</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> SqlSession sqlSession;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        sqlSession  = SqlUtil.openSql();<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        sqlSession.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写接口类UserDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<br><br><span class="hljs-keyword">import</span> bean.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(User user)</span></span>;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectUser</span> <span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>    <span class="hljs-function">User <span class="hljs-title">selectByName</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写userMapper.xml</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;!--建立映射关系，java类的包名--&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;dao.UserDao&quot;</span>&gt;<br>    &lt;insert id=<span class="hljs-string">&quot;saveUser&quot;</span>&gt;<br>        <span class="hljs-function">insert into <span class="hljs-title">user</span> <span class="hljs-params">(username,password)</span> <span class="hljs-title">values</span> <span class="hljs-params">(#&#123;username&#125;,#&#123;password&#125;)</span></span>;<br>    &lt;/insert&gt;<br>    &lt;select id=<span class="hljs-string">&quot;selectUser&quot;</span> resultType=<span class="hljs-string">&quot;bean.User&quot;</span>&gt;<br>        select * from user;<br>    &lt;/select&gt;<br>    &lt;delete id=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;<br>        delete from user where id = #&#123;id&#125;;<br>    &lt;/delete&gt;<br>    &lt;update id=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;<br>        update user set password = #&#123;password&#125; where id =#&#123;id&#125;<br>    &lt;/update&gt;<br>    &lt;select id=<span class="hljs-string">&quot;selectByName&quot;</span> resultType=<span class="hljs-string">&quot;bean.User&quot;</span>&gt;<br>        select * from user where username =#&#123;username&#125;;<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br><br></code></pre></div></td></tr></table></figure></li><li><p>解释</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826230530.png" alt="image-20210826230529490"></p></li><li><p>分析</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826231337.png" alt="image-20210826231336406"></p></li><li><p>编写测试类userJavaTest</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> user;<br><br><br><span class="hljs-keyword">import</span> bean.User;<br><span class="hljs-keyword">import</span> dao.UserDao;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> util.BaseUtil;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userJavaTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseUtil</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertTest</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;12&quot;</span>);<br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-keyword">int</span> count = userDao.saveUser(user);<br>        sqlSession.commit();<span class="hljs-comment">// mybatis事务不会主动提交</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;mybatis-插入成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectTest</span><span class="hljs-params">()</span> </span>&#123;<br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        list = userDao.selectUser();<br>        <span class="hljs-keyword">for</span> (User user : list) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteTest</span><span class="hljs-params">()</span> </span>&#123;<br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-keyword">int</span> id = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> count = userDao.deleteUser(id);<br>        sqlSession.commit();<span class="hljs-comment">// mybatis事务不会主动提交</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;mybatis-删除成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateTest</span><span class="hljs-params">()</span> </span>&#123;<br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">3</span>);<br>        user.setPassword(<span class="hljs-string">&quot;1111111&quot;</span>);<br>        <span class="hljs-keyword">int</span> count = userDao.updateUser(user);<br>        sqlSession.commit();<span class="hljs-comment">// mybatis事务不会主动提交</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;mybatis-更新成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByNameTest</span><span class="hljs-params">()</span> </span>&#123;<br>        UserDao userDao = sqlSession.getMapper(UserDao.class);<br>        String name = <span class="hljs-string">&quot;tom&quot;</span>;<br>        User user = userDao.selectByName(name);<br>        sqlSession.commit();<span class="hljs-comment">// mybatis事务不会主动提交</span><br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端学习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-C3P0-03C3P0连接数据库</title>
    <link href="/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-C3P0-03jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-C3P0-03jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p>创建maven项目参见文章<a href="https://kjjblog.netlify.app/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/">java-jdbc-01jdbc连接数据库</a></p></li><li><p>pom.xml中增加C3P0相关依赖</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--c3p0依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.mchange&lt;/groupId&gt;<br>    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.9</span><span class="hljs-number">.5</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!-- cmmons-dbutils是Apache组织提供的一个开源JDBC工具类库，它是对JDBC的简单封装，--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;<br>    &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--这是c3p0数据库连接池的辅助包，如果没有这个包系统启动时会报classnotfoundexception--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.mchange&lt;/groupId&gt;<br>    &lt;artifactId&gt;mchange-commons-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">0.2</span><span class="hljs-number">.15</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>创建c3p0的配置文件</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826222503.png" alt="image-20210826222502864"></p></li><li><p>编写c3p0文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!-- XML文件类似HTML文件，是一种树形结构的文件，上面的这个是文件的根节点 --&gt;<br><br>&lt;!-- 这里可以从名字看出，是c3p0的配置 --&gt;<br>&lt;c3p0-config&gt;<br>    &lt;<span class="hljs-keyword">default</span>-config&gt;<br>        &lt;!-- 这是一个注释，XML文件的注释格式就是这样 --&gt;<br>        &lt;!-- 这下面四个是这个配置文件的必须项，出了错或者里面填写错误一定会失败，连接不到 --&gt;<br>        &lt;!-- 配置文件的内容，c3p0的jar包里面会读取这个文件这里面的配置，来连接到我们想要连接的数据库 --&gt;<br>        &lt;property name=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/emp?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC&lt;/property&gt;</span><br>        &lt;property name=<span class="hljs-string">&quot;user&quot;</span>&gt;root&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;password&quot;</span>&gt;<span class="hljs-number">123456</span>&lt;/property&gt;<br><br>        &lt;!-- 连接池参数 --&gt;<br>        &lt;!-- 这里是基本参数的设置，如果没有会有默认值，根据项目的运作情况，可以在这里面进行更改 --&gt;<br>        &lt;property name=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;<span class="hljs-number">5</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;<span class="hljs-number">50</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;checkoutTimeout&quot;</span>&gt;<span class="hljs-number">2000</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;maxIdleTime&quot;</span>&gt;<span class="hljs-number">1000</span>&lt;/property&gt;<br><br>    &lt;/<span class="hljs-keyword">default</span>-config&gt;<br><br>    &lt;!-- 上面的是默认配置，后面要用的ComboPooledDataSource构造方法中没有参数时会默认获取上面的配置 --&gt;<br>    &lt;!-- 这里是可以自定义的名字，不过要在ComboPooledDataSource构造方法中加上自定义的名字，比如下面的yht，就是自定义的名字 --&gt;<br>    &lt;named-config name=<span class="hljs-string">&quot;mysql&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/emp-test?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC&lt;/property&gt;</span><br>        &lt;property name=<span class="hljs-string">&quot;user&quot;</span>&gt;root&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;password&quot;</span>&gt;<span class="hljs-number">123456</span>&lt;/property&gt;<br><br>        &lt;!-- 连接池参数 --&gt;<br>        &lt;!-- 这里是基本参数的设置，如果没有会有默认值，根据项目的运作情况，可以在这里面进行更改 --&gt;<br>        &lt;property name=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;<span class="hljs-number">5</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;<span class="hljs-number">50</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;checkoutTimeout&quot;</span>&gt;<span class="hljs-number">2000</span>&lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;maxIdleTime&quot;</span>&gt;<span class="hljs-number">1000</span>&lt;/property&gt;<br>    &lt;/named-config&gt;<br>&lt;/c3p0-config&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>解决错误(这里不得不吐槽一下某个垃圾博主，他的原配置)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210825165124.png" alt="image-20210825165124139"></p><p>然后我就疯狂报错，一直找不到我配置的数据库，我就找啊找，我终于发现那个博主把<code>named</code>写成了<code>name</code>(心里一万只曹尼玛慰问一下他……)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210825165332.png" alt="image-20210825165329200"></p></li><li><p>配置C3P0Util</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826223112.png" alt="image-20210826223112009"></p></li><li><p>编写C3P0Util</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.util;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * c3p0工具类（数据库连接池工具），用于管理多个数据库连接对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3P0Util</span> </span>&#123;<br>    <span class="hljs-comment">//这也是一种写法</span><br>    <span class="hljs-comment">// public static ComboPooledDataSource ds = new ComboPooledDataSource(&quot;mysql&quot;);</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ComboPooledDataSource ds = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 如果不写，则默认调用default-config</span><br>        <span class="hljs-comment">//ds = new ComboPooledDataSource();</span><br>        <span class="hljs-comment">// 新建数据库连接池，注意这里的参数必须同c3p0-config.xml中的named-config标签中的name的值相同</span><br>        ds = <span class="hljs-keyword">new</span> ComboPooledDataSource(<span class="hljs-string">&quot;mysql&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 得到数据库连接对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = ds.getConnection();<br>            <span class="hljs-keyword">return</span> conn;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;服务器忙&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭所有资源连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ps</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, Statement ps, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            conn = <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ps.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            ps = <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            rs = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试数据库连接成功的主方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = getConnection();<br>        System.out.println(conn.getClass().getName());<span class="hljs-comment">//com.mchange.v2.c3p0.impl.NewProxyConnection</span><br>        close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>解释</p><p>如果写的是<code>ds = new ComboPooledDataSource();</code>调用的是默认配置</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826223319.png" alt="image-20210826223318389"></p><p>如果写的是<code>  ds = new ComboPooledDataSource(&quot;mysql&quot;);</code>调用的是相关配置</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826223410.png" alt="image-20210826223408950"></p></li><li><p>后面这些，都是我在解决问题<code>&#39;mysql&#39; does not exist. </code>时加上的(虽然和这个没有关系)，建议可以加上</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826223520.png" alt="image-20210826223519382"></p></li><li><p>配置完，可以操作不同的数据库，本人感觉挺爽的</p></li><li><p>配置接口EmpDao，封装Dao层的5种操作：增、删、改、查、根据条件查</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826223805.png" alt="image-20210826223804878"></p></li><li><p>编写接口EmpDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.dao;<br><br><br><span class="hljs-keyword">import</span> com.yht.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmpDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmp</span> <span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateEmp</span> <span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteEmp</span> <span class="hljs-params">(String id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">findAllEmp</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findEmpById</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>配置接口的实现类EmpDaoImpl</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225852.png" alt="image-20210826223921255"></p></li><li><p>编写接口实现类EmpDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.dao.impl;<br><br><span class="hljs-keyword">import</span> com.yht.bean.Emp;<br><span class="hljs-keyword">import</span> com.yht.dao.EmpDao;<br><span class="hljs-keyword">import</span> com.yht.util.C3P0Util;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * C3P0连接池进行插入</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmp</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">//结果</span><br>        QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner(C3P0Util.getDataSource()); <span class="hljs-comment">//数据库连接</span><br>        String sql = <span class="hljs-string">&quot;insert into emp values(?,?,?,?,?)&quot;</span>; <span class="hljs-comment">//insert语句</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            result = qr.update(sql, emp.getId(), emp.getName(), emp.getAge(), emp.getBirthday(), emp.getSalary());<span class="hljs-comment">// 传入sql和对应的参数</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateEmp</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner(C3P0Util.getDataSource());<br>        String sql = <span class="hljs-string">&quot;update emp set salary = ? where id = ?&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = qr.update(sql, emp.getSalary(), emp.getId());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteEmp</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner(C3P0Util.getDataSource());<br>        String sql = <span class="hljs-string">&quot;delete from emp where id =?&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = qr.update(sql, id);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">findAllEmp</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Emp&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Emp&gt;();<br>        QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner(C3P0Util.getDataSource());<br>        BeanListHandler blh = <span class="hljs-keyword">new</span> BeanListHandler(Emp.class);<br>        String sql = <span class="hljs-string">&quot;select * from emp&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            list = (List&lt;Emp&gt;) qr.query(sql, blh); <span class="hljs-comment">// 查询结果强制转换成emp类 的类型</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findEmpById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        Emp emp = <span class="hljs-keyword">new</span> Emp();<br>        QueryRunner qr = <span class="hljs-keyword">new</span> QueryRunner(C3P0Util.getDataSource());<br>        String sql = <span class="hljs-string">&quot;select * from emp where id =?&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            emp = (Emp) qr.query(sql, <span class="hljs-keyword">new</span> BeanHandler(Emp.class), id);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> emp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>解释<code>QueryRunner</code>是因为安装了</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826224051.png" alt="image-20210826224050518"></p><div class="note note-success">            <p>QueryRunner类的主要方法</p><ul><li><p><code>public Object query(Connection conn, String sql, Object[] params, ResultSetHandler rsh) throws SQLException</code><br>执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理PreparedStatement和ResultSet的创建和关闭。</p></li><li><p><code>public Object query(String sql, Object[] params, ResultSetHandler rsh) throws SQLException</code><br>几乎与第一种方法一样；唯一的不同在于它不将数据库连接提供给方法，并且它是从提供给构造方法的数据源(DataSource)或使用的setDataSource方法中重新获得Connection。</p></li><li><p><code>public Object query(Connection conn, String sql, ResultSetHandler rsh) throws SQLException</code><br>执行一个不需要置换参数的查询操作。</p></li><li><p><code>public int update(Connection conn, String sql, Object[] params) throws SQLException</code><br>用来执行一个更新（插入、更新或删除）操作。</p></li><li><p><code>public int update(Connection conn, String sql) throws SQLException</code><br>用来执行一个不需要置换参数的更新操作。</p></li><li><p><code>public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException</code><br>这个方法对应着批处理，经常用于在同一个表中批量插入数据，或批量更新表的数据。<br>该方法为何会接收二维数组<code>Object[][] params</code>呢？<br>答：例如现在要想在同一个表中批量插入数据，编写的SQL语句为：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">String sql = &quot;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,name) <span class="hljs-keyword">values</span>(?,?)<span class="hljs-string">&quot;;11</span><br></code></pre></div></td></tr></table></figure><p>该方法接收二维数组<code>Object[][] params</code>，那么调用其的时候就要传递一个诸如这样的实参<code>[[1,aa],[2,bb],[3,cc]]</code>，即用二维数组里面的每一个一维数组生成一条sql语句。<br>那为何又会返回<code>int[]</code>呢？<br>答：该方法的返回值是<code>int[]</code>，所以会返回诸如这样的结果：<code>[1,1,1]</code>，意思是生成的第一条sql语句影响数据库几行、生成的第二条sql语句影响数据库几行、生成的第三条sql语句影响数据库几行。</p></li></ul>          </div><ol start="16"><li><p>配置测试方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826224516.png" alt="image-20210826224515329"></p></li><li><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.test;<br><br><br><span class="hljs-keyword">import</span> com.yht.bean.Emp;<br><span class="hljs-keyword">import</span> com.yht.dao.EmpDao;<br><span class="hljs-keyword">import</span> com.yht.dao.impl.EmpDaoImpl;<br><span class="hljs-keyword">import</span> com.yht.util.BaseUtil;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertEmpTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Emp emp = <span class="hljs-keyword">new</span> Emp();<br>        emp.setId(BaseUtil.getUUID());<br>        emp.setName(<span class="hljs-string">&quot;tom&quot;</span>);<br>        emp.setAge(<span class="hljs-number">20</span>);<br>        emp.setBirthday(<span class="hljs-string">&quot;2020-12-01&quot;</span>);<br>        emp.setSalary(<span class="hljs-number">2000.0</span>);<br>        EmpDao dao = <span class="hljs-keyword">new</span> EmpDaoImpl();<br>        <span class="hljs-keyword">int</span> result = dao.insertEmp(emp);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmpTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Emp emp = <span class="hljs-keyword">new</span> Emp();<br>        emp.setSalary(<span class="hljs-number">1000.0</span>);<br>        <span class="hljs-comment">//emp.setId(&quot;1&quot;);</span><br>        emp.setId(<span class="hljs-string">&quot;11&quot;</span>);<br>        EmpDao dao = <span class="hljs-keyword">new</span> EmpDaoImpl();<br>        <span class="hljs-keyword">int</span> result = dao.updateEmp(emp);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteEmpTest</span><span class="hljs-params">()</span> </span>&#123;<br>        String id = <span class="hljs-string">&quot;11&quot;</span>;<br>        EmpDao dao = <span class="hljs-keyword">new</span> EmpDaoImpl();<br>        <span class="hljs-keyword">int</span> result = dao.deleteEmp(id);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findAllEmpTest</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Emp&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Emp&gt;();<br>        EmpDao dao = <span class="hljs-keyword">new</span> EmpDaoImpl();<br>        list = dao.findAllEmp();<br>        <span class="hljs-keyword">for</span> (Emp emp : list) &#123;<br>            System.out.println(emp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findByIdEmpTest</span><span class="hljs-params">()</span> </span>&#123;<br>        String id = <span class="hljs-string">&quot;11&quot;</span>;<br>        Emp emp = <span class="hljs-keyword">new</span> Emp();<br>        EmpDao dao = <span class="hljs-keyword">new</span> EmpDaoImpl();<br>        emp = dao.findEmpById(id);<br>        System.out.println(emp);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>测试结果</p><ul><li>插入</li></ul></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826224926.png" alt="image-20210826224925803"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225021.png" alt="image-20210826225020979"></p><ul><li><p>更新</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225210.png" alt="image-20210826225209626"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225225.png" alt="image-20210826225224330"></p></li><li><p>删除</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225258.png" alt="image-20210826225257358"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225309.png" alt="image-20210826225308179"></p></li><li><p>查找</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225329.png" alt="image-20210826225329136"></p></li><li><p>根据id查找(设置的查找的id=”11”,刚才删除了11)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826225347.png" alt="image-20210826225346440"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端学习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C3P0连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-dbcp-02dbcp连接数据库</title>
    <link href="/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-dbcp-02dbcp%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-dbcp-02dbcp%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p>创建maven项目参见文章<a href="https://kjjblog.netlify.app/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/">java-jdbc-01jdbc连接数据库</a></p></li><li><p>pom.xml中增加依赖dbcp</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--        apache的一个java连接池--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.4</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>创建数据库连接文件<code>dbcpconfig.properties</code></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826221434.png" alt="image-20210826221433320"></p></li><li><p>编写文件dbcpconfig.properties</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#连接设置<br>driverClassName=com.mysql.jdbc.Driver<br>url=jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/emp?useSSL=false</span><br>username=root<br>password=<span class="hljs-number">123456</span><br>#&lt;!-- 初始化连接 --&gt;<br>initialSize=<span class="hljs-number">10</span><br>#最大连接数量<br>maxActive=<span class="hljs-number">50</span><br>#&lt;!-- 最大空闲连接 --&gt;<br>maxIdle=<span class="hljs-number">20</span><br>#&lt;!-- 最小空闲连接 --&gt;<br>minIdle=<span class="hljs-number">5</span><br>#&lt;!-- 超时等待时间以毫秒为单位 <span class="hljs-number">6000</span>毫秒/<span class="hljs-number">1000</span>等于<span class="hljs-number">60</span>秒 --&gt;<br>maxWait=<span class="hljs-number">60000</span><br>connectionProperties=useUnicode=<span class="hljs-keyword">true</span>;characterEncoding=UTF8<br>#指定由连接池所创建的连接的自动提交（auto-commit）状态。<br>defaultAutoCommit=<span class="hljs-keyword">true</span><br>#driver <span class="hljs-keyword">default</span> 指定由连接池所创建的连接的只读（read-only）状态。<br>#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）<br>defaultReadOnly=<br>#driver <span class="hljs-keyword">default</span> 指定由连接池所创建的连接的事务级别（TransactionIsolation）。<br>#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE<br>defaultTransactionIsolation=READ_UNCOMMITTED<br><br></code></pre></div></td></tr></table></figure></li><li><p>编写DbcpUtil类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.util;<br><br><span class="hljs-keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbcpUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream is = DbcpUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcpconfig.properties&quot;</span>);<br>            Properties prop = <span class="hljs-keyword">new</span> Properties();<br>            prop.load(is);<br>            ds = BasicDataSourceFactory.createDataSource(prop);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> ds.getConnection();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, PreparedStatement ps, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ps.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = getConnection();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(conn.getClass().getName());<span class="hljs-comment">//org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper</span><br>        close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>jdbc那篇文件已经讲解了目录的构建，本文主要从5个接口方法讲起</p></li><li><p>5个接口方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.dao;<br><br><span class="hljs-keyword">import</span> com.yht.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmpDbcpDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmpDbcp</span><span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateEmpDbcp</span><span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteEmpDbcp</span> <span class="hljs-params">(String id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">fineAllEmpDbcp</span> <span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findByIdDbcp</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>接口方法的实现类EmpDbcpImpl</p><ul><li><p>方法的实现类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDbcpImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpDbcpDao</span> </span>&#123;<br>    <span class="hljs-comment">//插入方法</span><br>    <span class="hljs-comment">//更新方法</span><br>    <span class="hljs-comment">//删除方法</span><br>    <span class="hljs-comment">//查找方法</span><br>    <span class="hljs-comment">//根据条件查找方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>插入方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmpDbcp</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = DbcpUtil.getConnection();<br>        String sql = <span class="hljs-string">&quot;insert into emp values(?,?,?,?,?)&quot;</span>; <span class="hljs-comment">//insert语句</span><br>        ps = conn.prepareStatement(sql);<br>        ps.setString(<span class="hljs-number">1</span>, emp.getId());<br>        ps.setString(<span class="hljs-number">2</span>, emp.getName());<br>        ps.setInt(<span class="hljs-number">3</span>, emp.getAge());<br>        ps.setString(<span class="hljs-number">4</span>, emp.getBirthday());<br>        ps.setDouble(<span class="hljs-number">5</span>, emp.getSalary());<br>        result = ps.executeUpdate();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        DbcpUtil.close(conn, ps, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>更新方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateEmpDbcp</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = DbcpUtil.getConnection();<br>        String sql = <span class="hljs-string">&quot;update emp set name = ? where id = ?&quot;</span>;<br>        ps = conn.prepareStatement(sql);<br>        ps.setString(<span class="hljs-number">1</span>, emp.getName());<br>        ps.setString(<span class="hljs-number">2</span>, emp.getId());<br>        result = ps.executeUpdate();<br>     <br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        DbcpUtil.close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteEmpDbcp</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = DbcpUtil.getConnection();<br>        String sql = <span class="hljs-string">&quot;delete from emp where id =?&quot;</span>;<br>        ps = conn.prepareStatement(sql);<br>        ps.setString(<span class="hljs-number">1</span>, id);<br>        result = ps.executeUpdate();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        DbcpUtil.close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>查找方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">fineAllEmpDbcp</span><span class="hljs-params">()</span> </span>&#123;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>    ResultSet rs = <span class="hljs-keyword">null</span>;<br>    List&lt;Emp&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Emp&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = DbcpUtil.getConnection();<br>        String sql = <span class="hljs-string">&quot;select * from emp&quot;</span>;<br>        ps = conn.prepareStatement(sql);<br>        rs = ps.executeQuery();<br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            Emp emp = <span class="hljs-keyword">new</span> Emp(rs.getString(<span class="hljs-string">&quot;id&quot;</span>), rs.getString(<span class="hljs-string">&quot;name&quot;</span>), rs.getInt(<span class="hljs-string">&quot;age&quot;</span>), rs.getString(<span class="hljs-string">&quot;birthday&quot;</span>), rs.getDouble(<span class="hljs-string">&quot;salary&quot;</span>));<br>            list.add(emp);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        DbcpUtil.close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br>     <br></code></pre></div></td></tr></table></figure></li><li><p>根据条件查找方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findByIdDbcp</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>    ResultSet rs = <span class="hljs-keyword">null</span>;<br>    Emp emp = <span class="hljs-keyword">new</span> Emp();<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = DbcpUtil.getConnection();<br>        String sql = <span class="hljs-string">&quot;select * from emp where id = ?&quot;</span>;<br>        ps = conn.prepareStatement(sql);<br>        ps.setString(<span class="hljs-number">1</span>,id);<br>        rs = ps.executeQuery();<br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>             emp = <span class="hljs-keyword">new</span> Emp(rs.getString(<span class="hljs-string">&quot;id&quot;</span>), rs.getString(<span class="hljs-string">&quot;name&quot;</span>), rs.getInt(<span class="hljs-string">&quot;age&quot;</span>), rs.getString(<span class="hljs-string">&quot;birthday&quot;</span>), rs.getDouble(<span class="hljs-string">&quot;salary&quot;</span>));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        DbcpUtil.close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> emp;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>dpcpTest测试方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * dbcp测试方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDbcpTest</span> </span>&#123;<br>    <span class="hljs-comment">//test</span><br>    <span class="hljs-comment">//test</span><br>    <span class="hljs-comment">//test</span><br>    <span class="hljs-comment">//.......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>插入测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertTest</span><span class="hljs-params">()</span> </span>&#123;<br>    Emp emp = <span class="hljs-keyword">new</span> Emp();<br>    emp.setId(BaseUtil.getUUID());<br>    emp.setName(<span class="hljs-string">&quot;tom-dbcp&quot;</span>);<br>    emp.setAge(<span class="hljs-number">20</span>);<br>    emp.setBirthday(<span class="hljs-string">&quot;1008-01-90&quot;</span>);<br>    emp.setSalary(<span class="hljs-number">2000.00</span>);<br>    EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>    <span class="hljs-keyword">int</span> result = dao.insertEmpDbcp(emp);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;dbcp-插入成功&quot;</span>);<br>    &#125;<br>     <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>更新测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateTest</span><span class="hljs-params">()</span> </span>&#123;<br>    Emp emp = <span class="hljs-keyword">new</span> Emp();<br>    emp.setId(<span class="hljs-string">&quot;11&quot;</span>);<br>    emp.setName(<span class="hljs-string">&quot;tom-dbcp11&quot;</span>);<br>    EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>    <span class="hljs-keyword">int</span> result = dao.updateEmpDbcp(emp);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;dbcp-修改成功&quot;</span>);<br>    &#125;<br>     <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteTest</span><span class="hljs-params">()</span> </span>&#123;<br>    String id = <span class="hljs-string">&quot;11&quot;</span>;<br>    EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>    <span class="hljs-keyword">int</span> result = dao.deleteEmpDbcp(id);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;dbcp-删除成功&quot;</span>);<br>    &#125;<br>     <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>查找测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectTest</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Emp&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Emp&gt;();<br>    EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>    list = dao.fineAllEmpDbcp();<br>    <span class="hljs-keyword">for</span> (Emp emp : list) &#123;<br>        System.out.println(emp);<br>    &#125;<br>     <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>根据条件查找测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">     <br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByIdTest</span><span class="hljs-params">()</span> </span>&#123;<br>    String id = <span class="hljs-string">&quot;11&quot;</span>;<br>    EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>    Emp emp = dao.findByIdDbcp(id);<br>    System.out.println(emp);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>7.运行测试</p><p>可以选择一个一个测，也可以选择运行全部测试用例</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210825155453.png" alt="image-20210825155452589"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端学习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dbcp连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-jdbc-01jdbc连接数据库</title>
    <link href="/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/javajava-jdbc-01jdbc%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<ol><li><p>创建一个maven项目</p><ul><li>点击<code>file</code>-&gt;<code>New</code>-&gt;<code>Project</code>,看到如下界面</li></ul><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826210520.png" alt="image-20210826210515361"></p><ul><li><p>选择Maven项目进行创建</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826210713.png" alt="image-20210826210712232"></p></li><li><p>Maven项目创建成功</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826211125.png" alt="image-20210826211124558"></p></li><li><p>创建后的项目结构，(根据自己的项目，创建合适的数据包)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826211235.png" alt="image-20210826211234961"></p></li></ul></li><li><p>配置本地的maven依赖</p><p>点击<code>File</code>-&gt;<code>Settings</code>，在弹出的页面搜索Maven，配置如下界面</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826211644.png" alt="image-20210826211644022"></p></li><li><p>配置pom.xml文件</p><ul><li><p>导入依赖lombok</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!--这里是lombok工具包，用来简写bean类的--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.16</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>    &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>导入依赖数据库连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.45</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>导入测试依赖</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;junit&lt;/groupId&gt;<br>    &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>    &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;<br>    &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;<br>    &lt;version&gt;RELEASE&lt;/version&gt;<br>    &lt;scope&gt;compile&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>在这之前需要新建数据库emp，并且创建表emp(非常简单的一张表)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826212214.png" alt="image-20210826212213222"></p></li><li><p>创建工具类JDBCUtil</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826211825.png" alt="image-20210826211824349"></p></li><li><p>JDBCUtil编写</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.util;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String dirverName = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/emp?useSSL=false&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user = <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(JDBCUtil.dirverName);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(JDBCUtil.url, JDBCUtil.user, JDBCUtil.password);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭资源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> st</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (st != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试数据库连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = getConnection();<br>        System.out.println(conn.getClass().getName()); <span class="hljs-comment">//com.mysql.jdbc.JDBC4Connection</span><br>        close(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>如果控制台出现特别多红色的提示，比如下面这样：(这个时候需要加上<code>useSSL=false</code>就没有爆红了)<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210825145622.png" alt="image-20210825145614015"></p></li><li><p>创建java类Emp</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826212257.png" alt="image-20210826212256836"></p></li><li><p>Emp类的编写(使用Lombok的好处，直接使用@Setter等，不用再写一坨)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.bean;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String birthday;<br>    <span class="hljs-keyword">private</span> Double salary;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>封装Dao层的5种操作：增、删、改、查、根据条件查</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826213331.png" alt="image-20210826213330332"></p></li><li><p>编写封装的接口方法EmpDbcpDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yht.dao;<br><br><span class="hljs-keyword">import</span> com.yht.bean.Emp;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmpDbcpDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmpDbcp</span><span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateEmpDbcp</span><span class="hljs-params">(Emp emp)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteEmpDbcp</span> <span class="hljs-params">(String id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title">fineAllEmpDbcp</span> <span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findByIdDbcp</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure></li><li><p>创建接口的实现类EmpDbcpImpl</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826213407.png" alt="image-20210826213406134"></p></li><li><p>编写接口实现类EmpDbcpImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDbcpImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">EmpDbcpDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertEmpDbcp</span><span class="hljs-params">(Emp emp)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtil.getConnection();<br>            String sql = <span class="hljs-string">&quot;insert into emp values(?,?,?,?,?)&quot;</span>; <span class="hljs-comment">//insert语句</span><br>            ps = conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>, emp.getId());<br>            ps.setString(<span class="hljs-number">2</span>, emp.getName());<br>            ps.setInt(<span class="hljs-number">3</span>, emp.getAge());<br>            ps.setString(<span class="hljs-number">4</span>, emp.getBirthday());<br>            ps.setDouble(<span class="hljs-number">5</span>, emp.getSalary());<br>            result = ps.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtil.close(conn, ps, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>创建测试类</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826213543.png" alt="image-20210826213539160"></p></li><li><p>编写测试的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpDbcpTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Emp emp = <span class="hljs-keyword">new</span> Emp();<br>        emp.setId(BaseUtil.getUUID());<br>        emp.setName(<span class="hljs-string">&quot;tom-dbcp&quot;</span>);<br>        emp.setAge(<span class="hljs-number">20</span>);<br>        emp.setBirthday(<span class="hljs-string">&quot;1008-01-90&quot;</span>);<br>        emp.setSalary(<span class="hljs-number">2000.00</span>);<br>        EmpDbcpDao dao = <span class="hljs-keyword">new</span> EmpDbcpImpl();<br>        <span class="hljs-keyword">int</span> result = dao.insertEmpDbcp(emp);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;dbcp-插入成功&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>BaseUtil里封装了自动生成32位编码的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826214039.png" alt="image-20210826214036472"></p></li><li><p>测试通过，控制台输出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826213824.png" alt="image-20210826213823830"></p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826213907.png" alt="image-20210826213906133"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本人学习了多种方法实现数据库的增删改查</p><ul><li><p>maven项目+jdbc+mysql</p></li><li><p>maven项目+dbcp+mysql</p></li><li><p>maven项目+C3P0+mysql</p></li><li><p>maven项目+mybatis+mysql</p></li><li><p>spring项目+driud+mybatis+mysql</p></li></ul><div class="note note-success">            <ul><li>其中先写了dbcp的方法，所以jdbc是在dbcp的基础上进行修改</li><li>只要将接口实现类EmpDbcpImpl使用的<code>DbcpUtil</code>改为<code>JDBCUtil</code>即可(说明使用的是jdbc连接的数据库，其他操作语句同dbcp一样)</li></ul>          </div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210826215053.png" alt="image-20210826215053077"></p>]]></content>
    
    
    <categories>
      
      <category>后端学习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jdbc连接数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-翻转复杂数组</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E7%BF%BB%E8%BD%AC%E5%A4%8D%E6%9D%82%E6%95%B0%E7%BB%84/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E7%BF%BB%E8%BD%AC%E5%A4%8D%E6%9D%82%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<ol><li><p>题目： [1, [2, [3, [4, [5, ‘null’]]]]] =&gt; [5, [4, [3, [2, [1, ‘null’]]]]] </p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reserve</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res = []; <span class="hljs-comment">//保存每一层数组</span><br>    <span class="hljs-keyword">let</span> list = data;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Array</span>.isArray(list[<span class="hljs-number">1</span>])) &#123;<br>        res.push(list);<br>        list = list[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 有指针移动的思想</span><br>    &#125;<br>    res.push(list) <span class="hljs-comment">//放入最后一个类数组[5,&#x27;null&#x27;]</span><br>    <span class="hljs-keyword">let</span> max = res.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> half = <span class="hljs-built_in">Math</span>.floor(max / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; half; i++) &#123;<br>        <span class="hljs-keyword">const</span> left = res[i];<br>        <span class="hljs-keyword">const</span> right = res[max - i];  <span class="hljs-comment">// 2边向中间逼近</span><br>        [left[<span class="hljs-number">0</span>], right[<span class="hljs-number">0</span>]] = [right[<span class="hljs-number">0</span>], left[<span class="hljs-number">0</span>]]; <span class="hljs-comment">// 交换</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;null&#x27;</span>]]]]];<br>reserve(array);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(array));<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>翻转复杂数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-反转链表</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>反转链表</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反转链表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>phead </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reserve</span>(<span class="hljs-params">li.print()</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> phead = li.print();<br>    <span class="hljs-built_in">console</span>.log(phead);<br>    <span class="hljs-keyword">var</span> pre = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> cur = phead;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">var</span> next = cur.next; <span class="hljs-comment">// 保存下一个节点</span><br>        cur.next = pre; <span class="hljs-comment">//断链</span><br>        pre = cur; <span class="hljs-comment">// 保证pre一直指向链头</span><br>        cur = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>构建链表</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LinkList</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> Node = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>        <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> head = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;&#125;</span> </span>val </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">this</span>.append = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> node = <span class="hljs-keyword">new</span> Node(val);<br>        <span class="hljs-keyword">var</span> cur;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>            head = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = head;<br>            <span class="hljs-keyword">while</span> (cur.next) &#123;<br>                cur = cur.next<br>            &#125;<br>            cur.next = node;<br><br>        &#125;<br>        length++;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">this</span>.print = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> head;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> li = <span class="hljs-keyword">new</span> LinkList();<br>li.append(<span class="hljs-number">1</span>);<br>li.append(<span class="hljs-number">2</span>);<br>li.append(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(li.print());<br><span class="hljs-comment">// Node &#123;val: 1, next: Node &#123; val: 2, next: Node &#123; val: 3, next: null &#125; &#125; &#125;</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-04样式执行顺序</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-04%E6%A0%B7%E5%BC%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-04%E6%A0%B7%E5%BC%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>在元素上指定类的顺序是没有用的，样式的展示取决于在样式声明中定义的顺序</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">    &lt;style&gt;<br>        .b &#123;<br>            <span class="hljs-attr">width</span>: 200px;<br>            height: 200px;<br>            background: yellow;<br>            margin-bottom: 20px;<br>        &#125;<br>        .a &#123;<br>            <span class="hljs-attr">width</span>: 200px;<br>            height: 200px;<br>            background: green<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>都显示为绿色，因为样式的顺序是先黄色，后来被覆盖，成绿色</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823231512.png" alt="image-20210823231511506"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http-04http请求</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-04http%E8%AF%B7%E6%B1%82/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/httphttp-04http%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<ol><li><p>请求类型</p><p>请求类型有8种：</p><p>get:(select)从服务器请求数据，(给的少拿的多)</p><p>post:(create)向服务器发送数据,(给的多拿的少)</p><p>put:向服务器存放一些内容</p><p>delete:删除服务器的一些内容</p><p>head:只请求页面的头部<br>trace:回显服务器收到的请求，主要用于测试或诊断</p><p>options:允许客户端查看服务器的性能</p><p>connect:HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823222040.png" alt="img"></p></li><li><p>同源策略(理解不深)</p><p>必须是同协议、同域名、同端口</p></li><li><p>跨域解决方案</p><p>(1)Jsonp 分为原生的jsonp和jQuery的jsonp</p><p>(2)跨域资源共享 CORS,主要设置在后端，只要后端实现了跨域，就实现了跨域</p><p>(3)Node中间件代理(两次跨域)</p><p>(4) Nginx反向代理</p></li><li><p>同源策略限制的内容</p><p>(1)Cookie、LocalStorage、IndexedDB等存储性内容</p><p>(2) DOM节点</p><p>(3) AJAX请求不能发送</p></li><li><p>不受同源限制(允许跨境加载)</p><p>(1) <code>&lt;img src=xxx&gt;</code></p><p>(2) <code>&lt;link href=xxx&gt;</code></p><p>(3)<code>&lt;script src=xxx&gt;</code></p></li><li><p>jsonp的解决方式</p><p>最常用的解决跨域的方法用jsonp、CORS</p><p>(1) 使用jsonp解决跨域</p><p>实现原理，如果a页面(a.com/jsonp.html) 想要得到b页面(b.com/main.js)里的数据(很明显a，b在不同的域名下，需要跨域)在jsonp.html页面创建一个回调函数，动态的添加<code>script</code>元素，向服务器发送请求，请求地址为<code> http://b.com/main.js?callbcak=xxx,</code>在main.js里面调用这个回调函数，并且以json的数据格式作为参数传递，完成回调。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jsonp.html</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//创建script标签</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addScriptTag</span>(<span class="hljs-params">src</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.setAttribute(<span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript&#x27;</span>);<br>    script.src = src;<br>    <span class="hljs-built_in">document</span>.body.appendChild(script);<br>&#125;<br><span class="hljs-comment">//回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data.name +<span class="hljs-string">&#x27;xxx&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 页面加载完成，创建一个script标签</span><br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    addScriptTag(<span class="hljs-string">&#x27;http://b.com/main.js?callback=foo&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main.js</span><br><span class="hljs-comment"> */</span><br>foo(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>jsonp的缺点</p><p>(1) 任只要用这种方式，任何页面都可以访问b页面的数据，存在安全性问题</p><p>(2)只能发送get请求，不能发送post请求</p><p>(3)可能会被注入恶意代码，篡改页面内容</p></li><li><p>使用CROS方式</p><p>(1)允许浏览器向跨域资源服务器发送XMLHttpRequest请求</p><p>(2) 刚才的例子中，可以在b页面中添加响应头，允许a页面访问</p><p><code>　Access-Control-Allow-Origin:http://a.com</code></p><p>(3)然后a就可以用ajax获取b里面的数据了</p></li><li><p>webpack解决跨域</p><p>(1) webpack proxy </p><p>(2) 接受客户端发送的请求以后转发给其他服务器，目的是便于开发者在开发的模式下解决跨域问题</p><p>(3) 实现代理，必须有一个中间件服务器，webpack提供的中间件服务器webpack-dev-server只适用于开发阶段</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// ./webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br>  <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-comment">// host: &#x27;0.0.0.0&#x27;,</span><br>        <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">/* 开启热点 */</span><br>        <span class="hljs-attr">inline</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">/* 开启页面自动刷新 */</span><br>        <span class="hljs-attr">progress</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">/* 显示打包的进度 */</span><br>        <span class="hljs-attr">disableHostCheck</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// port:8080,</span><br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">watchOptions</span>: &#123;<br>            <span class="hljs-attr">aggregateTimeout</span>: <span class="hljs-number">300</span><br>        &#125;,<br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>                <span class="hljs-comment">// target: &#x27;http://100.64.34.171:8081&#x27;, /* 后台服务器地址 */</span><br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://127.0.0.1:8086&#x27;</span>,<br>                <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">ws</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>                 <span class="hljs-comment">/* pathRewrite: &#123;</span><br><span class="hljs-comment">                    &#x27;^/api&#x27;: &#x27;&#x27; // 这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&#x27;http://40.00.100.100:3002/user/add&#x27;，直接写‘/api/user/add’即可</span><br><span class="hljs-comment">                &#125;*/</span><br>            &#125;<br>        &#125;<br>    &#125;,<br></code></pre></div></td></tr></table></figure><ul><li>target:表示代理到的目标地址</li><li>pathWrite:默认情况下，我们在/api也会被写到url中，希望删除，需要配置</li><li>secure默认情况下不接受转发到https服务器上，如果需要，设为false</li><li>changeOrigin: 它是表示是否更新代理后请求的 headers 中的 host 地址</li></ul><p>(4)实现原理</p><ul><li><p>proxy实际上利用<code>http-proxy-middleware </code>这个中间件，实现请求转发给其他服务器</p></li><li><p>在开发阶段，本地的地址是<code>Http://loaclhost:3000</code>,该请求发送一个前缀带有/api标识的去向服务器发送请求，但是这个服务器只是将请求发送给另一个请求</p></li><li><p>在开发阶段，<code>webpack-dev-server</code>会自动启动一个本地开发服务器，</p></li><li><p>我们应用在开发阶段是独立运行在localhost的一个端口上的，而后端服务器又运行在另一个地址上，由于同源策略，会出现跨域</p></li><li><p>所以使用代理，【浏览器发送请求】—&gt; 【中间服务器】—-&gt;【服务器】</p></li><li><p>服务器和服务器之间是不会存在跨域资源问题</p></li></ul></li><li><p>设置了 Access-Control-Allow-Credentials和withCredentials为什么cookie还是没能成功跨域?</p><p>浏览器端要跨域</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210824111620.webp" alt="img"></p><p>服务器端要检查</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210824111712.webp" alt="img"></p><p>最重要的是<code>Access-Control-Allow-Origin</code>,标识允许哪个域的请求</p><p>(1) <code>Access-Control-Allow-Origin:*</code>设置*浏览器将不会发送cookies，即使设置了<code>withCredentials</code></p><div class="note note-secondary">            <p>因为这意味着把cookies开放给所有网站</p><p>假设当前是A网站,并且在cookie里写入了身份凭证 用户同时打开了B网站, 那么B网站给A网站的服务器发的所有请求都是以A用户的身份进行的, 这将导致CSRF问题</p>          </div><p><code>withCredentials</code>：表示<code>XHR</code>是否接收cookies和发送cookies</p><p>(2) <code>Access-Control-Allow-Origin:xxx</code>指定域</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zhilili/p/14738262.html">webpack(六）——webpack 解决跨域的原理</a></p><p><a href="https://www.jianshu.com/p/89a377c52b48">没错，就是Access-Control-Allow-Origin，跨域</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-04盒模型</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-04%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/csscss-04%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<ol><li><p>相同的代码，产生的不同的结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823210655.png" alt="image-20210823210653790"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">   <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.div1</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid deeppink;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>; // 默认是标准盒模型</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.div2</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid deeppink;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">            <span class="hljs-attribute">box-sizing</span>: border-box; // 设置盒模型是ie</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>标准盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;div2&quot;</span>&gt;</span>怪异盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><p>1.W3C的标准盒模型(标准盒子)</p><p>标准的盒子，设置的宽度就是内容的宽度，其他的padding、border、margin不在width的范围内</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823210439.png" alt="image-20210823210438565"></p><p>2.IE盒模型(怪异盒子)</p><p>怪异盒子，设置的宽度= content+padding+border （156 + 40 + 4）=200</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823211024.png" alt="image-20210823211023161"></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-Promise初学</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-Promise%E5%88%9D%E5%AD%A6/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-Promise%E5%88%9D%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<ol><li><p>promise对象是一个构造函数</p><ul><li><p>promise自己的方法，resolve、reject、all、race</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823201745.png" alt="image-20210823201737346"></p></li><li><p>promise原型方法，catch、then</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210823201901.png" alt="image-20210823201900854"></p></li></ul></li><li><p>new一个Promise对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// var p = new Promise()</span><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成&quot;</span>);<br>        resolve(<span class="hljs-string">&#x27;随便返回什么数据&#x27;</span>)  <span class="hljs-comment">// 并没有什么含义</span><br>    &#125;, <span class="hljs-number">2000</span>)<br>&#125;)  <span class="hljs-comment">//执行完成</span><br></code></pre></div></td></tr></table></figure><p>只是定义了p并没有调用，但是他还是执行了，所以需要把它包装到函数中</p><ul><li>resolve(‘参数’) ，参数供then方法使用</li><li>resolve(),表示Promise的状态是fullfilled</li><li>promise调用then的前提是promise的状态是fullfilled</li><li>只有promise调用then的时候，then里面的函数才会被推入到微任务中</li></ul></li><li><p>包装到一个函数中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 只是new，,没有调用，但是还是打印了结果，所以将Promise包装起来</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br>runAsync(); <span class="hljs-comment">//执行完成</span><br></code></pre></div></td></tr></table></figure></li><li><p>then方法使用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包装的函数会return一个Promise对象，可以在then拿到调用resolve()中参数</span><br><span class="hljs-comment"> */</span><br>runAsync().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">// 执行完成  </span><br>    <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 随便返回什么数据 </span><br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>自己封装回调函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 封装回调函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成&quot;</span>);<br>        callback(<span class="hljs-string">&quot;随便什么数据&quot;</span>)<br>    &#125;, <span class="hljs-number">2000</span>)<br><br>&#125;<br>runAsync(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">// 执行完成  </span><br>    <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 随便返回什么数据 </span><br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>promise简化层层回调</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简化简化层层回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成1&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据1&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成2&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据2&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync3</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成3&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据3&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br>runAsync1().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">//then方法中可以直接return Promise对象也可以直接return数据，在后面的then中可以拿到数据</span><br>    <span class="hljs-built_in">console</span>.log(data);<br>    <span class="hljs-keyword">return</span> runAsync2();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>    <span class="hljs-keyword">return</span> runAsync3();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;)<br><span class="hljs-comment">// 执行完成1</span><br><span class="hljs-comment">// 随便返回什么数据1</span><br><span class="hljs-comment">// 执行完成2</span><br><span class="hljs-comment">// 随便返回什么数据2</span><br><span class="hljs-comment">// 执行完成3</span><br><span class="hljs-comment">// 随便返回什么数据3</span><br><span class="hljs-comment">// 结束</span><br></code></pre></div></td></tr></table></figure></li><li><p>reject方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * reject</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumber</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">5</span>) &#123;<br>                resolve(num);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                reject(num + <span class="hljs-string">&quot;数据太大了&quot;</span>)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br>getNumber().then(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">// 3 成功</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败&#x27;</span>); <span class="hljs-comment">// 10数据太大了 失败</span><br>    &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>catch方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">getNumber().then(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(somedata);<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">//catch也可以捕捉then中的错误</span><br>        <span class="hljs-built_in">console</span>.log(data);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;失败&quot;</span>);<br>    &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>all方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * all方法，并行执行异步操作，最慢的执行完，在回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成1&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据1&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成2&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据2&#x27;</span>)<br>        &#125;, <span class="hljs-number">3000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync3</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成3&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据3&#x27;</span>)<br>        &#125;, <span class="hljs-number">4000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-built_in">Promise</span>.all([runAsync1(), runAsync2(), runAsync3()]).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br><span class="hljs-comment">// 执行完成1</span><br><span class="hljs-comment">// 执行完成2</span><br><span class="hljs-comment">// 执行完成3</span><br><span class="hljs-comment">// [ &#x27;随便返回什么数据1&#x27;, &#x27;随便返回什么数据2&#x27;, &#x27;随便返回什么数据3&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>race方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * race方法，谁跑的快，有一个完成就回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成1&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据1&#x27;</span>)<br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成2&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据2&#x27;</span>)<br>        &#125;, <span class="hljs-number">4000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAsync3</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行完成3&quot;</span>);<br>            resolve(<span class="hljs-string">&#x27;随便返回什么数据3&#x27;</span>)<br>        &#125;, <span class="hljs-number">8000</span>)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-built_in">Promise</span>.race([runAsync1(), runAsync2(), runAsync3()]).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br><span class="hljs-comment">// 执行完成1</span><br><span class="hljs-comment">// 随便返回什么数据1</span><br><span class="hljs-comment">// 执行完成2</span><br><span class="hljs-comment">// 执行完成3</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-灵魂3问</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-04%E7%81%B5%E9%AD%823%E9%97%AE/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-04%E7%81%B5%E9%AD%823%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<ol><li><p>js为什么是单线程</p><p>(1) js是单线程语言</p><p>(2) js的事件循环(Event Loop)是js的执行机制</p><div class="note note-secondary">            <p>想一个问题:</p><p>我有2个线程，线程1，线程2，如果js是多线程，那么他可以同时对一个dom进行操作，线程1删除了dom，而线程2编辑dom，同时下达2个会矛盾的操作，会导致浏览器的崩溃。</p>          </div></li><li><p>为什么需要异步</p><div class="note note-secondary">            <p>如果js没有异步，那只能依照顺序执行，如果上一段程序执行了很长时间，那么之后的代码就会阻塞，对于用户而言，阻塞就意味着页面的假死，会带来非常不好的用户体验。</p>          </div></li><li><p>单线程是怎么实现异步的</p><p>单线程通过事件循环实现异步，</p><p>(1)js的事件循环1 ，同步和异步</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>    &#125;,<span class="hljs-number">0</span>)<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br><span class="hljs-comment">// 1 3 2</span><br></code></pre></div></td></tr></table></figure><p>setTimeout里的代码，没有立即执行，而是延迟了一段时间才执行，这类代码我们叫做异步代码</p><p>这样可以总结出，js的一种分类方式就是同步和异步</p><p>在这种分类下，js的执行机制是：</p><ul><li>判断是同步还是异步，同步进入主线程，异步进入事件列表</li><li>异步任务在事件列表中注册函数，当满足触发条件，将异步任务推到事件队列</li><li>同步任务进入主线程会一直执行，等到主线程空闲会去检查事件队列中是否有任务，有任务就推入主线程执行</li></ul><p>(2) js的事件循环2 ，宏任务和微任务</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;定时器开始啦&#x27;</span>)<br> &#125;);<br> <br> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;马上执行for循环啦&#x27;</span>);<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>         i == <span class="hljs-number">99</span> &amp;&amp; resolve();<br>     &#125;<br> &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行then函数啦&#x27;</span>)<br> &#125;);<br> <br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;代码执行结束&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>按照同步和异步的想法，应该输出：</p><p>【马上执行for循环啦 — 代码执行结束 — 定时器开始啦 — 执行then函数啦】</p><p>但是实际的输出结果是：</p><p>【马上执行for循环啦 —代码执行结束—执行then函数啦—定时器开始啦】</p><p>实际上，js的分类是分成宏任务和微任务</p><ul><li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval（new Promise是宏任务）</li><li>micro-task(微任务)：Promise，process.nextTick (Promise then 是微任务)</li></ul><p>在这种分类下，js的执行机制是：</p><ul><li>执行宏任务，如果遇到微任务，把它放到微任务的【事件队列】中</li><li>当前宏任务执行完成后,会查看微任务的【事件队列】,并将里面全部的微任务依次执行完</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000012806637">10分钟理解JS引擎的执行机制</a></p><p><a href="https://www.cnblogs.com/jiasm/p/9482443.html">微任务、宏任务与Event-Loop</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>灵魂3问</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-回调函数</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是回调函数</p><p>回调函数就是把一个函数当做一个参数传给另一个函数，做为参数的这个函数就是回调函数。</p><p>写一个向人打招呼的函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1个人打招呼</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;&#125;</span> </span>name </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`hello,<span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(greet(<span class="hljs-string">&#x27;tom&#x27;</span>)); <span class="hljs-comment">//hello,tom</span><br></code></pre></div></td></tr></table></figure><p>如果向很多人打招呼可以采用map的方式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多人打招呼</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> persons = [<span class="hljs-string">&#x27;yom&#x27;</span>,<span class="hljs-string">&#x27;dom&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>,<span class="hljs-string">&#x27;jack&#x27;</span>]<br><span class="hljs-keyword">const</span> message = persons.map(greet);<br><span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">//[ &#x27;hello,yom&#x27;, &#x27;hello,dom&#x27;, &#x27;hello,com&#x27;, &#x27;hello,jack&#x27; ]</span><br></code></pre></div></td></tr></table></figure><p>此时的greet()就是回调函数，person.map()l利用一个函数做为参数，被称为高阶函数</p><p>回调函数做为高阶函数的参数，高阶函数调用回调函数来执行任务。</p></li><li><p>自己编写回调函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自己编写回调函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>array </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>callback </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">array, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> mapArray = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> array) &#123;<br>        mapArray.push(<br>            callback(item)<br>        )<br>    &#125;<br>    <span class="hljs-keyword">return</span> mapArray;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet1</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`hello,<span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br>&#125;<br><span class="hljs-keyword">const</span> person = [<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;dom&#x27;</span>];<br><span class="hljs-keyword">const</span> message = map(person,greet1);<br><span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// [ &#x27;hello,tom&#x27;, &#x27;hello,dom&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>同步回调</p><p>同步回调会发生阻塞，高阶函数在回调函数执行完成后，才会继续执行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map2</span>(<span class="hljs-params">array, callback</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;map is start&quot;</span>);<br>    <span class="hljs-keyword">const</span> mapArray = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> array) &#123;<br>        mapArray.push(<br>            callback(item)<br>        )<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;map completed&quot;</span>);<br>    <span class="hljs-keyword">return</span> mapArray;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet2</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;greet in callback&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`hello + <span class="hljs-subst">$&#123;name&#125;</span>`</span>;<br>&#125;<br><span class="hljs-keyword">const</span> person2 = [<span class="hljs-string">&#x27;tom&#x27;</span>];<br><span class="hljs-keyword">const</span> message2 = map2(person2, greet2);<br><span class="hljs-built_in">console</span>.log(message2);<br><span class="hljs-comment">// map is start</span><br><span class="hljs-comment">// greet in callback</span><br><span class="hljs-comment">// map completed</span><br><span class="hljs-comment">// [ &#x27;hello + tom&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>js原生的同步回调</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js原生回调forEach</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> person3 = [<span class="hljs-string">&#x27;Ana&#x27;</span>, <span class="hljs-string">&#x27;Elena&#x27;</span>];<br>person3.forEach(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">name</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// Ana  Elena</span><br>    &#125;<br>)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js原生回调find</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> person3 = [<span class="hljs-string">&#x27;Ana&#x27;</span>, <span class="hljs-string">&#x27;Elena&#x27;</span>];<br><span class="hljs-keyword">const</span> nameStartingA = person3.find(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">name</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> name[<span class="hljs-number">0</span>].toLowerCase() === <span class="hljs-string">&#x27;a&#x27;</span>;<br>    &#125;<br>)<br><span class="hljs-built_in">console</span>.log(nameStartingA); <span class="hljs-comment">// Ana</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js原生回调reduce</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> person3 = [<span class="hljs-string">&#x27;Ana&#x27;</span>, <span class="hljs-string">&#x27;Elena&#x27;</span>];<br><span class="hljs-keyword">const</span> countStartingA = person3.reduce(<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">count, name</span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> startA = name[<span class="hljs-number">0</span>].toLowerCase() === <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">return</span> startA ? count + <span class="hljs-number">1</span> : count;<br>    &#125;, <span class="hljs-number">0</span><br>)<br><span class="hljs-built_in">console</span>.log(countStartingA); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js原生回调replace</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> person4 = <span class="hljs-string">&#x27;Cristina&#x27;</span>;<br><span class="hljs-keyword">const</span> replace = person4.replace(<span class="hljs-regexp">/./g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">char</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> char.toLowerCase() === <span class="hljs-string">&#x27;i&#x27;</span> ? <span class="hljs-string">&#x27;1&#x27;</span> : char<br>&#125;)<br><span class="hljs-built_in">console</span>.log(person4); <span class="hljs-comment">//Cristina</span><br><span class="hljs-built_in">console</span>.log(replace); <span class="hljs-comment">//Cr1st1na</span><br></code></pre></div></td></tr></table></figure></li><li><p>异步回调是非阻塞的，无需等待回调函数的完成，高阶函数先完成其他事件再回调函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步回调</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">later</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;later&quot;</span>);<br>&#125;, <span class="hljs-number">2000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setTimeout completed&quot;</span>);<br><span class="hljs-comment">// setTimeout start</span><br><span class="hljs-comment">// setTimeout completed</span><br><span class="hljs-comment">// later</span><br></code></pre></div></td></tr></table></figure></li><li><p>js异步回调</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步回调计数器函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">later</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2秒之后执行&#x27;</span>);<br>&#125;, <span class="hljs-number">2000</span>)<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">repeat</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;每2秒执行一次&#x27;</span>);<br>&#125;, <span class="hljs-number">2000</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Dom的事件监听器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> myButton = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myButton&#x27;</span>);<br>myButton.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handler</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Button Clicked&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>异步回调和异步函数</p><p>在函数前面加上特定的关键字async，这就是一个异步函数</p></li><li><p>异步回调函数以高阶函数的非阻塞方式执行，异步函数在等待promise解析的时候会暂停执行，(会先执行同步代码，同步代码执行完，也就是说主线程空闲，才回去处理任务队列的事件)</p></li><li><p>可以把异步函数用作异步回调</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 异步函数，做回调函数</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchUserNames</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">// 异步函数</span><br>    <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">&#x27;https://api.github.com/users?per_page=5&#x27;</span>);<br>    <span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> resp.json();<br>    <span class="hljs-keyword">const</span> names = users.map(<span class="hljs-function">(<span class="hljs-params">&#123; login &#125;</span>) =&gt;</span> login);<br>    <span class="hljs-built_in">console</span>.log(names);<br>  &#125;<br> <span class="hljs-keyword">const</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;fetchUsersButton&#x27;</span>);<br> button.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, fetchUserNames); <span class="hljs-comment">// 异步回调函数</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>setTimeout(callback，0)</code> 执行 <code>callback</code> 时是同步还是异步的？(答案还有待思考)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 考题</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;异步还是同步&quot;</span>);<br> &#125;<br><span class="hljs-built_in">setTimeout</span>(callback,<span class="hljs-number">0</span>); <span class="hljs-comment">// 异步回调，无需等待callback执行，可以先执行后面的任务</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我先执行&quot;</span>);<br><span class="hljs-comment">//我先执行</span><br><span class="hljs-comment">// 异步还是同步</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000038869766">JavaScript中的回调函数看这篇就够了</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回调函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-跳台阶</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">输入：<br>2<br>返回值：<br>2<br></code></pre></div></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">输入：<br>7<br>返回值：<br>21<br></code></pre></div></td></tr></table></figure>          </div><ol><li><p>就是斐波那契数列，逆向思维，如果从n级台阶往下走，那么可能选择第n-1个台阶，也可能选择第n-2个台阶，所以<code>f(n) = f(n-1) + f(n-2)</code></p></li><li><p>初始化条件就是f(0) = f(1) =1;</p></li><li><p>所以这道题就变成了f(n) = f(n-1) + f(n-2),初始值f(0) =1 , f(1) =1, 求f(n)</p><p>(1) 递归</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpfloor</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> jumpfloor(n - <span class="hljs-number">1</span>) + jumpfloor(n - <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(jumpfloor(<span class="hljs-number">7</span>)); <span class="hljs-comment">//21 </span><br></code></pre></div></td></tr></table></figure><p>(2) 记忆化搜索</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 记忆化搜索:利用数组标记已经计算过的arr[n]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpfloor1</span>(<span class="hljs-params">n, arr = <span class="hljs-built_in">Array</span>(n + <span class="hljs-number">1</span>).fill(-<span class="hljs-number">1</span>)</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (arr[n] != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr[n];<br>    <span class="hljs-keyword">return</span> arr[n] = jumpfloor1(n - <span class="hljs-number">1</span>) + jumpfloor1(n - <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(jumpfloor1(<span class="hljs-number">7</span>)); <span class="hljs-comment">// 21 </span><br></code></pre></div></td></tr></table></figure><p>(3) 动态规划</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态规划:从下到上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpfloor2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>(n + <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>);<br>    arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (; i &lt;= n; ++i) &#123;<br>        arr[i] = arr[i - <span class="hljs-number">1</span>] + arr[i - <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(arr);<br>    <span class="hljs-keyword">return</span> arr[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-built_in">console</span>.log(jumpfloor2(<span class="hljs-number">7</span>)); <span class="hljs-comment">// 21</span><br></code></pre></div></td></tr></table></figure><p>(4) 继续优化</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 继续优化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jumpfloor3</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>, c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        c = a + b;<br>        a = b;<br>        b = c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-built_in">console</span>.log(jumpfloor3(<span class="hljs-number">7</span>)); <span class="hljs-comment">// 21 </span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>跳台阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-定时函数</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E5%AE%9A%E6%97%B6%E5%87%BD%E6%95%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/js%E7%AE%97%E6%B3%95mjs-%E5%AE%9A%E6%97%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>定时函数</p></li><li><p>输出四次helloworld，每次间隔3秒</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">repeat</span>(<span class="hljs-params">func, times, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...arg</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(...arg); <span class="hljs-comment">// =&gt;hello world</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; times; i++) &#123;<br>            <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res, rej</span>) </span>&#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    func.apply(<span class="hljs-built_in">this</span>, arg)<br>                    res()<br>                &#125;, wait);<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> repeatFunc = repeat(<span class="hljs-built_in">console</span>.log, <span class="hljs-number">4</span>, <span class="hljs-number">3000</span>);<br>repeatFunc(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>定时函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-立即执行函数</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p>声明式函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数的声明式写法，会导致变量提升</span><br><span class="hljs-comment"> */</span><br>foo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a + b); <span class="hljs-comment">// 3</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>表达式函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数的表达式写法,不会导致变量提升</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> foo1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a + b);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>立即执行函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 立即执行函数</span><br><span class="hljs-comment"> */</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo2</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a + b); <span class="hljs-comment">//3 </span><br>&#125;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></div></td></tr></table></figure></li><li><p>立即执行函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 立即执行函数</span><br><span class="hljs-comment"> */</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo3</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b); <span class="hljs-comment">// 5</span><br>&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li><strong>立即执行函数创建了一个独立的作用域，这个作用域里的变量外部访问不到，防止变量污染</strong></li><li><strong>闭包和私有数据</strong></li></ul>          </div></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jdWu-d/p/11587805.html">详解立即执行函数(function(){}()),(function(){})()</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>立即执行函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-箭头函数</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><p><strong>es5 函数有参数</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es5 函数有参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-built_in">console</span>.log(fn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 5</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>es5没有参数</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es5 函数没有参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-built_in">console</span>.log(fn2()); <span class="hljs-comment">// 3</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>es6有参数</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es6 函数有参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br><span class="hljs-built_in">console</span>.log(fn3(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 7</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>es6没有参数</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es6 函数没有参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> fn4 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> b = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-built_in">console</span>.log(fn4()); <span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>es5 this</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es5 this</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">getName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(person.getName()); <span class="hljs-comment">// tom</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>es6 this</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * es6 this</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> person1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">getName</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">this</span>.name <span class="hljs-comment">//方法的箭头函数，this指向window window对象正好有name属性，所以输出的是&#x27;&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(person1.getName()); <br></code></pre></div></td></tr></table></figure></li><li><p><strong>this指向</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">getAge</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">this</span>.birth; <span class="hljs-comment">// 1990</span><br>        <span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear() - <span class="hljs-built_in">this</span>.birth; <span class="hljs-comment">// this指向window或undefined</span><br>            <span class="hljs-comment">// return new Date().getFullYear() - b; // 得到值 1990</span><br>        &#125;;<br>        <span class="hljs-keyword">return</span> fn();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(obj.getAge()); <span class="hljs-comment">//NaN</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>箭头函数修改this的指向</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">getAge</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">this</span>.birth; <span class="hljs-comment">// 1990</span><br>        <span class="hljs-keyword">var</span> fn = <span class="hljs-function">(<span class="hljs-params">y</span>) =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear() - <span class="hljs-built_in">this</span>.birth; <span class="hljs-comment">//this指向obj1</span><br>        <span class="hljs-keyword">return</span> fn();<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(obj1.getAge()); <span class="hljs-comment">// 31</span><br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a></p><p><a href="https://blog.csdn.net/yangxiaodong88/article/details/80460332?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">=&gt; js 中箭头函数使用总结</a></p></li><li><p>箭头函数最常用的就是简化回调函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正常函数</span><br><span class="hljs-comment"> */</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 箭头函数</span><br><span class="hljs-comment"> */</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *正常函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>].sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 箭头函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br></code></pre></div></td></tr></table></figure></li><li><p>箭头函数和普通函数的区别</p><ul><li><p>语法简洁，清晰</p></li><li><p>箭头函数不会创建自己的this,它会捕获自己在<strong>定义时不是调用时</strong>所处的外层执行环境的this</p><p>箭头函数和普通函数都使用全局的变量值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;, <span class="hljs-number">2000</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;)<br>&#125;<br>fun1();<span class="hljs-comment">//undefined 浏览器环境下是global</span><br>fun2();<span class="hljs-comment">//undefined 浏览器环境下是global</span><br></code></pre></div></td></tr></table></figure><p>箭头函数的this使用的是他外层环境中的this，他继承的</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;, <span class="hljs-number">2000</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;)<br>&#125;<br>fun1.call(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span> &#125;);<span class="hljs-comment">//undefined 浏览器环境下是global</span><br>fun2.call(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span> &#125;);<span class="hljs-comment">//obj</span><br></code></pre></div></td></tr></table></figure><p>箭头函数的指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span>,<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;,<br>    <span class="hljs-attr">b</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>    &#125;<br>&#125;<br>obj.a(); <span class="hljs-comment">//obj</span><br>obj.b(); <span class="hljs-comment">// undefined 浏览器环境下是global</span><br></code></pre></div></td></tr></table></figure><p>解释：定义对象的括号是不能构成一个单独的执行环境的，还是看外部，外部是全部的环境</p></li><li><p>call、apply、bind不能改变this的指向</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> id = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">let</span> fun1 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.id);<br>&#125;<br>fun1(); <span class="hljs-comment">//undefined 浏览器环境下输出global</span><br>fun1.call(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span> &#125;);<span class="hljs-comment">//undefined //浏览器环境下输出global</span><br>fun1.apply(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span> &#125;);<span class="hljs-comment">//undefined // 浏览器环境下输出global</span><br>fun1.bind(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;obj&#x27;</span> &#125;)();<span class="hljs-comment">//undefined // 浏览器环境下输出global</span><br></code></pre></div></td></tr></table></figure></li><li><p>箭头函数不可以做构造函数</p><ul><li>构造函数的步骤：<ul><li>js创建一个对象</li><li>把函数中的this指向对象</li><li>执行构造函数中的语句</li><li>最终返回实例</li></ul></li></ul></li><li><p>箭头函数没有自己的this，它的this是继承的，所以箭头函数不能做构造函数</p></li><li><p>箭头函数没有自己的<strong>arguments</strong>，箭头函数访问的arguments也是外部的</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有自己的arguments</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> fun = <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(val);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//会报错</span><br>&#125;<br>fun(<span class="hljs-number">1111</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * arguments继承</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>val2 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params">val1, val2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> argout = <span class="hljs-built_in">arguments</span>;<br>    <span class="hljs-built_in">console</span>.log(argout);<br>    <span class="hljs-keyword">let</span> fun = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> argin = <span class="hljs-built_in">arguments</span>;<br>        <span class="hljs-built_in">console</span>.log(argin);<br>        <span class="hljs-built_in">console</span>.log(argin === argout);<br>    &#125;<br>    fun(); <span class="hljs-comment">//调用</span><br>&#125;<br>outer(<span class="hljs-number">111</span>, <span class="hljs-number">222</span>);<br><span class="hljs-comment">// [Arguments] &#123; &#x27;0&#x27;: 111, &#x27;1&#x27;: 222 &#125;</span><br><span class="hljs-comment">// [Arguments] &#123; &#x27;0&#x27;: 111, &#x27;1&#x27;: 222 &#125;</span><br><span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li><li><p>箭头函数没有原型<strong>prototype</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 无原型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> sayHi = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello world&quot;</span>);<br><br>&#125;<br><span class="hljs-built_in">console</span>.log(sayHi.prototype);<span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure></li><li><p>箭头函数不能用作Generator函数，不能使用yeild关键字</p></li></ul></li></ol><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/75337266">【知识点】ES6箭头函数、箭头函数与普通函数的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>箭头函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-分析执行顺序</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%88%86%E6%9E%90%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E5%88%86%E6%9E%90%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>await 等到的返回值，是一个非promise ,先输出await之后的代码，在执行微任务</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 经典面试题1</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;async1 start&quot;</span>);<span class="hljs-comment">// (2)</span><br>    <span class="hljs-keyword">await</span> async2(); <span class="hljs-comment">// 有问题，先执行返回函数，完成后，执行下一句，也就是 先输出promise2 在输出async1 end 但是输出结果是先 async1 end 在输出promise2</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;async1 end&quot;</span>);<span class="hljs-comment">//(6)</span><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;async2&quot;</span>); <span class="hljs-comment">//(3)</span><br>&#125;<br><span class="hljs-comment">// 开始执行任务</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;script start&quot;</span>); <span class="hljs-comment">//宏任务1  (1)</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setTimeout&quot;</span>); <span class="hljs-comment">// 宏任务2 (8))</span><br>&#125;, <span class="hljs-number">0</span>);<br><br>async1();<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise1&quot;</span>); <span class="hljs-comment">//(4)</span><br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;promise2&quot;</span>); <span class="hljs-comment">//微任务1 (7)</span><br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;script end&quot;</span>);<span class="hljs-comment">//(5)</span><br><span class="hljs-comment">// script start</span><br><span class="hljs-comment">// async1 start</span><br><span class="hljs-comment">// async2</span><br><span class="hljs-comment">// promise1</span><br><span class="hljs-comment">// script end</span><br><span class="hljs-comment">// async1 end</span><br><span class="hljs-comment">// promise2</span><br><span class="hljs-comment">// setTimeout</span><br></code></pre></div></td></tr></table></figure><ul><li>宏任务和微任务</li></ul><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821145548.png" alt="image-20210821145547150"></p><p>(1) 直接打印同步代码console.log(“script start”);2个函数声明没有调用，先不管</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821150131.png" alt="image-20210821150130940"></p><p>(2) 将setTimeout放入宏任务中，包裹的代码可以理解成宏任务2</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821150342.png" alt="image-20210821150342139"></p><p>(3) 调用async1，直接输出同步代码console.<strong>log</strong>(“async1 start”);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821150443.png" alt="image-20210821150442648"></p><p>(4) 遇到await从右向左执行，先执行async2输出 console.<strong>log</strong>(“async2”);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821150627.png" alt="image-20210821150626365"></p><p>(5) 阻塞async的执行，先执行async外的同步代码，遇到promise，直接执行同步代码console.<strong>log</strong>(“promise1”);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821150850.png" alt="image-20210821150849527"></p><p>(6) 运行到promise.then,发现这是一个微任务，加入当前宏任务的微任务队列中</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821151135.png" alt="image-20210821151135196"></p><p>(7) 继续执行同步代码console.<strong>log</strong>(“script end”);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821151234.png" alt="image-20210821151233656"></p><p>(8) 同步代码全部执行完成，回到async内部，await执行完成，执行await后面的代码 console.<strong>log</strong>(“async1 end”);</p><p>(9) 全部的宏任务1执行完成，在执行微任务，输出  console.<strong>log</strong>(“promise2”); </p><p>(10) 宏任务1和宏任务1中微任务全部完成，进行下一个宏任务，输出console.<strong>log</strong>(“setTimeout”);</p></li><li><p>await 等到的返回值，是一个promise ，先执行微任务，在执行await之后的语句</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 经典面试题2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>);<br>    <span class="hljs-keyword">await</span> async2();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2 start&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        resolve();<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2 promise&#x27;</span>);<br>    &#125;)<br>&#125;<br><span class="hljs-comment">//任务开始</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br>async1();<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>);<br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>);<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise3&#x27;</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>);<br><span class="hljs-comment">// script start</span><br><span class="hljs-comment">// async1 start  </span><br><span class="hljs-comment">// async2 start  </span><br><span class="hljs-comment">// async2 promise</span><br><span class="hljs-comment">// promise1      </span><br><span class="hljs-comment">// script end    </span><br><span class="hljs-comment">// promise2      </span><br><span class="hljs-comment">// promise3      </span><br><span class="hljs-comment">// async1 end    </span><br><span class="hljs-comment">// setTimeout</span><br></code></pre></div></td></tr></table></figure><p> (1)执行同步代码console.<strong>log</strong>(‘script start’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152136.png" alt="image-20210821152136066"></p><p>(2)遇到setTimeout放入下一个宏任务中</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152239.png" alt="image-20210821152238510"></p><p>(3)调用async1，直接输出同步代码console.<strong>log</strong>(‘async1 start’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152335.png" alt="image-20210821152334485"></p><p>(4)遇到await，执行async2，直接输出同步函数，  console.<strong>log</strong>(‘async2 start’);  console.<strong>log</strong>(‘async2 promise’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152535.png" alt="image-20210821152534821"></p><p>(5) 阻塞代码,执行async之外的同步代码 console.<strong>log</strong>(‘promise1’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152642.png" alt="image-20210821152641849"></p><p>(6) 遇到then，是微任务，放入微任务中console.<strong>log</strong>(‘promise2’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152731.png" alt="image-20210821152731144"></p><p>(7) 遇到then,是微任务，放到微任务中 console.<strong>log</strong>(‘promise3’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152839.png" alt="image-20210821152838479"></p><p>(8) 执行同步代码console.<strong>log</strong>(‘script end’);</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821152920.png" alt="image-20210821152919798"></p><p>(9) 所有同步代码完成，回到async中，但是此时await并没有执行完成，await等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果，那何时能拿到运算结果呢？回忆平时我们用promise，调用resolve后，何时能拿到运算结果？是不是需要在then的第一个参数里，才能拿到结果。所以这里的 await Promise.resolve() 就类似于<code>Promise.resolve(undefined).then((undefined) =&gt; &#123; &#125;)</code>把then的第一个回调参数 (undefined) =&gt; {} 推入微任务队列。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821153418.png" alt="image-20210821153417670"></p><p>(10) 执行微任务，输出  console.<strong>log</strong>(‘promise2’);</p><p>(11)执行微任务，输出 console.<strong>log</strong>(‘promise3’);</p><p>(12) 执行微任务，没什么内容</p><p>(13) 这时候，then执行完成，await async2()语句结束，后面的代码不再被阻塞，所以打印 console.<strong>log</strong>(‘async1 end’);</p><p>(14) 执行宏任务2console.<strong>log</strong>(‘setTimeout’);</p></li><li><p>await等待的不同处理</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * await 等待的是一个非promise 1 2 3 4 5 6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">await</span> async2()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;<br>async1();<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    resolve()<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * await等待的是一个promise 1 2 3 4 5 6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">await</span> async2()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        resolve();<br>    &#125;)<br>&#125;<br>async1();<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    resolve()<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br></code></pre></div></td></tr></table></figure></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210821161353.png" alt="image-20210821161352585"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html">什么是 Event Loop？</a></p><p><a href="https://zhuanlan.zhihu.com/p/25407758">Excuse me？这个前端面试在搞事！</a></p><p><a href="https://www.cnblogs.com/fundebug/p/10095355.html">8张图让你一步步看清 async/await 和 promise 的执行顺序</a></p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分析执行顺序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-执行顺序</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<ol><li><p>对async的理解，async必须返回一个promise对象，如果没有，它自己自动封装</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>async必定返回一个promise对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">123</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">123</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(fn1()) <span class="hljs-comment">// Promise &#123; 123 &#125;</span><br><span class="hljs-built_in">console</span>.log(fn2()) <span class="hljs-comment">// 123</span><br></code></pre></div></td></tr></table></figure></li><li><p>await function 执行顺序是从右向左</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从右向向左执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>) <span class="hljs-comment">// (1)</span><br>    <span class="hljs-keyword">await</span> async2()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>)  <span class="hljs-comment">// (4)</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>) <span class="hljs-comment">//(2)</span><br>&#125;<br>async1()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>)  <span class="hljs-comment">// (3)</span><br><span class="hljs-comment">// async1 start</span><br><span class="hljs-comment">// async2      </span><br><span class="hljs-comment">// script start</span><br><span class="hljs-comment">// async1 end  </span><br></code></pre></div></td></tr></table></figure></li><li><p>对js运行机制的理解</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Promise  // 2 3 5 4 1</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">executor</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br>        i ==<span class="hljs-number">9999</span> &amp;&amp; resolve();<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br><br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br> <span class="hljs-comment">// 2 3 5 4 1</span><br></code></pre></div></td></tr></table></figure></li><li><p>宏任务和微任务</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>))<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>  resolve()<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>) <span class="hljs-comment">//1 2 3 4</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>执行顺序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mjs-说输出</title>
    <link href="/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E8%AF%B4%E8%BE%93%E5%87%BA/"/>
    <url>/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/jsmjs-%E8%AF%B4%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 5 5 5 5 5</span><br>    &#125;, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 1秒后一次性输出</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正确</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 0 1 2 3 4</span><br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最简单的一个循环</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 0 1 2 3 4 </span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;, <span class="hljs-number">1000</span> * i) <span class="hljs-comment">// 每隔1秒输出一个5</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 闭包</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//每隔1秒输出0 1 2 3 4</span><br>        &#125;, i * <span class="hljs-number">1000</span>)<br>    &#125;)(i)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 内部没有对i保持引用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//每隔1秒输出5 5 5 5 5</span><br>        &#125;, i * <span class="hljs-number">1000</span>)<br>    &#125;)(i)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 立即执行函数-node环境会报错，浏览器下输出0 1 2 3 4</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>((<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(i);<br>    &#125;)(i), i * <span class="hljs-number">1000</span>);<br>  &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Promise  // 2 3 5 4 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">executor</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br>        i ==<span class="hljs-number">9999</span> &amp;&amp; resolve();<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br><br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br></code></pre></div></td></tr></table></figure><p>解释：</p><ol><li>涉及知识点，异步，作用域，闭包</li><li>setTimeout是异步执行的，每次循环都是执行setTimeout这个函数，函数里的function没有执行，而是被放入到任务队列，放了5次</li><li>1秒以后向任务队列添加一个任务，主线上的任务全部执行完（此时i=5）才会执行任务队列中的任务（被放了5次）</li><li>for语句的执行速度远远小于1秒,所以执行了5次之后，i的值是5，</li><li>1秒以后触发function函数，打印出5个5</li></ol><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> innerpro = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            resolve(<span class="hljs-number">1</span>);<br>        &#125;, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>        resolve(<span class="hljs-number">3</span>);<br>    &#125;);<br>    innerpro.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(res));<br>    resolve(<span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;pro&quot;</span>);<br>&#125;)<br>pro.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(res));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;end&quot;</span>);<br><span class="hljs-comment">// 2 pro end 3 4</span><br></code></pre></div></td></tr></table></figure><p>解释：<br>一个promise只能resolve一次，所以1不会打印出来</p>]]></content>
    
    
    <categories>
      
      <category>面试笔记</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>说输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-06复杂表格</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%A4%8D%E6%9D%82%E8%A1%A8%E6%A0%BC/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%A4%8D%E6%9D%82%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、获取表格数据"><a href="#一、获取表格数据" class="headerlink" title="一、获取表格数据"></a>一、获取表格数据</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.getList();<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">//获取表格数据</span><br>    <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.listLoading = <span class="hljs-literal">true</span> <span class="hljs-comment">// 正在加载</span><br>        getDragList(<span class="hljs-built_in">this</span>.listQuery).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">this</span>.list = response.data.items<br>            <span class="hljs-built_in">this</span>.total = response.data.total<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">this</span>.listLoading = <span class="hljs-literal">false</span> <span class="hljs-comment">//延迟加载</span><br>            &#125;, <span class="hljs-number">0.5</span> * <span class="hljs-number">1000</span>)<br>        &#125;)<br>    &#125;,<br></code></pre></div></td></tr></table></figure><h2 id="二、分页处理"><a href="#二、分页处理" class="headerlink" title="二、分页处理"></a>二、分页处理</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 设置每页显示多少行</span><br><span class="hljs-function"><span class="hljs-title">handleSizeChange</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.listQuery.limit = val <span class="hljs-comment">//点击每页多少条，修改limit的值</span><br>    <span class="hljs-built_in">this</span>.getList()<br>&#125;,<br><span class="hljs-comment">// 设置跳转第几页</span><br><span class="hljs-function"><span class="hljs-title">handleCurrentChange</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.listQuery.page = val <span class="hljs-comment">//点击页数，修改page的值</span><br>    <span class="hljs-built_in">this</span>.getList()<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="三、修改"><a href="#三、修改" class="headerlink" title="三、修改"></a>三、修改</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//编辑数据</span><br><span class="hljs-function"><span class="hljs-title">handleEdit</span>(<span class="hljs-params">row</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">this</span>.dialogTitle = <span class="hljs-string">&#x27;修改&#x27;</span><br>    <span class="hljs-built_in">this</span>.form = row<br>    <span class="hljs-built_in">this</span>.form.timestamp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(row.timestamp)<br>    <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.$refs.form.clearValidate()<br>    &#125;)<br>&#125;,<br><span class="hljs-comment">// 保存编辑</span><br><span class="hljs-function"><span class="hljs-title">saveEdit</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$refs.form.validate(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (valid) &#123;<br>            <span class="hljs-keyword">const</span> tempData = <span class="hljs-built_in">this</span>.form<br>            tempData.timestamp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(tempData.timestamp) <span class="hljs-comment">//时间戳</span><br>            updateArticle(tempData).then(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> index = <span class="hljs-built_in">this</span>.list.findIndex(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.id === <span class="hljs-built_in">this</span>.form.id) <span class="hljs-comment">//找到当前行id</span><br>                <span class="hljs-built_in">this</span>.list.splice(index, <span class="hljs-number">1</span>, <span class="hljs-built_in">this</span>.form) <span class="hljs-comment">// 假修改</span><br>                <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">false</span><br>                <span class="hljs-built_in">this</span>.$notify(&#123;<br>                    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>                    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Update Successfully&#x27;</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>                    <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span><br>                &#125;)<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="四、删除"><a href="#四、删除" class="headerlink" title="四、删除"></a>四、删除</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 删除数据</span><br><span class="hljs-function"><span class="hljs-title">delList</span>(<span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$notify(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span><br>    &#125;)<br>    <span class="hljs-built_in">this</span>.list.splice(index, <span class="hljs-number">1</span>)<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="五、新增"><a href="#五、新增" class="headerlink" title="五、新增"></a>五、新增</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 新增数据</span><br><span class="hljs-function"><span class="hljs-title">handleAdd</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.resetForm() <span class="hljs-comment">// 防止先点击修改在点击新增发生数据覆盖</span><br>    <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">this</span>.dialogTitle = <span class="hljs-string">&#x27;新增&#x27;</span><br>&#125;,<br><span class="hljs-comment">// 保存新增</span><br><span class="hljs-function"><span class="hljs-title">saveAdd</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.form.id = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1024</span> <span class="hljs-comment">// 创建id</span><br>    createArticle(<span class="hljs-built_in">this</span>.form).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.list.unshift(<span class="hljs-built_in">this</span>.form)<br>        <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">this</span>.$notify(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Created Successfully&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span><br>        &#125;)<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820144605.png" alt="image-20210820144557367"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820144830.png" alt="image-20210820144829930"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820144845.png" alt="image-20210820144844320"></p><h2 id="七、搜索"><a href="#七、搜索" class="headerlink" title="七、搜索"></a>七、搜索</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 搜索查询</span><br><span class="hljs-function"><span class="hljs-title">queryList</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.getList()<br>&#125;,<br></code></pre></div></td></tr></table></figure><ol><li><p>搜索内容和搜索按钮的绑定</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820145315.png" alt="image-20210820145314438"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820145338.png" alt="image-20210820145337049"></p></li></ol><h2 id="八、导出"><a href="#八、导出" class="headerlink" title="八、导出"></a>八、导出</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">            <span class="hljs-comment">// 导出</span><br><span class="hljs-function"><span class="hljs-title">exportsExcel</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../../vendor/Export2Excel&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">excel</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> tHeader = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;importance&#x27;</span>, <span class="hljs-string">&#x27;pageviews&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>]<br>        <span class="hljs-keyword">const</span> filterVal = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;importance&#x27;</span>, <span class="hljs-string">&#x27;pageviews&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>]<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-built_in">this</span>.formatJson(filterVal)<br>        excel.export_json_to_excel(&#123;<br>            <span class="hljs-attr">header</span>: tHeader,<br>            data,<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;table-list&#x27;</span><br>        &#125;)<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure><ol><li><p>安装依赖</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820151036.png" alt="image-20210820151035582"></p></li></ol><h2 id="九、对request的分析"><a href="#九、对request的分析" class="headerlink" title="九、对request的分析"></a>九、对request的分析</h2><ol><li>请求</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152314.png" alt="image-20210820152313931"></p><ol start="2"><li> axios的源码</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152018.png" alt="image-20210820152018015"></p><ol start="3"><li><p>回复</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152619.png" alt="image-20210820152618326"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152650.png" alt="image-20210820152649374"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152721.png" alt="image-20210820152714961"></p></li><li><p>axios源码</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210820152756.png" alt="image-20210820152755820"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[<a href="https://www.cnblogs.com/vickylinj/p/10889028.html">Vue]axios 发出请求的config</a></p><p><a href="https://blog.csdn.net/HD243608836/article/details/110954416">vue-element-admin的v-waves指令失效问题解决（与@click冲突导致水波纹失效）</a></p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-06动态表格</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、按照checkbox的顺序"><a href="#一、按照checkbox的顺序" class="headerlink" title="一、按照checkbox的顺序"></a>一、按照checkbox的顺序</h2><ol><li><p>表格绑定<code>formHead</code>数据</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-table-column v-for=&quot;fruit in formHead&quot; :key=&quot;fruit&quot; :label=&quot;fruit&quot;&gt;<br>    &lt;template slot-scope=&quot;scope&quot;&gt;<br>        &#123;&#123;scope.row[fruit]&#125;&#125;<br>    &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>监听checkbox的变化，设置formHead的数据</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">watch: &#123; <span class="hljs-comment">// 监听check的变化</span><br>    <span class="hljs-function"><span class="hljs-title">checkList</span>(<span class="hljs-params">valArr</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.formHead = <span class="hljs-built_in">this</span>.formTheadOptions.filter(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> valArr.indexOf(i) &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">this</span>.key = key + <span class="hljs-number">1</span> <span class="hljs-comment">// 保证表格每次都会被重新渲染</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、按照点击顺序"><a href="#二、按照点击顺序" class="headerlink" title="二、按照点击顺序"></a>二、按照点击顺序</h2><ol><li>表格和checkbox绑定同一个数据(数组)</li></ol><div class="note note-success">            <ul><li> <code>&lt;div style=&quot;margin:0 0 5px 20px&quot;&gt; // 上 右 下 左</code></li><li> <code>&lt;div style=&quot;margin:20px 10px&quot;&gt; 上下 左右</code></li><li> <code>&lt;div style=&quot;margin:20px 10px 5px&quot;&gt; 上 左右 下</code></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-06在线编辑表格</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E8%A1%A8%E6%A0%BC/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-06%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、查询表格数据"><a href="#一、查询表格数据" class="headerlink" title="一、查询表格数据"></a>一、查询表格数据</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//获取表格数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;data&#125; = <span class="hljs-keyword">await</span> getDragList(<span class="hljs-built_in">this</span>.listQuery);<br>    <span class="hljs-keyword">const</span> items = data.items<br>    <span class="hljs-built_in">this</span>.list = items.map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.$set(v, <span class="hljs-string">&#x27;edit&#x27;</span>, <span class="hljs-literal">false</span>) <span class="hljs-comment">// 每一项添加属性，编辑，用于按钮控制</span><br>        <span class="hljs-built_in">this</span>.$set(v, <span class="hljs-string">&#x27;originalTitle&#x27;</span>, v.title) <span class="hljs-comment">//两种效果都有get、set</span><br>        <span class="hljs-comment">// v.originalTitle = v.title  // 赋值每一项一个originalTitle属性</span><br>        <span class="hljs-keyword">return</span> v<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="二、添加响应式的属性"><a href="#二、添加响应式的属性" class="headerlink" title="二、添加响应式的属性"></a>二、添加响应式的属性</h2><div class="note note-success">            <ul><li> this.$set(v, ‘edit’, false)</li><li> this.$set(v, ‘originalTitle’, v.title)</li></ul>          </div><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210818141651.png" alt="image-20210818141643393"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210818142049.png" alt="image-20210818142048263"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210818142813.png" alt="image-20210818142812350"></p><h2 id="三、按钮控制思想"><a href="#三、按钮控制思想" class="headerlink" title="三、按钮控制思想"></a>三、按钮控制思想</h2><ol><li><p>edit按钮，默认edit是false，设置edit为true</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-button v-else type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;<br>           @click=&quot;scope.row.edit =! scope.row.edit&quot;&gt;Edit<br>&lt;/el-button&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>ok按钮，当edit是ture是展示，点击后，设置edit是false，并且，设置title是修改后的值，</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-button v-if=&quot;scope.row.edit&quot; type=&quot;success&quot; size=&quot;mini&quot; icon=&quot;el-icon-check&quot;<br>           @click=&quot;confirmEdit(scope.row)&quot;&gt;Ok<br>&lt;/el-button&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">confirmEdit</span>(<span class="hljs-params">row</span>)</span> &#123;<br>    row.edit = <span class="hljs-literal">false</span><br>    row.originalTitle = row.title <span class="hljs-comment">// 将当前值赋值给row</span><br>    <span class="hljs-built_in">this</span>.$message(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;修改成功&quot;</span><br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure></li><li><p>编辑行，当edit是true是展示</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-table-column label=&quot;Title&quot; min-width=&quot;300px&quot; align=&quot;center&quot;&gt;<br>    &lt;template slot-scope=&quot;scope&quot;&gt;<br>        &lt;template v-if=&quot;scope.row.edit&quot;&gt;<br>            &lt;el-input v-model=&quot;scope.row.title&quot; class=&quot;edit-input&quot;&gt;&lt;/el-input&gt;<br>            &lt;el-button type=&quot;warning&quot; size=&quot;mini&quot; class=&quot;el-btn&quot; icon=&quot;el-icon-refresh&quot;<br>                       @click=&quot;cancelEdit(scope.row)&quot;&gt;Cancel<br>            &lt;/el-button&gt;<br>        &lt;/template&gt;<br>        &lt;span v-else&gt;&#123;&#123;scope.row.title&#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>cancel按钮，设置edit是false，并且设置title等于原值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">cancelEdit</span>(<span class="hljs-params">row</span>)</span> &#123;<br>    row.edit = <span class="hljs-literal">false</span><br>    <span class="hljs-comment">//必须赋值，用户可能是在输入后，又退出，如果不赋值，就会显示成修改后的值</span><br>    row.title = row.originalTitle<br>    <span class="hljs-built_in">this</span>.$message(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;warning&quot;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;取消编辑&quot;</span><br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="三、展示"><a href="#三、展示" class="headerlink" title="三、展示"></a>三、展示</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210818142918.gif" alt="5"></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sei-cloud问题集锦</title>
    <link href="/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AEsei-cloud%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <url>/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AEsei-cloud%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<ol><li>问题1</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210819160005.png" alt="image-20210819155956925"></p><ul><li>检查依赖包，确实没有vue-router，怀疑拉取有问题，重新拉取，问题没有解决</li><li>删除<code>package-lock.json</code>重新拉取，问题没有解决</li><li>重新多次拉取，问题解决</li></ul><ol start="2"><li>问题2</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210901112526.png" alt="image-20210901112518529"></p><ul><li>重新拉取，解决</li></ul>]]></content>
    
    
    <categories>
      
      <category>实战项目</category>
      
      <category>研究生项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Problems</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin05-二级菜单</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin05-%E4%BA%8C%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin05-%E4%BA%8C%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h2 id="分类路由表"><a href="#分类路由表" class="headerlink" title="分类路由表"></a>分类路由表</h2><ol><li><p>将获取的路由表进行遍历，只有一级菜单，应该显示成<code>el-menu-item</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//一级菜单</span><br><span class="hljs-function"><span class="hljs-title">isMenu</span>(<span class="hljs-params">menuList = []</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> temp = menuList.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> item.children.length === <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-menu-item v-for=&quot;submenu in isMenu(routes)&quot; :key=&quot;submenu.path&quot; :index=&quot;submenu.path&quot;&gt;<br>    &lt;svg-icon :icon-class=&quot;submenu.meta.icon&quot;&gt;&lt;/svg-icon&gt;<br>    &lt;span slot=&quot;title&quot;&gt;&#123;&#123; submenu.meta.title &#125;&#125;&lt;/span&gt;<br>&lt;/el-menu-item&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>二级菜单，显示成<code>el-submenu</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//二级菜单</span><br><span class="hljs-function"><span class="hljs-title">isMulMenu</span>(<span class="hljs-params">menuList = []</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> temp = menuList.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item.children.length &gt; <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-submenu v-for=&quot;route in isMulMenu(routes)&quot; :key=&quot;route.path&quot; :index=&quot;route.path&quot;&gt;<br>    &lt;template slot=&quot;title&quot;&gt;<br>        &lt;svg-icon :icon-class=&quot;route.meta.icon&quot;&gt;&lt;/svg-icon&gt;<br>        &lt;span&gt;&#123;&#123; route.meta.title &#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>    &lt;el-menu-item v-for=&quot;submenu in route.children&quot; :key=&quot;submenu.path&quot; :index=&quot;submenu.path&quot;&gt;<br>        &lt;svg-icon :icon-class=&quot;submenu.meta.icon&quot;&gt;&lt;/svg-icon&gt;<br>        &lt;span slot=&quot;title&quot;&gt;&#123;&#123; submenu.meta.title &#125;&#125;&lt;/span&gt;<br>    &lt;/el-menu-item&gt;<br>&lt;/el-submenu&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>路由改造</p><ol><li><p>应该每个路由至少有一个<code>children</code></p></li><li><p>如果是一级路由，children指的就是自己</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/Layout&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/Dashboard&#x27;</span>),<br>        &#125;,<br>    ]<br>&#125;,<br></code></pre></div></td></tr></table></figure></li><li><p>如果是二级菜单，按照常规操作</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/table&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/table&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Table&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/components/Layout&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Table&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/static-table&#x27;</span>,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Status Table&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/table/statusTable&#x27;</span>),<br>            <span class="hljs-attr">meta</span>: &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Status Table&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>        &#125;,<br>        ]<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>Layout组件实现路由跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>    &lt;!--路由跳转--&gt;<br>    &lt;app-main&gt;&lt;/app-main&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import AppMain from &quot;./AppMain&quot;;<br>    export default &#123;<br>        name: &quot;Layout&quot;,<br>        components: &#123;AppMain&#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></div></td></tr></table></figure></li><li><p>比如<code>/dashboard</code>会指向<code>Layout</code>,<code>Layout</code>做了路由跳转，children页面会显示</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin05-排序表格</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin05-%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin05-%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="一、查询表格数据"><a href="#一、查询表格数据" class="headerlink" title="一、查询表格数据"></a>一、查询表格数据</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//获取表格数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;data&#125; = <span class="hljs-keyword">await</span> getDragList(<span class="hljs-built_in">this</span>.listQuery);<br>    <span class="hljs-built_in">this</span>.list = data.items<br>    <span class="hljs-built_in">this</span>.oldList = <span class="hljs-built_in">this</span>.list.map(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.id)<br>    <span class="hljs-built_in">this</span>.newList = <span class="hljs-built_in">this</span>.oldList.slice() <span class="hljs-comment">//拷贝一份</span><br>    <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setSort()<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="二、分页处理"><a href="#二、分页处理" class="headerlink" title="二、分页处理"></a>二、分页处理</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/vue-admin-template/article/list&#x27;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">response</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;page = <span class="hljs-number">1</span>, limit = <span class="hljs-number">20</span>&#125; = config.query<br>        <span class="hljs-keyword">const</span> pageList = List.filter(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// console.log(index) // index的值是0-99</span><br>            <span class="hljs-keyword">return</span> index &lt; limit * page &amp;&amp; index &gt;= limit * (page - <span class="hljs-number">1</span>) <span class="hljs-comment">//limit * page 总行数 分页</span><br>        &#125;)<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">20000</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">total</span>: List.length,<br>                <span class="hljs-attr">items</span>: pageList<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>limit是每天包含多少条，page是当前页，limit*page是总条数</li><li>返回是index&lt;总条数的值，比如：传入limit =10，page=1 那个返回值是0-9条数据</li><li>如果是多页查询，只有这一个条件会出错，比如，limit=10，page=2，那么会返回0-19条数据</li><li>但是本意返回第二页的10条数据，所以要再加一个条件，index&gt;=(page-1)*limit 那么会返回10-19页的数据</li></ul>          </div><h2 id="三、表格排序"><a href="#三、表格排序" class="headerlink" title="三、表格排序"></a>三、表格排序</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">setSort</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">this</span>.$refs.dragTable.$el.querySelectorAll(<span class="hljs-string">&#x27;.el-table__body-wrapper &gt; table &gt; tbody&#x27;</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">//得到所有行</span><br>    <span class="hljs-built_in">this</span>.sortable = Sortable.create(el, &#123;<br>        <span class="hljs-attr">ghostClass</span>: <span class="hljs-string">&#x27;sortable-ghost&#x27;</span>,<span class="hljs-comment">//样式</span><br>        <span class="hljs-attr">setData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dataTransfer</span>) </span>&#123; <span class="hljs-comment">// 兼容火狐</span><br>            dataTransfer.setData(<span class="hljs-string">&#x27;Text&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-attr">onEnd</span>: <span class="hljs-function"><span class="hljs-params">evt</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">// 删除旧行</span><br>            <span class="hljs-keyword">const</span> targetRow = <span class="hljs-built_in">this</span>.list.splice(evt.oldIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>            <span class="hljs-comment">// 复制新行</span><br>            <span class="hljs-built_in">this</span>.list.splice(evt.newIndex, <span class="hljs-number">0</span>, targetRow);<br>            <span class="hljs-comment">//展示数据的变化</span><br>            <span class="hljs-keyword">const</span> tempIndex = <span class="hljs-built_in">this</span>.newList.splice(evt.oldIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-built_in">this</span>.newList.splice(evt.newIndex, <span class="hljs-number">0</span>, tempIndex)<br>        &#125;<br>    &#125;)<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到所有行</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210817231104.png" alt="image-20210817231056263"></p><h2 id="四、展示"><a href="#四、展示" class="headerlink" title="四、展示"></a>四、展示</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210817231419.gif" alt="4"></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-04滑入动画</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-04%E6%BB%91%E5%85%A5%E5%8A%A8%E7%94%BB/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-04%E6%BB%91%E5%85%A5%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、改变el-main界面"><a href="#一、改变el-main界面" class="headerlink" title="一、改变el-main界面"></a>一、改变el-main界面</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816114747.png" alt="image-20210816114742657"></p><h2 id="二、封装一个AppMain组件"><a href="#二、封装一个AppMain组件" class="headerlink" title="二、封装一个AppMain组件"></a>二、封装一个AppMain组件</h2><ol><li><p>在<code>router-view</code>中加入动画</p></li><li><p>选择动画模式渐入渐出<code>mode=&quot;out-in&quot;</code> mode 只适用于一个transition内同标签的内容，比如都是button</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;transition name=&quot;on&quot; mode=&quot;out-in&quot;&gt;&lt;!--mode只适用于一个transition内的同标签切换--&gt;<br>    &lt;button v-if=&quot;show&quot; key=&quot;but1&quot;&gt;on&lt;/button&gt;<br>    &lt;button v-else key=&quot;but2&quot;&gt;off&lt;/button&gt;&lt;!--key为了防止只是修改内容不重新渲染--&gt;<br>  &lt;/transition&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>对动画的理解，过渡模式是建立在多组件切换模式的基础上的，也就是<code>动态组件的切换</code>,并且当被切换的元素是2个相同的标签（比如这里都是button），需要加key进行区分。</p></li><li><p>否则由于vue机制的原因，为了性能会使用同一个元素，也就是说你切换是不会换掉整个元素，而是替换元素中内容的值，所以需要添加key为了防止只修改内容而不重新渲染</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">//  AppMain.vue<br>&lt;template&gt;<br>    &lt;section class=&quot;app-main&quot;&gt;<br>        &lt;!--mode=&quot;out-in&quot;动画的渐入渐出模式--&gt;<br>        &lt;transition name=&quot;fade-transform&quot; mode=&quot;out-in&quot;&gt;<br>            &lt;!--两种方法都可以实现--&gt;<br>            &lt;router-view :key=&quot;key&quot;/&gt;<br>            &lt;!--但是防止只改变值，不重新渲染 加入key--&gt;<br>            &lt;!--&lt;router-view/&gt;--&gt;<br>        &lt;/transition&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816163101.gif" alt="3"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/lhyxq/p/9643619.html">Vue过渡mode属性踩坑</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-04网格布局</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-04%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-04%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="网格布局实现"><a href="#网格布局实现" class="headerlink" title="网格布局实现"></a>网格布局实现</h2><ol><li><p>ul的布局<code>flex</code>,并且设置换行<code>flex-wrap</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">ul &#123;<br>    <span class="hljs-attr">display</span>: flex;<br>    flex-wrap: wrap; <span class="hljs-comment">// 允许换行</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816114411.png" alt="image-20210816114402701"></p></li><li><p>li布局，设置弹性布局，设置内容上下左右居中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">ul li &#123;<br>    <span class="hljs-attr">width</span>: 120px;<br>    height: 120px;<br>    flex-shrink: <span class="hljs-number">0</span>; <span class="hljs-comment">// 防止被压缩</span><br>    border: 1px solid #f1f1f1;<br>    font-size: 30px;<br>    display: flex;<br>    align-items: center; <span class="hljs-comment">// 垂直居中</span><br>    justify-content: center; <span class="hljs-comment">// 水平居中</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>li中放div,包含图标和文字，设置div弹性布局，方向是垂直，上下左右居中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">.icons-li-box &#123;<br>    <span class="hljs-attr">display</span>: flex;<br>    flex-direction: column; <span class="hljs-comment">// 垂直分布图标和文字</span><br>    justify-content: center; <span class="hljs-comment">// 垂直居中 主轴居中</span><br>    align-items: center; <span class="hljs-comment">// 水平居中</span><br>    <span class="hljs-comment">/*white-space: nowrap;文本不会换行*/</span><br>    <span class="hljs-comment">/*text-overflow: ellipsis;显示省略符号来代表被修剪的文本*/</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816114545.png" alt="image-20210816114544285"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03router</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03Router/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03Router/</url>
    
    <content type="html"><![CDATA[<ol><li><p>push()方法的调用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;home&#x27;</span>) <span class="hljs-comment">// 跳转到home界面 字符串</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;home&#x27;</span>&#125;) <span class="hljs-comment">// 跳转到home界面 对象</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">userId</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;) <span class="hljs-comment">// 命名路由</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;register&#x27;</span>,<span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">plan</span>:private&#125;&#125;) <span class="hljs-comment">// 查询参数</span><br></code></pre></div></td></tr></table></figure></li><li><p>如果提供了path，param会被忽略，可以理解成<code>path---&gt;query</code>   <code>name---&gt;params</code></p></li><li><p>代替的是下面的这种写法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userId = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;userId&#125;</span>`</span>&#125;)  <span class="hljs-comment">// /user/123</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;userId&#125;) <span class="hljs-comment">// user/123</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-attr">params</span>:&#123;userId&#125;&#125;) <span class="hljs-comment">// /user params不生效</span><br></code></pre></div></td></tr></table></figure></li><li><p>路由的传参方式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-number">1</span>、手写完整的 path:<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">`/user/<span class="hljs-subst">$&#123;userId&#125;</span>`</span>&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.params.userId<br><span class="hljs-number">2</span>、用 params 传递：<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">userId</span>: <span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.params.userId<br> <br>    url 形式：url 不带参数，http:localhost:<span class="hljs-number">8080</span>/#/user<br><span class="hljs-number">3</span>、用 query 传递：<br> <br>    <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">userId</span>: <span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;);<br> <br>    获取参数：<span class="hljs-built_in">this</span>.$route.query.userId<br> <br>    url 形式：url 带参数，http:localhost:<span class="hljs-number">8080</span>/#/user?userId=<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><p><code>query</code> 相当于 <code>get</code>请求，页面跳转的时候可以在地址栏看到请求参数，<code>params</code> 相当于 <code>post</code>请求，参数不在地址栏中显示。</p><p>以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03路由拦截</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、分析permission-js"><a href="#一、分析permission-js" class="headerlink" title="一、分析permission.js"></a>一、分析permission.js</h2><ol><li><p>分析导入文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> NProgress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span> <span class="hljs-comment">// progress bar 进度条插件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="hljs-comment">// progress bar style 进度条样式</span><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">// get token from cookie 拿到token</span><br><span class="hljs-keyword">import</span> getPageTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/get-page-title&#x27;</span> <span class="hljs-comment">// 更改页面title</span><br></code></pre></div></td></tr></table></figure></li><li><p>路由拦截逻辑</p><ul><li><p>判断是否有token,有进行后续操作</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (hasToken) &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>如果有token，说明用户已经登录，如果用户要跳转去login，一律跳转到home界面</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123; <span class="hljs-comment">// 在登录的情况下，关闭了标签页，再次进入可直接进入到home界面，无需登录</span><br>      <span class="hljs-comment">// if is logged in, redirect to the home page</span><br>      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br>      NProgress.done()<br>  &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果用户输入其他页面的地址，就需要判断权限</p><ul><li><p>获取用户信息，如果有用户信息，放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hasGetUserInfo = store.getters.name<br>     <span class="hljs-keyword">if</span> (hasGetUserInfo) &#123; <span class="hljs-comment">// 如果用户name存在state中，放行</span><br>         next()<br>     &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>没有用户信息，获取用户信息，如果成功，放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">// 获取用户信息之后，放行</span><br>                   <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)<br>                   next()<br>               &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果没有成功，重置Token，跳转到login</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">catch</span> (error) &#123;<br>                    <span class="hljs-comment">// remove token and go to login page to re-login</span><br>                    <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)<br>                    Message.error(error || <span class="hljs-string">&#x27;Has Error&#x27;</span>)<br>                    next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>                    NProgress.done()<br>                &#125;<br>            &#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li><li><p>没有token，查看是否在白名单里,如果在白名单里，放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* has no token*/</span> <span class="hljs-comment">// 如果没登录，查看用户去的地方在不在白名单</span><br>        <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 白名单中是不需要登录就可以访问的界面</span><br>            <span class="hljs-comment">// in the free login whitelist, go directly</span><br>            next()<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>如果没有在白名单里，一律跳转到登录页面</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 既没有token又没在白名单，直接定位到login界面</span><br>            next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>            NProgress.done()<br>        &#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03动态菜单栏</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E5%8A%A8%E6%80%81%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E5%8A%A8%E6%80%81%E8%8F%9C%E5%8D%95%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、得到路由表"><a href="#一、得到路由表" class="headerlink" title="一、得到路由表"></a>一、得到路由表</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">routes</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">// 得到路由表</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$router.options.routes[<span class="hljs-number">2</span>].children;<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="二、循环路由表"><a href="#二、循环路由表" class="headerlink" title="二、循环路由表"></a>二、循环路由表</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-menu-item v-for=&quot;route in routes&quot; :key=&quot;route.path&quot; :index=&quot;route.path&quot;&gt;<br>  &lt;svg-icon :icon-class=&quot;route.meta.icon&quot;&gt;&lt;/svg-icon&gt;<br>  &lt;span slot=&quot;title&quot;&gt;&#123;&#123; route.meta.title &#125;&#125;&lt;/span&gt;<br>&lt;/el-menu-item&gt;<br></code></pre></div></td></tr></table></figure><h2 id="三、实现刷新时，高亮不变"><a href="#三、实现刷新时，高亮不变" class="headerlink" title="三、实现刷新时，高亮不变"></a>三、实现刷新时，高亮不变</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">activeMenu</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">//页面刷新后，还是高亮选择的菜单项</span><br>  <span class="hljs-keyword">const</span> route = <span class="hljs-built_in">this</span>.$route;<br>  <span class="hljs-keyword">const</span> &#123; meta, path &#125; = route;<br>  <span class="hljs-keyword">return</span> path;<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-menu<br>  class=&quot;el-menu-vertical-demo&quot;<br>  background-color=&quot;#304156&quot;<br>  text-color=&quot;#BFCBD9&quot;<br>  router<br>  :default-active=&quot;activeMenu&quot;<br>  active-text-color=&quot;#409EFF&quot;<br>&gt;<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li> this.$router:我们可以在任何组件内，通过 this.$router访问路由器</li><li> this.$route:可以通过 this.$route访问当前路由</li></ul>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u014395524/article/details/88194842">Vue 中 this.$router 与 this.$route 的区别 以及 push() 方法</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-03退出登录</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-03%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、退出"><a href="#一、退出" class="headerlink" title="一、退出"></a>一、退出</h2><ol><li><p>先发出退出请求</p></li><li><p>退出时，清空cookie</p></li><li><p>退出时，重置路由表</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params">&#123; commit, state &#125;</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        logout(state.token).then(<span class="hljs-function">() =&gt;</span> &#123;<br>            removeToken(); <span class="hljs-comment">//  移出token</span><br>            resetRouer(); <span class="hljs-comment">// 重置路由表</span><br>            commit(<span class="hljs-string">&#x27;RESET_STATE&#x27;</span>);<br>            resolve();<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>            reject(error);<br>        &#125;)<br>    &#125;)<br>&#125;,<br></code></pre></div></td></tr></table></figure></li><li><p>完成后，跳转</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;user/logout&quot;</span>);<br>  <span class="hljs-comment">// this.$router.push(&quot;/&quot;);</span><br>  <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.$route.fullPath&#125;</span>`</span>);<br>&#125;,<br></code></pre></div></td></tr></table></figure></li><li><p>展示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816162746.gif" alt="2"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-02实现mockjs</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-02%E5%AE%9E%E7%8E%B0mockjs/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-02%E5%AE%9E%E7%8E%B0mockjs/</url>
    
    <content type="html"><![CDATA[<h2 id="一、在根目录下新建mock文件夹"><a href="#一、在根目录下新建mock文件夹" class="headerlink" title="一、在根目录下新建mock文件夹"></a>一、在根目录下新建mock文件夹</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811181345.png" alt="image-20210811181344216"></p><h2 id="二、模块分类"><a href="#二、模块分类" class="headerlink" title="二、模块分类"></a>二、模块分类</h2><p>├── mock                      // mock 模拟数据 与src同级<br>│   ├── index.js              // 数据总入口<br>│   ├── mock-server.js        // 数据服务层<br>│   ├── table.js              // 数据块</p><h2 id="三、分析-mock-server-js"><a href="#三、分析-mock-server-js" class="headerlink" title="三、分析 mock-server.js"></a>三、分析 mock-server.js</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> chokidar = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chokidar&#x27;</span>) <span class="hljs-comment">// 监听文件的变化</span><br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>) <span class="hljs-comment">// j解析http请求</span><br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chalk&#x27;</span>) <span class="hljs-comment">// 颜色插件</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>) <span class="hljs-comment">// 模块提供了一些用于处理文件路径的小工具</span><br><span class="hljs-keyword">const</span> Mock = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mockjs&#x27;</span>)<br><span class="hljs-comment">// process.cwd() 方法返回 Node.js 进程的当前工作目录</span><br><span class="hljs-comment">// path.join(path1，path2，path3.......)将路径片段使用特定的分隔符（window：\）连接起来形成路径，并规范化生成的路径</span><br><span class="hljs-keyword">const</span> mockDir = path.join(process.cwd(), <span class="hljs-string">&#x27;mock&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ol><li><p>路由的批量注册</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registerRoutes</span>(<span class="hljs-params">app</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> mockLastIndex<br>    <span class="hljs-keyword">const</span> &#123; mocks &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index.js&#x27;</span>)<br>    <span class="hljs-keyword">const</span> mocksForServer = mocks.map(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> responseFake(route.url, route.type, route.response)<br>    &#125;)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> mock <span class="hljs-keyword">of</span> mocksForServer) &#123;<br>      app[mock.type](mock.url, mock.response)<br>      mockLastIndex = app._router.stack.length<br>    &#125;<br>    <span class="hljs-keyword">const</span> mockRoutesLength = <span class="hljs-built_in">Object</span>.keys(mocksForServer).length<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">mockRoutesLength</span>: mockRoutesLength,<br>      <span class="hljs-attr">mockStartIndex</span>: mockLastIndex - mockRoutesLength<br>    &#125;<br>  &#125;<br><span class="hljs-comment">//删除路由</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unregisterRoutes</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">require</span>.cache).forEach(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (i.includes(mockDir)) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">require</span>.cache[<span class="hljs-built_in">require</span>.resolve(i)]<br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>返回对应的请求值，针对中间件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> responseFake = <span class="hljs-function">(<span class="hljs-params">url, type, respond</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">url</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.VUE_APP_BASE_API&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>),<br>     <span class="hljs-attr">type</span>: type || <span class="hljs-string">&#x27;get&#x27;</span>,<br>     <span class="hljs-function"><span class="hljs-title">response</span>(<span class="hljs-params">req, res</span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;request invoke:&#x27;</span> + req.path)<br>       res.json(Mock.mock(respond <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span> ? respond(req, res) : respond))<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>实现步骤</p><p>├──vue.config.js配置devServer</p><p> <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811183213.png" alt="image-20210811183212659"></p><p>​    ├──mock文件中配置mock-server.js和index.js</p><p>​            ├──main.js配置（暂时没分析出作用）<img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811183329.png" alt="image-20210811183328460"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_41597258/article/details/86534076">【Vue】Vue-cli之Mock.js 模拟数据实现及构建</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-02vue文件配置</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-02vue%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-02vue%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、端口的配置"><a href="#一、端口的配置" class="headerlink" title="一、端口的配置"></a>一、端口的配置</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> port = process.env.port || process.env.npm_config_port || <span class="hljs-number">9528</span> <span class="hljs-comment">// process.env.port 环境变量的端口，环境变量要是设置了端口，就用环境变量的</span><br><br></code></pre></div></td></tr></table></figure><p>在根目录文件夹下创建3个文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-comment">// .env.development</span><br>NODE_ENV = production<br><br># just a flag<br>ENV = <span class="hljs-string">&#x27;staging&#x27;</span><br><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/stage-api&#x27;</span><br>#port<br>port = <span class="hljs-number">8088</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JS"><span class="hljs-comment">//.env.production</span><br># just a flag<br>ENV = <span class="hljs-string">&#x27;production&#x27;</span><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//.env.staging</span><br># just a flag<br>ENV = <span class="hljs-string">&#x27;production&#x27;</span><br><br># base api<br>VUE_APP_BASE_API = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li> 当我们使用<code>npm run dev</code>的时候环境变量使用的是.env.development 中的配置</li><li> 使用<code>npm run build</code> 的时候使用的是.env.production中的配置</li></ul>          </div><h2 id="二、测试："><a href="#二、测试：" class="headerlink" title="二、测试："></a>二、测试：</h2><p>如果在环境变量中配置了端口，那么就会使用配置的端口(本人配置的8088)，如果没有配置，就使用默认的赋值（本人配置的9528）</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811180059.png" alt="image-20210811180051771"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210811180115.png" alt="image-20210811180115129"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/zcy_csdn123/article/details/100736846">VUE 环境变量 process process.env</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-01权限控制</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="（vue-element-admin）"><a href="#（vue-element-admin）" class="headerlink" title="（vue-element-admin）"></a>（vue-element-admin）</h2><h2 id="一、登录成功，进行路由拦截"><a href="#一、登录成功，进行路由拦截" class="headerlink" title="一、登录成功，进行路由拦截"></a>一、登录成功，进行路由拦截</h2><ol><li><p>用户登录成功后，在全局钩子router.brforeEach中拦截路由，实现获取用户信息和动态显示菜单</p><ul><li><p>判断是否有token，有token，如果是登录页直接放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>   <span class="hljs-comment">// if is logged in, redirect to the home page</span><br>   next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)<br>   NProgress.done() <span class="hljs-comment">// hack: https://github.com/PanJiaChen/vue-element-admin/pull/2939</span><br> &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>不是登录页，进行判断，是否有角色，有角色，直接放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// determine whether the user has obtained his permission roles through getInfo</span><br>      <span class="hljs-keyword">const</span> hasRoles = store.getters.roles &amp;&amp; store.getters.roles.length &gt; <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> (hasRoles) &#123;<br>        next()<br>      &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>没有角色，去获取用户信息，拿到角色信息</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// get user info</span><br>          <span class="hljs-comment">// note: roles must be a object array! such as: [&#x27;admin&#x27;] or ,[&#x27;developer&#x27;,&#x27;editor&#x27;]</span><br>          <span class="hljs-keyword">const</span> &#123; roles &#125; = <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li><p>获取用户信息,获得用户的角色、姓名、头像、介绍</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params">&#123;commit, state&#125;</span>)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>     getInfo(state.token).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>       <span class="hljs-keyword">const</span> &#123;data&#125; = response<br>       <br>       <span class="hljs-keyword">if</span> (!data) &#123;<br>         reject(<span class="hljs-string">&#x27;Verification failed, please Login again.&#x27;</span>)<br>       &#125;<br>       <br>       <span class="hljs-keyword">const</span> &#123;roles, name, avatar, introduction&#125; = data<br>       <br>       <span class="hljs-comment">// roles must be a non-empty array</span><br>       <span class="hljs-keyword">if</span> (!roles || roles.length &lt;= <span class="hljs-number">0</span>) &#123;<br>         reject(<span class="hljs-string">&#x27;getInfo: roles must be a non-null array!&#x27;</span>)<br>       &#125;<br>       <br>       commit(<span class="hljs-string">&#x27;SET_ROLES&#x27;</span>, roles)<br>       commit(<span class="hljs-string">&#x27;SET_NAME&#x27;</span>, name)<br>       commit(<span class="hljs-string">&#x27;SET_AVATAR&#x27;</span>, avatar)<br>       commit(<span class="hljs-string">&#x27;SET_INTRODUCTION&#x27;</span>, introduction)<br>       resolve(data)<br>     &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>       reject(error)<br>     &#125;)<br>   &#125;)<br> &#125;,<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>根据角色生成路由表</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// generate accessible routes map based on roles</span><br><span class="hljs-keyword">const</span> accessRoutes = <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;permission/generateRoutes&#x27;</span>, roles)<br></code></pre></div></td></tr></table></figure><ul><li><p>判断角色是admin，路由表就是所有动态加载的路由</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (roles.includes(<span class="hljs-string">&#x27;admin&#x27;</span>)) &#123;<br>      accessedRoutes = asyncRoutes || []<br>    &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>如果角色是其他，就要进行过滤</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>       accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)<br>     &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>根据角色过滤路由</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterAsyncRoutes</span>(<span class="hljs-params">routes, roles</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> res = []<br><br>  routes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> tmp = &#123; ...route &#125;<br>    <span class="hljs-keyword">if</span> (hasPermission(roles, tmp)) &#123;<br>      <span class="hljs-keyword">if</span> (tmp.children) &#123;<br>        tmp.children = filterAsyncRoutes(tmp.children, roles)<br>      &#125;<br>      res.push(tmp)<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>判断权限的函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasPermission</span>(<span class="hljs-params">roles, route</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;<br>    <span class="hljs-keyword">return</span> roles.some(<span class="hljs-function"><span class="hljs-params">role</span> =&gt;</span> route.meta.roles.includes(role))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">/* 如果没有设置meta含义是界面没有权限，所有人都可以访问*/</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li><li><p>动态添加路由</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// dynamically add accessible routes</span><br>router.addRoutes(accessRoutes)<br></code></pre></div></td></tr></table></figure></li><li><p>进行放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>如果没有token，查看是否在免登录的白名单,如果在，放行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-comment">// in the free login whitelist, go directly</span><br>  next()<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>没有在白名单，重定向到登录页</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// other pages that do not have permission to access are redirected to the login page.</span><br>  next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>  NProgress.done()<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="二、侧边栏"><a href="#二、侧边栏" class="headerlink" title="二、侧边栏"></a>二、侧边栏</h2><ol><li><p>根据生成的路由表，v-for循环出菜单</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-menu<br>  :default-active=&quot;activeMenu&quot;<br>  :collapse=&quot;isCollapse&quot;<br>  :background-color=&quot;variables.menuBg&quot;<br>  :text-color=&quot;variables.menuText&quot;<br>  :unique-opened=&quot;false&quot;<br>  :active-text-color=&quot;variables.menuActiveText&quot;<br>  :collapse-transition=&quot;false&quot;<br>  mode=&quot;vertical&quot;<br>&gt;<br>  &lt;sidebar-item v-for=&quot;route in permission_routes&quot; :key=&quot;route.path&quot; :item=&quot;route&quot; :base-path=&quot;route.path&quot;/&gt;<br>&lt;/el-menu&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>递归组件，实现下拉菜单的嵌套</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;el-submenu v-else ref=&quot;subMenu&quot; :index=&quot;resolvePath(item.path)&quot; popper-append-to-body&gt;<br>  &lt;template slot=&quot;title&quot;&gt;<br>    &lt;item v-if=&quot;item.meta&quot; :icon=&quot;item.meta &amp;&amp; item.meta.icon&quot; :title=&quot;item.meta.title&quot; /&gt;<br>  &lt;/template&gt;<br>  &lt;sidebar-item<br>    v-for=&quot;child in item.children&quot;<br>    :key=&quot;child.path&quot;<br>    :is-nest=&quot;true&quot;<br>    :item=&quot;child&quot;<br>    :base-path=&quot;resolvePath(child.path)&quot;<br>    class=&quot;nest-menu&quot;<br>  /&gt;<br>&lt;/el-submenu&gt;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="三、路由挂载"><a href="#三、路由挂载" class="headerlink" title="三、路由挂载"></a>三、路由挂载</h2></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210809171503.png" alt="image-20210809171455407"></p><h2 id="四、路由格式包含菜单需要的信息"><a href="#四、路由格式包含菜单需要的信息" class="headerlink" title="四、路由格式包含菜单需要的信息"></a>四、路由格式包含菜单需要的信息</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210809171728.png"></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-01登录逻辑</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h2 id="（vue-element-admin）"><a href="#（vue-element-admin）" class="headerlink" title="（vue-element-admin）"></a>（vue-element-admin）</h2><h2 id="一、登录界面的login发请求"><a href="#一、登录界面的login发请求" class="headerlink" title="一、登录界面的login发请求"></a>一、登录界面的login发请求</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">handleLogin</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs.loginForm.validate(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (valid) &#123;<br>      <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span><br>      <span class="hljs-comment">// 提交到store的action方法中</span><br>      <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;user/login&#x27;</span>, <span class="hljs-built_in">this</span>.loginForm)<br>        .then(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>: <span class="hljs-built_in">this</span>.redirect || <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">query</span>: <span class="hljs-built_in">this</span>.otherQuery&#125;)<br>          <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span><br>        &#125;)<br>        .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span><br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error submit!!&#x27;</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;)<br>&#125;,<br>    <br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li><p> this.$store.dispatch(‘user/login’, this.loginForm)</p></li><li><p> action中的方法是login，但是它提交的方法名是’user/login’</p></li><li><p> 因为在store的index.js中做了相关配置</p></li></ul>          </div><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// https://webpack.js.org/guides/dependency-management/#requirecontext</span><br><span class="hljs-keyword">const</span> modulesFiles = <span class="hljs-built_in">require</span>.context(<span class="hljs-string">&#x27;./modules&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-regexp">/\.js$/</span>)<br><br><span class="hljs-comment">// you do not need `import app from &#x27;./modules/app&#x27;`</span><br><span class="hljs-comment">// it will auto require all vuex module from modules file</span><br><span class="hljs-keyword">const</span> modules = modulesFiles.keys().reduce(<span class="hljs-function">(<span class="hljs-params">modules, modulePath</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span><br><span class="hljs-comment">/* \w 匹配包括下划线的任何单词字符。等价于&#x27;[A-Za-z0-9_]&#x27; */</span><br>  <span class="hljs-keyword">const</span> moduleName = modulePath.replace(<span class="hljs-regexp">/^\.\/(.*)\.\w+$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>)<br>  <span class="hljs-comment">/*   console.log(moduleName) //app errorLog permission settings tagsView user */</span><br>  <span class="hljs-keyword">const</span> value = modulesFiles(modulePath)<br>  modules[moduleName] = value.default<br>  <span class="hljs-keyword">return</span> modules<br>&#125;, &#123;&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="二、请求被提交到store的action方法中"><a href="#二、请求被提交到store的action方法中" class="headerlink" title="二、请求被提交到store的action方法中"></a>二、请求被提交到store的action方法中</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-comment">// user login</span><br>    <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123;commit&#125;, userInfo</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;username, password&#125; = userInfo<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">/*  api中的login，我的理解上相当于后台的controller层 */</span><br>        login(&#123;<span class="hljs-attr">username</span>: username.trim(), <span class="hljs-attr">password</span>: password&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123;data&#125; = response<br>          <span class="hljs-comment">/* response中返回数据 更改state中的数据 */</span><br>          commit(<span class="hljs-string">&#x27;SET_TOKEN&#x27;</span>, data.token)<br>          <span class="hljs-comment">/* token保存到cookie中 */</span><br>          setToken(data.token)<br>          <span class="hljs-comment">/* 回调函数 */</span><br>          resolve()<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>          reject(error)<br>        &#125;)<br>      &#125;)<br>    &#125;,<br></code></pre></div></td></tr></table></figure><h2 id="三、action方法转到api请求中"><a href="#三、action方法转到api请求中" class="headerlink" title="三、action方法转到api请求中"></a>三、action方法转到api请求中</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/vue-element-admin/user/login&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四、api请求根据地址找到mock"><a href="#四、api请求根据地址找到mock" class="headerlink" title="四、api请求根据地址找到mock"></a>四、api请求根据地址找到mock</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/vue-element-admin/user/login&#x27;</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">response</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;username&#125; = config.body<br>    <span class="hljs-keyword">const</span> token = tokens[username]<br><br>    <span class="hljs-comment">// mock error</span><br>    <span class="hljs-keyword">if</span> (!token) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">60204</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Account and password are incorrect.&#x27;</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/*返回数据*/</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">20000</span>,<br>      <span class="hljs-attr">data</span>: token<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li><p>this.$store.dispatch()与this.$store.commit()只是存取的方式不同</p></li><li><p>两个方法都是传值给vuex的mutation改变state中的值</p></li><li><p>this.$store.dispatch() 异步操作 写法：<code>this.$store.dispatch(‘action方法名’,值)</code></p></li><li><p>this.$store.commit() 同步操作  写法：<code>this.$store.commit(‘mutations方法名’,值)</code></p></li><li><p>commit: 同步操作</p><ul><li>存储 <code>this.$store.commit(&#39;changeValue&#39;,name)</code></li><li>取值 <code>this.$store.state.changeValue</code></li></ul></li><li><p>dispatch: 异步操作</p><ul><li>存储 <code>this.$store.dispatch(&#39;getlists&#39;,name)</code></li><li>取值 <code>this.$store.getters.getlists</code></li></ul></li></ul>          </div><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210816162908.gif" alt="1"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_44317018/article/details/105784086">vuex中 this.$store.dispatch() 与 this.$store.commit()方法的区别</a></p><p><a href="https://blog.csdn.net/weixin_42554191/article/details/105741120">vuex里面的this.$store.dispatch方法</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-01创建项目</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/vue/vue-adminvue-admin-01%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><ol><li><p>在vs code中创建项目 vue-admin</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">vue create vue-admin<br></code></pre></div></td></tr></table></figure></li><li><p>选择手动配置项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808222646.png" alt="image-20210808222638266"></p></li><li><p>选择配置，空格键选择</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223056.png" alt="image-20210808223055701"></p></li><li><p>vue版本选择2.0</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223126.png" alt="image-20210808223125394"></p></li><li><p>是否选择历史路由，选择n</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223204.png" alt="image-20210808223203364"></p></li><li><p>这一步提示我们选择配置文件的位置，因为每个插件都有自己单独的配置文件，我们选择第一个</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223312.png" alt="image-20210808223311890"></p></li><li><p>是否保存为预设，选择n</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223350.png" alt="image-20210808223349230"></p></li><li><p>下载依赖</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223409.png" alt="image-20210808223408753"></p></li><li><p>创建完成</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210808223527.png" alt="image-20210808223527083"></p></li><li><p>对package.json文件的注释</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;vue-admin&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,<br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>,<br>    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br>  &#125;,<br><br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123; <span class="hljs-comment">// dependencies生产环境,作为依赖，会自动下载</span><br>    <span class="hljs-attr">&quot;core-js&quot;</span>: <span class="hljs-string">&quot;^3.6.5&quot;</span>, <span class="hljs-comment">// core-js 就是提供js新语法api一个集合库 core-js相当于babel-polyfil</span><br>    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.11&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;^3.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;vuex&quot;</span>: <span class="hljs-string">&quot;^3.4.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123; <span class="hljs-comment">//devDependencies开发环境</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-router&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-plugin-vuex&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/cli-service&quot;</span>: <span class="hljs-string">&quot;~4.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@vue/eslint-config-standard&quot;</span>: <span class="hljs-string">&quot;^5.1.2&quot;</span>, <span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;babel-eslint&quot;</span>: <span class="hljs-string">&quot;^10.1.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint&quot;</span>: <span class="hljs-string">&quot;^6.7.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-import&quot;</span>: <span class="hljs-string">&quot;^2.20.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-node&quot;</span>: <span class="hljs-string">&quot;^11.1.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-promise&quot;</span>: <span class="hljs-string">&quot;^4.2.1&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-standard&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;eslint-plugin-vue&quot;</span>: <span class="hljs-string">&quot;^6.2.2&quot;</span>,<span class="hljs-comment">//安装eslist校验</span><br>    <span class="hljs-attr">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.12.0&quot;</span>, <span class="hljs-comment">// 第3步安装了CSS Pre-processors node-sass将sass文件编译成css的工具</span><br>    <span class="hljs-attr">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^8.0.2&quot;</span>, <span class="hljs-comment">// 第3步安装了CSS Pre-processors sass-loade加载 SASS/SCSS 文件并将其编译为 CSS</span><br><br>    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.6.11&quot;</span> <span class="hljs-comment">//vue-template-compiler这个包可用于将Vue 2.0模板预编译为呈现函数在vue工程中，安装依赖时，需要vue和vue-template-compiler版本必须保持一致</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/hilsf/p/14453401.html">core.js 是个什么</a></p><p><a href="https://zhuanlan.zhihu.com/p/43249121">一口（很长的）气了解 babel</a></p><p><a href="https://blog.csdn.net/hyk521/article/details/105117432/">使用vue创建项目的详细步骤</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>vue</category>
      
      <category>vue-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断是否为空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNull</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str === <span class="hljs-string">&quot;undefined&quot;</span> || str === <span class="hljs-string">&quot; &quot;</span> || str === <span class="hljs-string">&quot;null&quot;</span> || str === <span class="hljs-literal">undefined</span> || str === <span class="hljs-string">&#x27;&#x27;</span> || str === <span class="hljs-literal">null</span> || str === <span class="hljs-string">&quot;NULL&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;undefined&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;null&quot;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isNull(<span class="hljs-string">&quot;NULL&quot;</span>)); <span class="hljs-comment">// true </span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间戳转化成时间2</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B42/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B42/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间戳转化成时间2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 时间戳</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回时间格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeStamp2String</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time); <span class="hljs-comment">// 时间戳转成时间</span><br>    <span class="hljs-keyword">let</span> year = dateTime.getFullYear();<br>    <span class="hljs-keyword">let</span> month = dateTime.getMonth() + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + (dateTime.getMonth() + <span class="hljs-number">1</span>) : dateTime.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = dateTime.getDate() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getDate() : dateTime.getDate();<br>    <span class="hljs-keyword">let</span> hour = dateTime.getHours() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getHours() : dateTime.getHours();<br>    <span class="hljs-keyword">let</span> minute = dateTime.getMinutes() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getMinutes() : dateTime.getMinutes();<br>    <span class="hljs-keyword">let</span> second = dateTime.getSeconds() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getSeconds() : dateTime.getSeconds();<br>    <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute + <span class="hljs-string">&quot;:&quot;</span> + second;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeStamp2String(<span class="hljs-number">1526552438244</span>)); <span class="hljs-comment">// 2018-05-17 18:20:38</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间戳转化成时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E6%88%90%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间戳转化成时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 时间戳</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回时间格式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeStamp2String</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    dateTime.setTime(time); <span class="hljs-comment">//我们将向 1970年01月01日 添加 time毫秒，并显示新的日期和时间</span><br>    <span class="hljs-built_in">console</span>.log(dateTime); <span class="hljs-comment">// 2018-05-17T10:20:38.244Z</span><br>    <span class="hljs-keyword">let</span> year = dateTime.getFullYear();<br>    <span class="hljs-keyword">let</span> month = dateTime.getMonth() + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + (dateTime.getMonth() + <span class="hljs-number">1</span>) : dateTime.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = dateTime.getDate() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getDate() : dateTime.getDate();<br>    <span class="hljs-keyword">let</span> hour = dateTime.getHours() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getHours() : dateTime.getHours();<br>    <span class="hljs-keyword">let</span> minute = dateTime.getMinutes() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getMinutes() : dateTime.getMinutes();<br>    <span class="hljs-keyword">let</span> second = dateTime.getSeconds() &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dateTime.getSeconds() : dateTime.getSeconds();<br>    <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute + <span class="hljs-string">&quot;:&quot;</span> + second;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeStamp2String(<span class="hljs-number">1526552438244</span>)); <span class="hljs-comment">// 2018-05-17 18:20:38</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断包含关系2</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断包含关系2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>substr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>isIgnoreCase isIgnoreCase = true 会忽略大小写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsContains</span>(<span class="hljs-params">string, substr, isIgnoreCase</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (isIgnoreCase) &#123; <span class="hljs-comment">// 如果忽略大小写，则全部转成小写比较</span><br>        string = string.toLowerCase();<br>        substr = substr.toLowerCase();<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(string.split(substr));<br>    <span class="hljs-keyword">return</span> string.split(substr).length &gt; <span class="hljs-number">1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;Woder&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>, <span class="hljs-literal">true</span>)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12判断包含关系</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%88%A4%E6%96%AD%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断包含关系</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>substr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>isIgnoreCase isIgnoreCase = true 会忽略大小写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsContains</span>(<span class="hljs-params">string, substr, isIgnoreCase</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (isIgnoreCase) &#123; <span class="hljs-comment">// 如果忽略大小写，则全部转成小写比较</span><br>        string = string.toLowerCase();<br>        substr = string.toLowerCase();<br>    &#125;<br>    <span class="hljs-keyword">let</span> firstCase = substr.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 得到子串的第一个字符</span><br>    <span class="hljs-keyword">let</span> subLen = substr.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; string.length - subLen + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (string.charAt(i) === firstCase) &#123; <span class="hljs-comment">// 第一个字符串匹配</span><br>            <span class="hljs-keyword">if</span> (string.substring(i, i + subLen) === substr) &#123; <span class="hljs-comment">// 判断是否匹配</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;Woder&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(jsContains(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>,<span class="hljs-literal">true</span>)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12生成指定位数的随机整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成指定位数的随机整数(可用于验证码)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>count 指定位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回指定位数的随机数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomNum</span>(<span class="hljs-params">count</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = []; <span class="hljs-comment">// 随机数存放到这个数组中</span><br>    <span class="hljs-keyword">let</span> strNum = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        arr[i] = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>); <span class="hljs-comment">// 生成的随机数放入数组</span><br>        strNum += <span class="hljs-built_in">String</span>(arr[i]); <span class="hljs-comment">// 随机数拼接</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> strNum;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getRandomNum(<span class="hljs-number">4</span>)); <span class="hljs-comment">// 2462</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12校验ip地址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%A1%E9%AA%8Cip%E5%9C%B0%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%A1%E9%AA%8Cip%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 匹配ip地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>ipvalue ip地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkIp</span>(<span class="hljs-params">ipvalue</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> regex = <span class="hljs-regexp">/^([1-9]|[1-9]\d|1\d&#123;2&#125;|2[0-1]\d|22[0-3])(\.(\d|[1-9]\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]))&#123;3&#125;$/</span>;<br>    <span class="hljs-keyword">let</span> b = regex.test(ipvalue);<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-comment">// 1 - 9 或者(1 - 9)(0 - 9) 或者 1(0 - 9)(0 - 9) 或者 2(0 - 1)(0 - 9) 或者 22(0 - 3) 开头</span><br><span class="hljs-comment">// . (0-9)</span><br><span class="hljs-comment">// .(1-9)(0-9)</span><br><span class="hljs-comment">// . 1 (随机的2位数)</span><br><span class="hljs-comment">// . 2 (0-4) (0-9)</span><br><span class="hljs-comment">// . 25 (0-5)</span><br><span class="hljs-comment">//匹配3次</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;1.0.0.1&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;127.0.0.1&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIp(<span class="hljs-string">&quot;1271.0.0.1&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12根据文件名获取文件格式</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8D%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8D%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据文件名获取文件格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 文件名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>文件类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileTypeByFileName</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.substring(str.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>).toLowerCase();<br>&#125;<br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.html&quot;</span>)); <span class="hljs-comment">//html</span><br><br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.js&quot;</span>)); <span class="hljs-comment">// js</span><br><br><span class="hljs-built_in">console</span>.log(getFileTypeByFileName(<span class="hljs-string">&quot;index.php&quot;</span>)); <span class="hljs-comment">//php </span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12忽略大小写判断字符串是否相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 忽略大小写判断字符串是否相等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str1 字符串1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str2 字符串2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEqualsIgnorecase</span>(<span class="hljs-params">str1, str2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str1.toUpperCase() === str2.toUpperCase()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&quot;abcd&quot;</span>;<br><span class="hljs-keyword">let</span> str2 = <span class="hljs-string">&quot;ABCD&quot;</span>;<br><span class="hljs-built_in">console</span>.log(isEqualsIgnorecase(str1, str2)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12从数组中随机获取元素</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数组中获取随机元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr 数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>随机返回一个值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomOne</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arr.length)];<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];<br><span class="hljs-built_in">console</span>.log(randomOne(arr)); <span class="hljs-comment">// 9 </span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>Math.random() * arr.length 得到值是小数，需要进行向下取整</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12字符串在某字符串中出现的次数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E6%9F%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E6%9F%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串在某字符串中出现的次数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>subStr 子字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countStr</span>(<span class="hljs-params">str, subStr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.split(subStr).length - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967&quot;</span>;<br><span class="hljs-keyword">let</span> subStr = <span class="hljs-string">&quot;blog&quot;</span>;<br><span class="hljs-built_in">console</span>.log(countStr(str, subStr)); <span class="hljs-comment">// 6</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12过滤字符串中的所有空格</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%A9%BA%E6%A0%BC/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E8%BF%87%E6%BB%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤字符串中的所空格</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>string 带空格的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ignoreSpaces</span>(<span class="hljs-params">string</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 结果字符串</span><br>    <span class="hljs-keyword">let</span> strArr = string.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> strArr) &#123;<br>        res += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(ignoreSpaces(<span class="hljs-string">&quot;a b c d     e&quot;</span>)); <span class="hljs-comment">// abcde</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12url参数转对象</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12url%E5%8F%82%E6%95%B0%E8%BD%AC%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12url%E5%8F%82%E6%95%B0%E8%BD%AC%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * url参数转对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>url url地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回json格式的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseQueryString</span>(<span class="hljs-params">url</span>) </span>&#123;<br>    url = url == <span class="hljs-literal">null</span> ? <span class="hljs-built_in">window</span>.location.href : url;<br>    <span class="hljs-keyword">let</span> search = url.substring(url.indexOf(<span class="hljs-string">&#x27;?&#x27;</span>) + <span class="hljs-number">1</span>); <span class="hljs-comment">// id=1&amp;name=ye21st</span><br>    <span class="hljs-keyword">if</span> (!search) &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> + <span class="hljs-built_in">decodeURIComponent</span>(search).replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class="hljs-regexp">/=/g</span>, <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>); <span class="hljs-comment">// &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ye21st&quot;&#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> + <span class="hljs-built_in">decodeURIComponent</span>(search).replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&quot;,&quot;&#x27;</span>).replace(<span class="hljs-regexp">/=/g</span>, <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>);<br><br>&#125;<br><span class="hljs-built_in">console</span>.log(parseQueryString(<span class="hljs-string">&quot;http://www.baidu.com?id=1&amp;name=ye21st&quot;</span>)); <span class="hljs-comment">// &#123; id: &#x27;1&#x27;, name: &#x27;ye21st&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-12时间格式总结</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-12%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的毫秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date2 = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// 1628348270000 不准确 只能精确到秒</span><br><span class="hljs-keyword">let</span> date3 = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf(); <span class="hljs-comment">//1628348270186</span><br><span class="hljs-keyword">let</span> date5 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-built_in">console</span>.log(date1);<br><span class="hljs-built_in">console</span>.log(date2);<br><span class="hljs-built_in">console</span>.log(date3);<br><span class="hljs-built_in">console</span>.log(date4);<br><span class="hljs-built_in">console</span>.log(date5);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的字符串形式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date11 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 2021-08-08T02:31:04.290Z 实际时间是 2021-08-08T10:31:04.290Z 差8小时</span><br><span class="hljs-keyword">let</span> date12 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString(); <span class="hljs-comment">// Sun Aug 08 2021 10:33:52 GMT+0800 (中国标准时间) 准确时间</span><br><span class="hljs-keyword">let</span> date13 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString(); <span class="hljs-comment">// 2021/8/8 上午10:36:50 准确时间</span><br><span class="hljs-comment">// 使用格式化函数</span><br><span class="hljs-keyword">let</span> date14 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 函数表达式</span><br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> year = date.getFullYear();<br>    <span class="hljs-keyword">let</span> month = date.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = add_zero(date.getDate());<br>    <span class="hljs-keyword">let</span> hour = add_zero(date.getHours());<br>    <span class="hljs-keyword">let</span> minutes = add_zero(date.getMinutes());<br>    <span class="hljs-keyword">let</span> second = add_zero(date.getSeconds());<br>    <span class="hljs-keyword">let</span> str = year + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + day + <span class="hljs-string">&#x27; &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + second;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_zero</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num = num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + num : num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(date11);<br><span class="hljs-built_in">console</span>.log(date12);<br><span class="hljs-built_in">console</span>.log(date13);<br><span class="hljs-built_in">console</span>.log(date14()); <span class="hljs-comment">// 2021-8-08 10:42:44 准确时间</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11格式化之后时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%90%8E%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%90%8E%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化之后时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>endTime 之后时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回时间字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatEndTime</span>(<span class="hljs-params">endTime</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> startDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> endDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(endTime);<br>    <span class="hljs-keyword">let</span> t = endDate.getTime() - startDate.getTime(); <span class="hljs-comment">//时间差</span><br>    <span class="hljs-keyword">let</span> d = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">let</span> h = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">let</span> m = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Math</span>.floor(t / <span class="hljs-number">1000</span> % <span class="hljs-number">60</span>);<br>    <span class="hljs-keyword">return</span> d + <span class="hljs-string">&quot;天&quot;</span> + h + <span class="hljs-string">&quot; 小时&quot;</span> + m + <span class="hljs-string">&quot;分钟&quot;</span> + s + <span class="hljs-string">&quot;秒&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(formatEndTime(<span class="hljs-string">&quot;2021-08-07 23:00&quot;</span>));<br><br></code></pre></div></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间的毫秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date2 = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// 1628348270000 不准确 只能精确到秒</span><br><span class="hljs-keyword">let</span> date3 = <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-keyword">let</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf(); <span class="hljs-comment">//1628348270186</span><br><span class="hljs-keyword">let</span> date5 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// 1628348270186</span><br><span class="hljs-built_in">console</span>.log(date1);<br><span class="hljs-built_in">console</span>.log(date2);<br><span class="hljs-built_in">console</span>.log(date3);<br><span class="hljs-built_in">console</span>.log(date4);<br><span class="hljs-built_in">console</span>.log(date5);<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11格式化之前时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B9%8B%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回之前时间的格式化形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>startTime 开始时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化时间字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatPassTime</span>(<span class="hljs-params">startTime</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> curTime = <span class="hljs-built_in">Date</span>.parse(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());  <span class="hljs-comment">// 当前时间的毫秒数</span><br>    <span class="hljs-keyword">let</span> time = curTime - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(startTime);<br>    <span class="hljs-keyword">let</span> min = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">let</span> hour = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>));<br>    <span class="hljs-keyword">let</span> day = <span class="hljs-built_in">parseInt</span>(time / (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">let</span> month = <span class="hljs-built_in">parseInt</span>(day / <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">let</span> year = <span class="hljs-built_in">parseInt</span>(month / <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">if</span> (year) &#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (month) &#123;<br>        <span class="hljs-keyword">return</span> month + <span class="hljs-string">&quot;月前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (day) &#123;<br>        <span class="hljs-keyword">return</span> day + <span class="hljs-string">&quot;天前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (hour) &#123;<br>        <span class="hljs-keyword">return</span> hour + <span class="hljs-string">&quot;小时前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (min) &#123;<br>        <span class="hljs-keyword">return</span> min + <span class="hljs-string">&quot;分钟前&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;刚刚&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-8-7 22:34&quot;</span>)); <span class="hljs-comment">// 1分钟前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-8-6 22:34&quot;</span>)); <span class="hljs-comment">//1天前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2021-7-6 22:34&quot;</span>)); <span class="hljs-comment">//1月前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-string">&quot;2020-7-6 22:34&quot;</span>)); <span class="hljs-comment">//1年前</span><br><span class="hljs-built_in">console</span>.log(formatPassTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString())); <span class="hljs-comment">//刚刚</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11Base64的加密与解码</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11Base64%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E7%A0%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11Base64%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js-Base64加密与解码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>加密后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Encode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> btoa(<span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(str)));<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * js-Base64加密与解码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>解密后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Decode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-built_in">escape</span>(atob(str)));<br>&#125;<br><span class="hljs-built_in">console</span>.log(base64Encode(<span class="hljs-string">&quot;1&quot;</span>)); <span class="hljs-comment">// MQ==</span><br><span class="hljs-built_in">console</span>.log(base64Decode(<span class="hljs-string">&quot;MQ==&quot;</span>)); <span class="hljs-comment">// 1</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210807194318.png" alt="image-20210807194317688"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11数据集求交集</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B1%82%E4%BA%A4%E9%9B%86/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B1%82%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据集求交集</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 数组1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 数组2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回数组中相同的部分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intersection</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr1.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-comment">// 把重复值过滤出来，返回</span><br>        <span class="hljs-keyword">return</span> arr2.indexOf(n) != -<span class="hljs-number">1</span>; <span class="hljs-comment">// Arr2中查找是否有arr1的值</span><br>    &#125;);<br>&#125;<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(intersection(arr1, arr2)); <span class="hljs-comment">// [ 3, 4, 5 ]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11是否支持transition</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81transition/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81transition/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检测某个是否支持transition属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">supportTransition</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> s = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>).style;<br>    <span class="hljs-built_in">console</span>.log(s);<br>    r = <span class="hljs-string">&#x27;transition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;WebkitTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;MozTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;msTransition&#x27;</span> <span class="hljs-keyword">in</span> s ||<br>        <span class="hljs-string">&#x27;OTransition&#x27;</span> <span class="hljs-keyword">in</span> s;<br>    s = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br>supportTransition();<br></code></pre></div></td></tr></table></figure><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210807180405.png" alt="image-20210807180352316" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11驼峰字符串转成下划线字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E9%A9%BC%E5%B3%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%88%90%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E9%A9%BC%E5%B3%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%88%90%E4%B8%8B%E5%88%92%E7%BA%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 驼峰字符串转成下划线字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 驼峰字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回下划线字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertCamelCase</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> str != <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;输入类型错误！&quot;</span>);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/[A-Z]/g</span>; <span class="hljs-comment">//正则</span><br>    <span class="hljs-keyword">return</span> str.replace(pattern, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">match, index</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (index != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;_&#x27;</span> + match.toLowerCase();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> match.toLowerCase();<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.log(convertCamelCase(<span class="hljs-string">&quot;HelloWorld&quot;</span>)); <span class="hljs-comment">// hello_world</span><br><span class="hljs-built_in">console</span>.log(convertCamelCase(<span class="hljs-string">&quot;1&quot;</span>)); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11对象转成地址栏参数形式</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%88%90%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *对象转换成地址栏的参数形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>obj 对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encodeFormData</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!obj) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 空对象直接返回</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> res = []; <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> name <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">if</span> (!obj.hasOwnProperty(name)) &#123; <span class="hljs-comment">//hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[name] == <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 忽略function，function没有toString方法</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> value = obj[name].toString();<br>        name = <span class="hljs-built_in">encodeURIComponent</span>(name.replace(<span class="hljs-string">&#x27;%20&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>)); <span class="hljs-comment">// 替换特殊字符 encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</span><br>        value = <span class="hljs-built_in">encodeURIComponent</span>(value.replace(<span class="hljs-string">&#x27;%20&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>));<br>        res.push(name + <span class="hljs-string">&#x27;=&#x27;</span> + value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.join(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// let obj = &#123; &#x27;id&#x27;: 1, &#x27;function&#x27;: &#x27;test&#x27; &#125;; // id=1&amp;name=test</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123; &#125;;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;name&#x27;</span>: f &#125;; <span class="hljs-comment">// id=1</span><br><span class="hljs-built_in">console</span>.log(encodeFormData(obj));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-11XXS转义</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11XXS%E8%BD%AC%E4%B9%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-11XXS%E8%BD%AC%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * XXS转义</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>markup 传入的字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回转义后的字符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceXss</span>(<span class="hljs-params">markup</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> regList = &#123;<br>        <span class="hljs-string">&quot;&amp;&quot;</span>: <span class="hljs-string">&quot;&amp;amp;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;&quot;</span>: <span class="hljs-string">&quot;&amp;lt;&quot;</span>,<br>        <span class="hljs-string">&quot;&gt;&quot;</span>: <span class="hljs-string">&quot;&amp;gt;&quot;</span>,<br>        <span class="hljs-string">&#x27;&quot;&#x27;</span>: <span class="hljs-string">&quot;&amp;#34;&quot;</span>,<br>        <span class="hljs-string">&quot;&#x27;&quot;</span>: <span class="hljs-string">&quot;&amp;#39;&quot;</span><br>    &#125;;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[&amp;&lt;&gt;&quot;&#x27;]/g</span>;  <span class="hljs-comment">// 正则表达式</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode_char</span>(<span class="hljs-params">c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> regList[c] || c;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> markup == <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-built_in">String</span>(markup).replace(reg, encode_char);<br>&#125;<br><span class="hljs-built_in">console</span>.log(replaceXss(<span class="hljs-string">&quot;&lt;&gt;&quot;</span>)); <span class="hljs-comment">//&amp;lt;&amp;gt;</span><br><span class="hljs-built_in">console</span>.log(replaceXss(<span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">//a</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-10生成指定范围内的随机数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-10%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-10%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成指定范围内的随机数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>minMum 最小值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>maxMum 最大值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>status // status= true表示生成整数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回生成的随机数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomNum</span>(<span class="hljs-params">minMum, maxMum, status = <span class="hljs-literal">true</span></span>) </span>&#123; <br>    <span class="hljs-keyword">let</span> result;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">arguments</span>.length) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * minMum + <span class="hljs-number">1</span>), <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum), <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">if</span> (status) &#123;<br>                result = <span class="hljs-built_in">parseInt</span>((<span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum), <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = <span class="hljs-built_in">Math</span>.random() * (maxMum - minMum + <span class="hljs-number">1</span>) + minMum;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            result = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">4</span>)); <span class="hljs-comment">// 2 </span><br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)); <span class="hljs-comment">// 8</span><br><span class="hljs-built_in">console</span>.log(randomNum(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-literal">false</span>)); <span class="hljs-comment">// 44.126143462613115</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-流体布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E6%B5%81%E4%BD%93%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.left</span>,</span><br><span class="css">        <span class="hljs-selector-class">.right</span>,</span><br><span class="css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">220px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">220px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>#main<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804132231.png" alt="image-20210804132230922"></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流体布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-双飞翼布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804132256.png" alt="image-20210804132255440"></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双飞翼布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-圣杯布局</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、大体布局"><a href="#一、大体布局" class="headerlink" title="一、大体布局"></a>一、大体布局</h2><p>设置大体布局模式头部和脚部，中间区域全部float:left,中间center设置width:100%,沾满屏幕</p><p>为了保证中间区域优先显示，所以将 id 为center的div优先放到前边，优先加载</p><p>其中 container 容器中 包裹着 center 、 left 、right 容器</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113009.png" alt="image-20210804113001570"></p><h2 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span>,<br><span class="hljs-selector-id">#footer</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113137.png" alt="image-20210804113136448"></p><h2 id="三、利用margin负值"><a href="#三、利用margin负值" class="headerlink" title="三、利用margin负值"></a>三、利用margin负值</h2><p>利用margin将左右盒子重新布局到对应位置</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-id">#right</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: wheat;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804113337.png" alt="image-20210804113336253"></p><h2 id="三、设置padding"><a href="#三、设置padding" class="headerlink" title="三、设置padding"></a>三、设置padding</h2><p>现在左右两边占据了中间的内容，我们给容器设置padding值</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>    <span class="hljs-attribute">padding</span>:  <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804114115.png" alt="image-20210804114114376"></p><h2 id="四、设置定位"><a href="#四、设置定位" class="headerlink" title="四、设置定位"></a>四、设置定位</h2><p>在设置了padding，左右元素都被挤了进来，我们设置相对定位来解决</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.column</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: aqua;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">left</span>:-<span class="hljs-number">200px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#right</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: wheat;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">right</span>: -<span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#header</span>,</span><br><span class="css">        <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: wheat;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">right</span>: -<span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804114754.png" alt="image-20210804114753381"></p><h2 id="六、对浮动的理解"><a href="#六、对浮动的理解" class="headerlink" title="六、对浮动的理解"></a>六、对浮动的理解</h2><p>在了解什么是浮动之前我们先了解一下html元素在普通流排列方式。在普通流中，元素是按照它在 HTML 中的出现的先后顺序自上而下依次排列布局的，在排列过程中所有的行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为一整行。如果没有特殊样式指定，所有元素默认都是按照普通流方式排列布局，即普通流中元素的位置由该元素在 HTML 文档中的位置决定的。</p><p>浮动使元素脱离文档普通流，漂浮在普通流之上的。浮动元素依然按照其在普通流的位置上出现，然后尽可能的根据设置的浮动方向向左或者向右浮动，直到浮动元素的外边缘遇到包含框或者另一个浮动元素为止，且允许文本和内联元素环绕它。浮动会产生块级框（相当于设置了display:block），而不管该元素本身是什么。<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115840.png" alt="img"></p><p>就如上图的显示的div1，div2，div3就是按照普通流排列布局方式呈现的，而后面的div4，div5，div6中的div5的布局方式就不一样了，因为我给div5设置了向左浮动。此时div5脱离普通流，漂浮在普通流之上，所以导致原来div5在普通流中的位置空了出来，div6自动补上去（普通流（div6）表现的和浮动元素不存在一样）。</p><h2 id="七、清除浮动"><a href="#七、清除浮动" class="headerlink" title="七、清除浮动"></a>七、清除浮动</h2><p>浮动导致元素已不在普通流中，所以在排列布局的时候文档中的普通流表现的和浮动元素不存在一样，当浮动元素的高度超出包含框的时候，会出现包含框不会自动撑高来包裹浮动元素，即所谓的“高度塌陷”。如下图所示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210804115823.png" alt="img"></p><h2 id="八、清除浮动的方式"><a href="#八、清除浮动的方式" class="headerlink" title="八、清除浮动的方式"></a>八、清除浮动的方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>给父容器添加after伪类和zoom样式（推荐使用）可以写成公共样式，zoom兼容IE</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;&#125;<br><span class="hljs-selector-class">.clearfix</span>&#123;zoom: <span class="hljs-number">1</span>;&#125;<br><span class="hljs-selector-class">.clearfix</span>:after&#123;content: <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-attribute">display</span>: block;<span class="hljs-attribute">clear</span>: both;<span class="hljs-attribute">visibility</span>:hidden;<span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot; class=&quot;clearfix&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>给父元素添加样式overflow: hidden;或者overflow: auto;(不推荐该用法，使用hidden时当内容较多时会被遮挡，使用auto时内容较多会出现滚动条。构建块格式化上下（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container1</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">overflow</span>: hidden;&#125;<br><span class="hljs-selector-id">#container2</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">overflow</span>: auto;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container1&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container2&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>添加空标签，并设置clear:both的样式（不推荐使用，可能会增加很多空标签，代码冗余）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br><span class="hljs-selector-class">.clearfix</span>&#123;<span class="hljs-attribute">clear</span>: both;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;clearfix&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p>给父容器设置高度 （不推荐，当浮动元素和设置的容器高度不一样时会出现问题，适合固定高度布局时使用）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="方式五"><a href="#方式五" class="headerlink" title="方式五"></a>方式五</h3><p>让父元素一起浮动（不推荐，可能会影响父元素的兄弟元素和其父元素的排列布局）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="方式六"><a href="#方式六" class="headerlink" title="方式六"></a>方式六</h3><p>给父元素设置display:table或者display:inline-block(构建块格式化上下文（BFC）)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-id">#container1</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">display</span>:table;&#125;<br><span class="hljs-selector-id">#container2</span>&#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<span class="hljs-attribute">display</span>:inline-block;&#125;<br><span class="hljs-selector-class">.float1</span>,<span class="hljs-selector-class">.float2</span>,<span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background</span>: green;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">float</span>: left;&#125;<br><span class="hljs-selector-class">.float2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087D1</span>;&#125;<br><span class="hljs-selector-class">.float3</span>&#123;<span class="hljs-attribute">background-color</span>: blue;<span class="hljs-attribute">float</span>: right;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container1&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;container2&quot;&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float1&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float2&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">left</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;float3&quot;&gt;&lt;<span class="hljs-selector-tag">h2</span>&gt;<span class="hljs-attribute">float</span> <span class="hljs-attribute">right</span>&lt;/<span class="hljs-selector-tag">h2</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.csdn.net/u013356907/article/details/82778480">https://blog.csdn.net/u013356907/article/details/82778480</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>圣杯布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取day天后的秒数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96day%E5%A4%A9%E5%90%8E%E7%9A%84%E7%A7%92%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96day%E5%A4%A9%E5%90%8E%E7%9A%84%E7%A7%92%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取day天后的秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>days 天数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>day天后的秒数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSurplusSeconds</span>(<span class="hljs-params">days</span>) </span>&#123;<br>    days = days || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> str1 = d.getTime();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(str1).toString());<span class="hljs-comment">// Tue Aug 03 2021 22:08:10 GMT+0800 (中国标准时间)</span><br>    d.setHours(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>);<br>    <span class="hljs-keyword">var</span> str2 = d.getTime();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(str2).toString());<span class="hljs-comment">// Tue Aug 03 2021 23:59:59 GMT+0800 (中国标准时间)</span><br>    <span class="hljs-keyword">return</span> (str2 - str1) / <span class="hljs-number">1000</span> + days * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<span class="hljs-comment">//  (str2 - str1) / 1000 当前时间的秒数</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(getSurplusSeconds(<span class="hljs-number">2</span>)); <span class="hljs-comment">//179349</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取前num天的日期</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%89%8Dnum%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%89%8Dnum%E5%A4%A9%E7%9A%84%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取前num天的日期</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 获取前num天</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>order  order= true  从大到小 order = false 从小到大</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNumToday</span>(<span class="hljs-params">num, order = <span class="hljs-literal">false</span></span>) </span>&#123;<br>    num = <span class="hljs-built_in">Math</span>.ceil(num);<span class="hljs-comment">// num向上取整</span><br>    <span class="hljs-keyword">let</span> arr_date = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - (i * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">let</span> month = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date).getMonth() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">let</span> day = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date).getDate();<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-string">`<span class="hljs-subst">$&#123;month.toString().length &lt; <span class="hljs-number">2</span> ? <span class="hljs-string">`0<span class="hljs-subst">$&#123;month&#125;</span>`</span> : month&#125;</span> - <span class="hljs-subst">$&#123;day.toString().length &lt; <span class="hljs-number">2</span> ? <span class="hljs-string">`0<span class="hljs-subst">$&#123;day&#125;</span>`</span> : day&#125;</span>`</span>;<br>        <span class="hljs-keyword">if</span> (order) &#123; <span class="hljs-comment">// 从大到小</span><br>            arr_date.push(result);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arr_date.unshift(result);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr_date;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getNumToday(<span class="hljs-number">7</span>, <span class="hljs-literal">false</span>));<span class="hljs-comment">// [&#x27;07 - 28&#x27;,&#x27;07 - 29&#x27;,&#x27;07 - 30&#x27;,&#x27;07 - 31&#x27;,&#x27;08 - 01&#x27;,&#x27;08 - 02&#x27;,&#x27;08 - 03&#x27;]</span><br><span class="hljs-built_in">console</span>.log(getNumToday(<span class="hljs-number">7</span>, <span class="hljs-literal">true</span>));<span class="hljs-comment">// [&#x27;08 - 03&#x27;,&#x27;08 - 02&#x27;,&#x27;08 - 01&#x27;,&#x27;07 - 31&#x27;,&#x27;07 - 30&#x27;,&#x27;07 - 29&#x27;,&#x27;07 - 28&#x27; ]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09获取当前时间</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回当前时间的格式化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCurrentDate</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">let</span> year = date.getFullYear();<br>    <span class="hljs-keyword">let</span> month = date.getMonth() + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> day = add_zero(date.getDate());<br>    <span class="hljs-keyword">let</span> hour = add_zero(date.getHours());<br>    <span class="hljs-keyword">let</span> minutes = add_zero(date.getMinutes());<br>    <span class="hljs-keyword">let</span> second = add_zero(date.getSeconds());<br>    <span class="hljs-keyword">let</span> str = year + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + day + <span class="hljs-string">&#x27; &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + second;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_zero</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> num = num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + num : num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getCurrentDate()); <span class="hljs-comment">//2021-8-03 21:28:44</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09替换非法字符</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E6%9B%BF%E6%8D%A2%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E6%9B%BF%E6%8D%A2%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 替换非法字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>替换值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">URLencode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">escape</span>(str).replace(<span class="hljs-regexp">/\+/g</span>, <span class="hljs-string">&#x27;%2B&#x27;</span>).replace(<span class="hljs-regexp">/\&quot;/g</span>, <span class="hljs-string">&#x27;%22&#x27;</span>).replace(<span class="hljs-regexp">/\&#x27;g/</span>, <span class="hljs-string">&#x27;%27&#x27;</span>).replace(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&#x27;%2F&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;212+113&quot;</span>));<span class="hljs-comment">//212%2B113</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;=&quot;</span>));<span class="hljs-comment">//%3D</span><br><span class="hljs-built_in">console</span>.log(URLencode(<span class="hljs-string">&quot;&#x27;&quot;</span>)); <span class="hljs-comment">// %27</span><br><br></code></pre></div></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.blogjava.net/juhongtao/archive/2007/12/19/168639.html">request.getParameter(“变量名”)获取的字符串中原来的加号变成了空格，url传值</a></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断手机类型</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS手机类型判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type <span class="hljs-type">&#123;&#123;userAgent: string, isAndroid: boolean, isIphone: boolean, isIpad: boolean, isWeixin: boolean, isChrome: boolean&#125;</span></span>&#125;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">var</span> BrowserInfo = &#123;<br>    <span class="hljs-attr">userAgent</span>: navigator.userAgent.toLowerCase(),<br>    <span class="hljs-attr">isAndroid</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/android/ig</span>)),<br>    <span class="hljs-attr">isIphone</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/iphone|ipod/ig</span>)),<br>    <span class="hljs-attr">isIpad</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/ipad/ig</span>)),<br>    <span class="hljs-attr">isWeixin</span>: <span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/MicroMessenger/ig</span>)),<br>    <span class="hljs-attr">isChrome</span>:<span class="hljs-built_in">Boolean</span>(navigator.userAgent.match(<span class="hljs-regexp">/chrome/ig</span>)),<br>&#125;<br>BrowserInfo;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803210400.png" alt="image-20210803210359273"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断浏览器</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>浏览器的类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOs</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 8.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE8&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 6.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE6&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE 7.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE7&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;Firefox&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Firefox&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;Chrome&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chrome&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Other&quot;</span>;<br>    &#125;<br>&#125;<br>getOs();<br></code></pre></div></td></tr></table></figure><p> Chrome浏览器：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205112.png" alt="image-20210803205104582"></p><p>navigator.userAgent获取浏览器信息(类型及系统)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205700.png" alt="image-20210803205659555"></p><p>Microsoft Edge浏览器：微软开发的，简称ME浏览器</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205616.png" alt="image-20210803205357906"></p><p>navigator.userAgent获取浏览器信息(类型及系统)</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210803205611.png" alt="image-20210803205610022"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09将数字转换成可以指定小数位数的字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%B0%86%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数字转成可以指定小数位数的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numberToString</span>(<span class="hljs-params">data, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dataLen = <span class="hljs-keyword">typeof</span> len == <span class="hljs-literal">undefined</span> ? <span class="hljs-number">0</span> : len; <span class="hljs-comment">// 如果没有指定长度</span><br>    <span class="hljs-keyword">let</span> res = data + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 数字字符串化</span><br>    <span class="hljs-keyword">if</span> (res.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        res = <span class="hljs-built_in">Number</span>(res).toFixed(dataLen); <span class="hljs-comment">// 指定小数位数</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> intData = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 整数部分</span><br>        <span class="hljs-keyword">let</span> decimalData = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 小数部分</span><br>        intData = res.substring(<span class="hljs-number">0</span>, res.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>)); <span class="hljs-comment">// 整数部分</span><br>        decimalData = <span class="hljs-regexp">/\.\d+/</span>.exec(res); <span class="hljs-comment">//小数部分</span><br>        decimalData = <span class="hljs-built_in">Number</span>(decimalData);<br>        decimalData = decimalData.toPrecision(dataLen).substr(<span class="hljs-number">0</span>, dataLen + <span class="hljs-number">2</span>); <span class="hljs-comment">//会导致四舍五入</span><br>        res = intData + decimalData.substr(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.00</span><br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123.456</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.46</span><br><span class="hljs-built_in">console</span>.log( numberToString(<span class="hljs-number">123.356777</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">//123.3567770</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数字转成可以指定小数位数的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numberToString</span>(<span class="hljs-params">data, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> dataLen = <span class="hljs-keyword">typeof</span> len == <span class="hljs-literal">undefined</span> ? <span class="hljs-number">0</span> : len; <span class="hljs-comment">// 如果没有指定长度</span><br>    <span class="hljs-keyword">let</span> res = data + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 数字字符串化</span><br>    res = <span class="hljs-built_in">Number</span>(res).toFixed(len);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.00</span><br><span class="hljs-built_in">console</span>.log(numberToString(<span class="hljs-number">123.456</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//123.46</span><br><span class="hljs-built_in">console</span>.log( numberToString(<span class="hljs-number">123.356777</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">//123.3567770</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组</li><li>toPrecision() 方法以指定的精度返回该数值对象的字符串表示，四舍五入到 precision 参数指定的显示数字位数。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09判断是否是网址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkURL</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> strRegex = <span class="hljs-string">&quot;^((https|http|ftp|rtsp|mms)?://)&quot;</span><br>        + <span class="hljs-string">&quot;?(([0-9a-z_!~*&#x27;().&amp;=+$%-]+: )?[0-9a-z_!~*&#x27;().&amp;=+$%-]+@)?&quot;</span> <span class="hljs-comment">//ftp的user@</span><br>        + <span class="hljs-string">&quot;(([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> <span class="hljs-comment">// IP形式的URL- 199.194.52.184</span><br>        + <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-comment">// 允许IP和DOMAIN（域名）</span><br>        + <span class="hljs-string">&quot;([0-9a-z_!~*&#x27;()-]+\.)*&quot;</span> <span class="hljs-comment">// 域名- www.</span><br>        + <span class="hljs-string">&quot;([0-9a-z][0-9a-z-]&#123;0,61&#125;)?[0-9a-z]\.&quot;</span> <span class="hljs-comment">// 二级域名</span><br>        + <span class="hljs-string">&quot;[a-z]&#123;2,6&#125;)&quot;</span> <span class="hljs-comment">// first level domain- .com or .museum</span><br>        + <span class="hljs-string">&quot;(:[0-9]&#123;1,4&#125;)?&quot;</span> <span class="hljs-comment">// 端口- :80</span><br>        + <span class="hljs-string">&quot;((/?)|&quot;</span> <span class="hljs-comment">// a slash isn&#x27;t required if there is no file name</span><br>        + <span class="hljs-string">&quot;(/[0-9a-z_!~*&#x27;().;?:@&amp;=+$,%#-]+)+/?)$&quot;</span>;<br>    <span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(strRegex);<br>    <span class="hljs-keyword">if</span> (re.test(str)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkURL(<span class="hljs-string">&quot;666://www.baidu.com&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkURL(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否包含特殊字符</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断一串字符串是否有特殊字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkQuote</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> items = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>);<br>    items.push(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&lt;&lt;&quot;</span>, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-string">&quot;||&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>);<br>    items.push(<span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;insert&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;drop&quot;</span>, <span class="hljs-string">&quot;alter&quot;</span>, <span class="hljs-string">&quot;trancate&quot;</span>);<br>    str = str.toLowerCase();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str.indexOf(items[i]) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkQuote(<span class="hljs-string">&quot;dwbdwdw&quot;</span>));<br><span class="hljs-built_in">console</span>.log(checkQuote(<span class="hljs-string">&quot;dwbdwdw~&quot;</span>));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否是小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E6%98%AF%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E6%98%AF%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一串字符串是否是小数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkDecimal</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/^-?\d+(\.\d+)?$/g</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;1231.310391&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;-1231.310391&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkDecimal(<span class="hljs-string">&quot;1231.310391a&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li> ? 匹配0次或者一次</li><li>+匹配一次或者多次</li><li>*匹配零次或者多次</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为英文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E8%8B%B1%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证一串字符是否全是英文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEnglish</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">let</span> strTemp = str.charAt(i);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/[a-zA-Z]/</span>.test(strTemp)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isEnglish(<span class="hljs-string">&quot;abcdclkd&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(isEnglish(<span class="hljs-string">&quot;abcdclkd212&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字英文空格半角</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E7%A9%BA%E6%A0%BC%E5%8D%8A%E8%A7%92/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E7%A9%BA%E6%A0%BC%E5%8D%8A%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS检查输入的一串字符是否全部是数字或者英文或半角-或者空格</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 测试字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnNumDashOrSpace</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">let</span> strTemp = str.charAt(i);<br>        <span class="hljs-keyword">if</span> (strTemp == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(<span class="hljs-regexp">/[A-Za-z0-9-]/</span>.test(strTemp)))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkEnNumDashOrSpace(<span class="hljs-string">&quot;sdad11123 -&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkEnNumDashOrSpace(<span class="hljs-string">&quot;sdad11123 -!&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字或者英文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E8%8B%B1%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E8%8B%B1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检查输入的一串字符是否全部是数字或者英文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns  </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnNum</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法一：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// return !(str.match(/^[0-9a-zA-Z]+$/) == null);</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法二：</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[A-Za-z0-9]/</span>.test(str.charAt(i))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;dasdasdas&quot;</span>;<br><span class="hljs-built_in">console</span>.log(checkEnNum(str)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证一串字符是否全为数字</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6%E6%98%AF%E5%90%A6%E5%85%A8%E4%B8%BA%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 检查输入的一串字符是否全部是数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNum</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.match(<span class="hljs-regexp">/\D/</span>) == <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;21315，．：&quot;;//false</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;489641&quot;</span> <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkNum(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>\D匹配一个非数字字符</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证全角</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%85%A8%E8%A7%92/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%85%A8%E8%A7%92/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证全角</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str  字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkHasFull</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str.charCodeAt(i) &gt; <span class="hljs-number">65281</span> &amp;&amp; str.charCodeAt(i) &lt; <span class="hljs-number">65374</span> || str.charCodeAt(i) == <span class="hljs-number">12288</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkHasFull(<span class="hljs-string">&quot;AaBb1234@#%&amp;；，．：&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkHasFull(<span class="hljs-string">&quot;AaBb1234@#%&amp;;,.:&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>半角字符的范围：33 (0x21) ~ 126 (0x7E)</li><li>全角字符的范围：65281 (0xFF01) ~ 65374 (0xFF5E)</li><li>unicode为12288字符为全角空格(&amp;#12288)</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证正整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E6%AD%A3%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E6%AD%A3%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证正整数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>number  数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNumber</span>(<span class="hljs-params">number</span>)</span>&#123;<br>    <span class="hljs-comment">// return /^[1-9]\d*$/.test(number);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^\d+$/</span>.test(number);<br>&#125;<br><span class="hljs-built_in">console</span>.log(checkNumber(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkNumber(-<span class="hljs-number">1</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>+匹配1次或者多次</li><li>*匹配0次或者多次</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证邮政编码</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E9%82%AE%E6%94%BF%E7%BC%96%E7%A0%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E9%82%AE%E6%94%BF%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证邮政编码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 邮政编码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPostCode</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/^[1-9][0-9]&#123;5&#125;$/</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// let str = &quot;423000&quot;; // true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;029000&quot;</span>; <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkPostCode(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>test()和match()方法的区别：</p><ul><li>test():是RegExp的方法，参数是字符串，返回值是布尔类型</li><li>match():是string的方法，参数是正则表达式，返回值是数组</li><li>test():用于检测一个字符串是否匹配某个模式</li><li>match():在字符串内检索指定的值，或者找到一个或者多个正则表达式的匹配</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证密码只能是数字和字母组合</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E5%8F%AA%E8%83%BD%E6%98%AF%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E5%8F%AA%E8%83%BD%E6%98%AF%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证密码必须是字母和数字的组合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>password  密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPasswordValidate</span>(<span class="hljs-params">password</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^(?!^\d+$)(?!^[a-zA-Z]+$)[0-9a-zA-Z]&#123;6,20&#125;$/</span>.test(password);<br>&#125;<br><span class="hljs-comment">// let password = &quot;kjj123&quot;; // true</span><br><span class="hljs-comment">// let password = &quot;kjj&quot;; // false</span><br><span class="hljs-keyword">let</span> password = <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(checkPasswordValidate(password));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>(?!正则):表示在这个位置之后不能出现这个正则</li><li>^(?!^\d+$)<br>表示字符串不能完全由数字组成，即必须包含其他字符</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-09验证用户名</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E5%90%8D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-09%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS检查用户名是否满足要求，只能是英文或英文数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>loginName 登录名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkLoginName</span>(<span class="hljs-params">loginName</span>) </span>&#123;<br>    <span class="hljs-comment">// (^\d*$)全是数字的情况 (^\S+\s+\S+$) 用户名中间全是空白字符 </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[A-Za-z0-9]*$/</span>.test(loginName) &amp;&amp; !<span class="hljs-regexp">/(^\d*$)|(^\S+\s+\S+$)/</span>.test(loginName);<br>&#125;<br><span class="hljs-comment">// let loginName = &quot;kjj&quot;; // true</span><br><span class="hljs-comment">// let loginName = &quot;kjj!&quot; // false</span><br><span class="hljs-comment">// let loginName = &quot;kjj123&quot; // true</span><br><span class="hljs-comment">// let loginName = &quot;kjj    &quot;; // false</span><br><span class="hljs-comment">// let loginName = &quot;123&quot;;// false</span><br><span class="hljs-comment">// let loginName = &quot;   &quot; // false</span><br><span class="hljs-keyword">let</span> loginName = <span class="hljs-string">&quot;kjj    kjj&quot;</span> <span class="hljs-comment">// false </span><br><span class="hljs-built_in">console</span>.log(checkLoginName(loginName));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>(^\d*$) </li><li>^表示以…开始，\d表示数字 * 表示匹配0次或者多次 $表示…结束</li><li>^用在[] 表示非的意思，反面的意思 表示不接受该方括号表达式中的字符集合</li><li>所以正则的意思是：多位数字</li><li>\s匹配任何空白字符。</li><li>\S匹配任何非空白字符。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证银行卡号</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%93%B6%E8%A1%8C%E5%8D%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * luhn算法验证银行卡号(操作奇数位)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>bankno 银行卡号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bankCardCheck</span>(<span class="hljs-params">bankno</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> lastNum = bankno.substr(bankno.length - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//取出校验位</span><br>    <span class="hljs-keyword">let</span> firstNum = bankno.substr(<span class="hljs-number">0</span>, bankno.length - <span class="hljs-number">1</span>); <span class="hljs-comment">// 前15位</span><br>    <span class="hljs-keyword">let</span> newArr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">//倒序的数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = firstNum.length - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>        newArr.push(firstNum.substr(i, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">let</span> arrJiShu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">// 奇数位*2 &lt;9</span><br>    <span class="hljs-keyword">let</span> arrJiShu2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">// 奇数位*2 &gt;9</span><br>    <span class="hljs-keyword">let</span> arrOuShu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 偶数位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newArr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//奇数位</span><br>            <span class="hljs-keyword">if</span> (newArr[i] * <span class="hljs-number">2</span> &lt; <span class="hljs-number">9</span>) &#123;<br>                arrJiShu.push(<span class="hljs-built_in">parseInt</span>(newArr[i]) * <span class="hljs-number">2</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                arrJiShu2.push(<span class="hljs-built_in">parseInt</span>(newArr[i]) * <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arrOuShu.push(newArr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> jishu_child1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 奇数位*2 &gt;9 d的个位数组</span><br>    <span class="hljs-keyword">let</span> jishu_child2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 奇数位*2 &gt;9 d的十位数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrJiShu2.length; i++) &#123;<br>        jishu_child1.push(<span class="hljs-built_in">parseInt</span>(arrJiShu2[i]) % <span class="hljs-number">10</span>);<br>        jishu_child2.push(<span class="hljs-built_in">parseInt</span>(arrJiShu2[i]) / <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">let</span> sum1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> sum4 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrOuShu.length; i++) &#123;<br>        sum1 += <span class="hljs-built_in">parseInt</span>(arrOuShu[i]); <span class="hljs-comment">// 偶数和</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arrJiShu.length; i++) &#123;<br>        sum2 += <span class="hljs-built_in">parseInt</span>(arrJiShu[i]); <span class="hljs-comment">// 奇数*2&lt;9 之和</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; jishu_child1.length; i++) &#123;<br>        sum3 += <span class="hljs-built_in">parseInt</span>(jishu_child1[i]); <span class="hljs-comment">//个位和</span><br>        sum4 += <span class="hljs-built_in">parseInt</span>(jishu_child2[i]); <span class="hljs-comment">// 十位和</span><br>    &#125;<br>    total = sum1 + sum2 + sum3 + sum4;<br>    <span class="hljs-comment">// let k = total % 10 == 0 ? 10 : parseInt(total) % 10;</span><br>    <span class="hljs-comment">// let luhn = 10 - k;</span><br>    <span class="hljs-comment">// if (lastNum == luhn &amp;&amp; lastNum.length != 0) &#123;</span><br>    <span class="hljs-comment">//     return true;</span><br>    <span class="hljs-comment">// &#125; else &#123;</span><br>    <span class="hljs-comment">//     return false;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span> ((total + <span class="hljs-built_in">parseInt</span>(lastNum)) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// let bankno = &quot;5432123456788881&quot;; // true 69</span><br><span class="hljs-comment">// let bankno = &quot;6225365271562822&quot; // true</span><br><span class="hljs-keyword">let</span> bankno = <span class="hljs-string">&quot;622536527156283&quot;</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-built_in">console</span>.log(bankCardCheck(bankno)); <br><br><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li><p>Luhn 算法或是Luhn 公式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">luhn算法特点为：<br><span class="hljs-number">1</span>、反方向排列后，从右往左，隔位乘以<span class="hljs-number">2</span>；<br><span class="hljs-number">2</span>、清理两位数字 ： 如果乘以 <span class="hljs-number">2</span> 得到的数字是两位，即大于等于<span class="hljs-number">10</span>， 就把这两位相加得到一位数字；<br><span class="hljs-number">3</span>、相加模 <span class="hljs-number">10</span>： 把步骤<span class="hljs-number">2</span> 得到的各位数字相加， 以 <span class="hljs-number">10</span> 取模后，用 <span class="hljs-number">10</span> 相减即得到校验数字。<br></code></pre></div></td></tr></table></figure></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证一串字符是否是小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化的手机号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phoneToStar</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-comment">// return str.replace(/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/,&quot;$1****$2&quot;);    // $1就是第一个() 188 $2就是第二个() 9948 没有$3 </span><br>     <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/(\d&#123;3&#125;)(\d&#123;4&#125;)(\d&#123;4&#125;)/</span>,<span class="hljs-string">&quot;$1****$3&quot;</span>); <span class="hljs-comment">// $1就是第一个() 188 $2就是第二个() 3100 $3就是第三个() 9948</span><br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;18831009948&quot;</span>;<br><span class="hljs-built_in">console</span>.log(phoneToStar(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>正则表达式中的括号即可用于分组，同时也用于定义子模式串</li><li>在replace()方法中，参数二中可以使用$n(n为数字)来依次引用模式串中用括号定义的字串。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-08验证邮箱</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-08%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证邮箱格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入的邮箱</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmail</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> emailReg = <span class="hljs-regexp">/^([a-z0-9A-Z]+[-|\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-z0-9A-Z]&#123;2,&#125;$/</span>;<br>    <span class="hljs-keyword">return</span> emailReg.test(str);<br>&#125;<br><span class="hljs-comment">// let str = &quot;11090@qq.com&quot;; //true</span><br><span class="hljs-comment">// let str = &quot;hjkjhk@645654.2121-6878.com.wcn&quot; //true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hjkjhk@645654.2121_6878.com.wcn&quot;</span> <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(isEmail(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>? 表示匹配前面的字表达式零次或者一次，是非贪婪模式的，尽可能少的匹配所搜索的字符串</li><li>邮箱的格式规定</li><li>@之前必须有内容且只能是字母（大小写）、数字、下划线(_)、减号（-）、点（.）</li><li>@和最后一个点（.）之间必须有内容且只能是字母（大小写）、数字、点（.）、减号（-），且两个点不能挨着</li><li> 最后一个点（.）之后必须有内容且内容只能是字母（大小写）、数字且长度为大于等于2个字节，小于等于6个字节</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07切割相应小数点后位数，并将小数点后多余的0清空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%87%E5%89%B2%E7%9B%B8%E5%BA%94%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%BD%8D%E6%95%B0%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E5%A4%9A%E4%BD%99%E7%9A%840%E6%B8%85%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%87%E5%89%B2%E7%9B%B8%E5%BA%94%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%BD%8D%E6%95%B0%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E5%A4%9A%E4%BD%99%E7%9A%840%E6%B8%85%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 切割相应小数点后位数并将小数点后多余的0清空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 带小数的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 小数位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回制定的小数位数，且自动去除多余的0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutRoundNum</span>(<span class="hljs-params">num, len</span>) </span>&#123;<br>    num = num.toString(); <span class="hljs-comment">// 将数字转成字符串 自动去零 2.333</span><br>    num = num.substr(<span class="hljs-number">0</span>, num.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>) + num.substr(num.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>, len);<br>    <span class="hljs-keyword">let</span> regx = num.match(<span class="hljs-regexp">/\d+\.\d+/g</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> regx) &#123;<br>        num = num.replace(regx[index], <span class="hljs-built_in">parseFloat</span>(regx[index]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-built_in">console</span>.log(cutRoundNum(<span class="hljs-number">2.333000</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">// 2.333</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07四舍五入指定位数的小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 四舍五入指定位数的小数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num  数值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 保留位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回四舍五入后指定的小数位数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRound</span>(<span class="hljs-params">num, len</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.round(num * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, len)) / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, len);<br>&#125;<br><span class="hljs-built_in">console</span>.log(getRound(<span class="hljs-number">6.123456</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">//6.1235</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07判断字符串是否为空</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断字符串是否为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str  字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkIsEmpty</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (str !== <span class="hljs-literal">null</span> &amp;&amp; str !== <span class="hljs-literal">undefined</span> &amp;&amp; str !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;你好&quot;; // false</span><br><span class="hljs-comment">// let str = &quot;&quot;; // true</span><br><span class="hljs-comment">// let str = undefined; // true</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-literal">null</span>; <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(checkIsEmpty(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>字符串为空的3种状态：undefined、null、””</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07只可以整数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E6%95%B4%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;clearNoInt(this)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearNoInt</span>(<span class="hljs-params">curObj</span>) </span>&#123;</span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/[^\d]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 清除不是数字以外的所有字符</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07只可以输入小数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%AA%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;clearNoFloat(this)&quot;</span>&gt;</span> // JS允许输入小数位，如果是其他字符，则会替换掉<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearNoFloat</span>(<span class="hljs-params">curObj</span>) </span>&#123;</span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/[^\d.]/g</span>, <span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//清除“数字”和“.”以外的字符</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/^\./g</span>, <span class="hljs-string">&quot;&quot;</span>);  <span class="hljs-comment">//验证第一个字符是数字而不是.</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-regexp">/\.&#123;2,&#125;/g</span>, <span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">//只保留第一个. 清除多余的.</span></span><br><span class="javascript">            curObj.value = curObj.value.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;$#$&quot;</span>).replace(<span class="hljs-regexp">/\./g</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;$#$&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>replace第一个参数为一个字符串时, 它其实做的是文本替换, 所以这里的’$#$’和正则表达式无关, 所以第一次replace只是把字符.替换成’$#$’, 看到后面的代码(第三次<code>replace</code>)又把它转换回来, 可以推测目的只是为了把’.’转换成一个比较特殊的字符防止被第二个正则替换给替换掉</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07现金转大写</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E7%8E%B0%E9%87%91%E8%BD%AC%E5%A4%A7%E5%86%99/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E7%8E%B0%E9%87%91%E8%BD%AC%E5%A4%A7%E5%86%99/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 现金转大写</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>n  现金</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digitUppercase</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> fraction = [<span class="hljs-string">&#x27;角&#x27;</span>, <span class="hljs-string">&#x27;分&#x27;</span>];<br>    <span class="hljs-keyword">let</span> digit = [<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;壹&#x27;</span>, <span class="hljs-string">&#x27;贰&#x27;</span>, <span class="hljs-string">&#x27;叁&#x27;</span>, <span class="hljs-string">&#x27;肆&#x27;</span>, <span class="hljs-string">&#x27;伍&#x27;</span>, <span class="hljs-string">&#x27;陆&#x27;</span>, <span class="hljs-string">&#x27;柒&#x27;</span>, <span class="hljs-string">&#x27;捌&#x27;</span>, <span class="hljs-string">&#x27;玖&#x27;</span>];<br>    <span class="hljs-keyword">let</span> unit = [[<span class="hljs-string">&#x27;元&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span>], [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;拾&#x27;</span>, <span class="hljs-string">&#x27;佰&#x27;</span>, <span class="hljs-string">&#x27;仟&#x27;</span>]];<br>    <span class="hljs-keyword">let</span> head = n &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;欠&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// n&lt;0</span><br>    n = <span class="hljs-built_in">Math</span>.abs(n); <span class="hljs-comment">// n保证整数</span><br>    <span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 结果字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fraction.length; i++) &#123; <span class="hljs-comment">// 先处理小数位的角、分</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)));<br>        <span class="hljs-built_in">console</span>.log(digit[<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>] + fraction[i]);<br>        s += (digit[<span class="hljs-built_in">Math</span>.floor(n * <span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>] + fraction[i]).replace(<span class="hljs-regexp">/零./</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 去掉&#x27;零角这样的字&#x27; .匹配任何单个字符 </span><br>    &#125;<br>    s = s || <span class="hljs-string">&#x27;整&#x27;</span>; <span class="hljs-comment">// 没有零头的情况</span><br>    n = <span class="hljs-built_in">Math</span>.floor(n) <span class="hljs-comment">// 去掉零头在处理</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; unit[<span class="hljs-number">0</span>].length &amp;&amp; n &gt; <span class="hljs-number">0</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> p = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; unit[<span class="hljs-number">1</span>].length &amp;&amp; n &gt; <span class="hljs-number">0</span>; j++) &#123;<br>            p = digit[n % <span class="hljs-number">10</span>] + unit[<span class="hljs-number">1</span>][j] + p; <span class="hljs-comment">// 个 十 佰 千</span><br>            n = <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-number">10</span>); <span class="hljs-comment">// 去掉一位</span><br>        &#125;<br>        s = p.replace(<span class="hljs-regexp">/(零.)*零$/</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-regexp">/^$/</span>, <span class="hljs-string">&#x27;零&#x27;</span>) + unit[<span class="hljs-number">0</span>][i] + s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head + s.replace(<span class="hljs-regexp">/(零.)*零元/</span>, <span class="hljs-string">&#x27;元&#x27;</span>)<br>        .replace(<span class="hljs-regexp">/(零.)+/g</span>, <span class="hljs-string">&#x27;零&#x27;</span>)<br>        .replace(<span class="hljs-regexp">/^整$/</span>, <span class="hljs-string">&#x27;零元整&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(digitUppercase(<span class="hljs-number">10.06</span>)); <span class="hljs-comment">//壹拾元伍角陆分</span><br><span class="hljs-built_in">console</span>.log(digitUppercase(<span class="hljs-number">10</span>)); <span class="hljs-comment">//壹拾元整</span><br><span class="hljs-built_in">console</span>.log(digitUppercase(-<span class="hljs-number">10.06</span>)); <span class="hljs-comment">//欠壹拾元陆分</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>思路：先把零头计算出来，在去计算整数部分</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06获取地址栏的参数值</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%80%BC/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取地址栏的参数值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>url // 地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>name // 参数名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回值或者null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrlParam</span>(<span class="hljs-params">url, name</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>    <span class="hljs-comment">// var r = window.location.search.substr(1).match(reg); // 基于浏览器环境</span><br>    <span class="hljs-keyword">var</span> r = url.substr(<span class="hljs-number">7</span>).match(reg); <span class="hljs-comment">// 自动获取成？之后的内容 t1=1&amp;t2=2&amp;t3=3</span><br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]); <span class="hljs-comment">// 0是t1 1是= 2是值 unescape() 函数可对通过 escape() 编码的字符串进行解码。</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;a.html?t1=1&amp;t2=2&amp;t3=3&quot;</span>;<br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;t1&quot;</span>;<br><span class="hljs-built_in">console</span>.log(getUrlParam(url, name));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>^匹配字符串开头,&amp;就是&amp;字符 (^|&amp;)匹配字符串开头或者&amp;字符,</li><li>加上name变量的内容,[^&amp;]再加上任意个不含&amp;的字符,(&amp;|$)以&amp;或字符串结尾</li><li>*表示可以重复0或N次</li><li>这个正则是寻找&amp;+url参数名字=值+&amp;  (&amp;可以不存在)</li><li>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li><li>test() 方法用于检测一个字符串是否匹配某个模式</li><li> location是包含了相关的url的信息，它是windown的一部分。</li><li>search是一个可以查询的属性，可以查询？之后的部分。</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06判断是否是中文</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%AD%E6%96%87/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是中文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isChinese</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[\u4e00-\u9fa5]+$/i</span>;<br>    <span class="hljs-keyword">if</span> (reg.test(str)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isChinese(<span class="hljs-string">&#x27;孔&#x27;</span>)); <span class="hljs-comment">// true </span><br><span class="hljs-built_in">console</span>.log(isChinese(<span class="hljs-string">&#x27;kong&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>+:表示前面的子表达式至少一次</li><li>/i：表示不区分大小写</li><li>[\u4e00-\u9fa5]是汉字unicode编码的开始和结束</li></ul>          </div><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210731225155.png" alt="image-20210731225147501"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-06时间个性化输出功能</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E6%97%B6%E9%97%B4%E4%B8%AA%E6%80%A7%E5%8C%96%E8%BE%93%E5%87%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-06%E6%97%B6%E9%97%B4%E4%B8%AA%E6%80%A7%E5%8C%96%E8%BE%93%E5%87%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间个性化输出功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>time 传入时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回个性化的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeFormat</span>(<span class="hljs-params">time</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(time),<br>        curDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),<br>        year = date.getFullYear(),<br>        month = date.getMonth() + <span class="hljs-number">1</span>,<br>        day = date.getDate(),<br>        hour = date.getHours(),<br>        minute = date.getMinutes(),<br>        curYear = curDate.getFullYear(),<br>        curHour = curDate.getHours(),<br>        timeStr;<br>    <span class="hljs-keyword">let</span> M = minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minute : minute;<br>    <span class="hljs-keyword">if</span> (year &lt; curYear) &#123;<br>        timeStr = year + <span class="hljs-string">&#x27;年&#x27;</span> + month + <span class="hljs-string">&#x27;月&#x27;</span> + day + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> pastTime = curDate - date,<br>            pastH = pastTime / <span class="hljs-number">3600000</span>; <span class="hljs-comment">//60*60*1000</span><br>        <span class="hljs-built_in">console</span>.log(pastH);<br>        <span class="hljs-keyword">if</span> (pastH &gt; curHour) &#123;<br>            timeStr = month + <span class="hljs-string">&#x27;月&#x27;</span> + day + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pastH &gt;= <span class="hljs-number">1</span>) &#123;<br>            timeStr = <span class="hljs-string">&#x27;今天 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + M + <span class="hljs-string">&#x27;分&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> pastM = curDate.getMinutes() - M;<br>            <span class="hljs-keyword">if</span> (pastM &gt; <span class="hljs-number">1</span>) &#123;<br>                timeStr = pastM + <span class="hljs-string">&#x27;分钟前&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                timeStr = <span class="hljs-string">&#x27;刚刚&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> timeStr;<br>&#125;<br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())); <span class="hljs-comment">// 刚刚</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/31 16:05:00&#x27;</span>)); <span class="hljs-comment">// 今天 16:05分</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/30 16:10:00&#x27;</span>)); <span class="hljs-comment">// 7月30日 16:10</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2020/07/30 16:05:00&#x27;</span>)); <span class="hljs-comment">// 2020年7月30日 16:05</span><br><span class="hljs-built_in">console</span>.log(timeFormat(<span class="hljs-string">&#x27;2021/07/31 22:05:00&#x27;</span>)); <span class="hljs-comment">// 21分钟前</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>// 使用 - 为连接符，就会转换为GMT为基准，会被解析成ISO格式的字符串</p><p>// 使用 / 为连接符，是以本地时区为准</p><p>// 如果时间字符串中存在 - ，都转为 / 之后 new Date</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05日期格式化函数</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日期格式化函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>format 改写Date的format函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回格式化后的结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">Date</span>.prototype.format = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">format</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> o = &#123;<br>        <span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//month</span><br>        <span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-built_in">this</span>.getDate(),    <span class="hljs-comment">//day</span><br>        <span class="hljs-string">&quot;h+&quot;</span>: <span class="hljs-built_in">this</span>.getHours(),   <span class="hljs-comment">//hour</span><br>        <span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-built_in">this</span>.getMinutes(), <span class="hljs-comment">//minute</span><br>        <span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-built_in">this</span>.getSeconds(), <span class="hljs-comment">//second</span><br>        <span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-built_in">Math</span>.floor((<span class="hljs-built_in">this</span>.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>),  <span class="hljs-comment">//quarter</span><br>        <span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-built_in">this</span>.getMilliseconds() <span class="hljs-comment">//millisecond</span><br>    &#125;;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.test(format)) &#123; <span class="hljs-comment">// + 匹配前面的子表达式一次或多次</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">RegExp</span>.$1) <span class="hljs-comment">// yyyy ,RegExp.$1指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">RegExp</span>.$1.length); <span class="hljs-comment">// 4</span><br>        format = format.replace(<span class="hljs-built_in">RegExp</span>.$1, (<span class="hljs-built_in">this</span>.getFullYear() + <span class="hljs-string">&quot;&quot;</span>).substr(<span class="hljs-number">4</span> - <span class="hljs-built_in">RegExp</span>.$1.length)); <span class="hljs-comment">//将yyyy用4位日期替换掉</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123; <span class="hljs-comment">// for-in遍历对象</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).test(format)) <span class="hljs-comment">//o[k]用中括号取值变量</span><br>            format = format.replace(<span class="hljs-built_in">RegExp</span>.$1, <span class="hljs-built_in">RegExp</span>.$1.length == <span class="hljs-number">1</span> ? o[k] : (<span class="hljs-string">&quot;00&quot;</span> + o[k]).substr((<span class="hljs-string">&quot;&quot;</span> + o[k]).length));<br>    &#125;<br>    <span class="hljs-keyword">return</span> format;<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().format(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss SS&quot;</span>)); <span class="hljs-comment">// 2021-07-30 15:22:27 257S</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 本道题涉及的知识点回顾</p><ul><li>创建日期的实例</li><li>正则 + 表示匹配前面的子表达式一次或者多次</li><li>RegExp.$1 与正则表达式匹配的第一个子匹配字符串</li><li>for-in 遍历对象</li><li>o[k]用中括号 进行变量取值</li></ul>          </div><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05生成随机时间戳</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成随机时间戳</span><br><span class="hljs-comment"> * 十三位时间毫秒值+3位随机数(0-10之间,不包括10)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uniqueId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).toString() + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(uniqueId());<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05获取页面高度</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E9%AB%98%E5%BA%A6/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E9%AB%98%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取页面的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回当前页面的高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPageHeight</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// document.compatMode用来判断当前浏览器采用的渲染方式。</span><br>    <span class="hljs-comment">// BackCompat：标准兼容模式关闭。浏览器客户区宽度是document.body.clientWidth；</span><br>    <span class="hljs-comment">// CSS1Compat：标准兼容模式开启。浏览器客户区宽度是 document.documentElement.clientWidth；</span><br>    <span class="hljs-keyword">let</span>  d = <span class="hljs-built_in">document</span>.compatMode == <span class="hljs-string">&quot;BackCompat&quot;</span> ? <span class="hljs-built_in">document</span>.body : <span class="hljs-built_in">document</span>.documentElement;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">document</span>.documentElement.scrollHeight, <span class="hljs-built_in">document</span>.body.scrollHeight, d.clientHeight);<br>&#125;<br><span class="hljs-built_in">console</span>.log(getPageHeight());<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730142338.png" alt="image-20210730142337653"></p>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05判断是否是网址</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%BD%91%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>strUrl 输入的网址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isURL</span>(<span class="hljs-params">strUrl</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> regular = <span class="hljs-regexp">/^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span>;<br>    <span class="hljs-keyword">if</span> (regular.test(strUrl)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// let strUrl = &quot;https://kjjblog.netlify.app/&quot;; // false</span><br><span class="hljs-keyword">let</span> strUrl = <span class="hljs-string">&quot;https://kjjblog.netlify.com/&quot;</span>; <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(isURL(strUrl));<br><span class="hljs-comment">// \b匹配单词的边界</span><br><span class="hljs-comment">// ? 匹配前面的子表达式零次或者一次</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-05设置cookie和获取cookie</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%AE%BE%E7%BD%AEcookie%E5%92%8C%E8%8E%B7%E5%8F%96cookie/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-05%E8%AE%BE%E7%BD%AEcookie%E5%92%8C%E8%8E%B7%E5%8F%96cookie/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置cookie的值(键，值，保存的时间)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>name cookie对应的Name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>value cookie对应的Value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>expiredays 设置过期时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expiredays</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> exdate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-built_in">console</span>.log(exdate); <span class="hljs-comment">// 2021-07-30T03:14:56.716Z 相差8小时，可以使用toString()或者toLocaleString()转换成本地时间</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(exdate)); <span class="hljs-comment">// 1627614896716</span><br>    exdate.setTime(<span class="hljs-built_in">Number</span>(exdate) + expiredays); <span class="hljs-comment">// 设置过期时间</span><br>    <span class="hljs-comment">//escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</span><br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span>(value) + ((expiredays == <span class="hljs-literal">null</span>) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;;expires=&quot;</span> + exdate.toUTCString());<br>&#125;<br>setCookie(<span class="hljs-string">&quot;zhangshan&quot;</span>, <span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br></code></pre></div></td></tr></table></figure><p>在浏览器的环境下运行：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730105418.png" alt="image-20210730105417994"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210730105405.png" alt="image-20210730105404831"></p><p>获取cookie有问题(暂时不做)</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br>十四、JS设置cookie和获取cookie<br>JS设置cookie和获取cookie<br>设置cookie和获取cookie<br>代码如下：<br><br>设置 Cookie：<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置cookie值</span><br><span class="hljs-comment"> * setCookie（键，值，保存时长（毫秒））</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>name cookie对应名字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>value 该cookie对应的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">Hours</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expiredays</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> exdate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    exdate.setTime(<span class="hljs-built_in">Number</span>(exdate) + expiredays);<br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">escape</span>(value) + ((expiredays == <span class="hljs-literal">null</span>) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;;expires=&quot;</span> + exdate.toGMTString());<br>&#125;<br>获取 Cookie：<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JS 获取 Cookie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>name cookie对应名字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;string&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.cookie.length &gt; <span class="hljs-number">0</span>) &#123;<br>        c_start = <span class="hljs-built_in">document</span>.cookie.indexOf(name + <span class="hljs-string">&quot;=&quot;</span>);<span class="hljs-comment">//获取字符串的起点</span><br>        <span class="hljs-keyword">if</span>(c_start != -<span class="hljs-number">1</span>) &#123;<br>            c_start = c_start + name.length + <span class="hljs-number">1</span>;<span class="hljs-comment">//获取值的起点</span><br>            c_end = <span class="hljs-built_in">document</span>.cookie.indexOf(<span class="hljs-string">&quot;;&quot;</span>, c_start);<span class="hljs-comment">//获取结尾处</span><br>            <span class="hljs-keyword">if</span>(c_end == -<span class="hljs-number">1</span>) c_end = <span class="hljs-built_in">document</span>.cookie.length;<span class="hljs-comment">//如果是最后一个，结尾就是cookie字符串的结尾</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURI</span>(<span class="hljs-built_in">document</span>.cookie.substring(c_start, c_end));<span class="hljs-comment">//截取字符串返回</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getCookie(<span class="hljs-string">&quot;zhangshan&quot;</span>));<span class="hljs-comment">//name1</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>对escape()的理解：</p><p>可以对字符串进行编码，在所有计算机上读取该字符串</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-集合引用类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Object"><a href="#一、Object" class="headerlink" title="一、Object"></a>一、Object</h2><ol><li><p>大多数引用值的示例使用的是Object类型</p></li><li><p>创建Object实例的两种方式：</p><ul><li><p>使用new关键字和构造函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></div></td></tr></table></figure></li><li><p>使用对象字面量表示法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>属性名可以是字符串或者数值</p></li><li><p>数值属性会自动转换成字符串</p></li><li><p>使用对象字面量表示法定义对象时，不会调用Object的构造函数</p></li></ul></li><li><p>属性一般通过点语法来存取，也可以使用中括号来存取</p></li><li><p>使用中括号的时候，在括号内使用属性名的字符串形式</p></li><li><p>使用中括号的优势是可以通过变量访问属性</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">let</span> argsName = <span class="hljs-string">&quot;name&quot;</span>;<br><span class="hljs-built_in">console</span>.log(person[argsName]); <span class="hljs-comment">// 小红</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、Array"><a href="#二、Array" class="headerlink" title="二、Array"></a>二、Array</h2><ol><li><p>创建数组实例的几种方式：</p><ul><li><p>使用new关键字和Array构造函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br></code></pre></div></td></tr></table></figure></li><li><p>数组字面量表示法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>]<br></code></pre></div></td></tr></table></figure></li><li><p>使用数组字面量表示法不会调用Array的构造函数</p></li><li><p>ES6新增的方法：from()和of()</p></li><li><p>from()用于将类数组结构转换为数组实例</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(<span class="hljs-string">&quot;Matt&quot;</span>)); <span class="hljs-comment">// [ &#x27;M&#x27;, &#x27;a&#x27;, &#x27;t&#x27;, &#x27;t&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>from()可以将集合和映射转换成一个新数组</p></li><li><p>from()也可以实现浅拷贝</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210729171716.png" alt="img"></p></li><li><p>from()还可以接受第二个可选的映射函数参数，接受第三个参数指定映射函数中的this值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-built_in">Array</span>.from(a1,<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x**<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(a2); <span class="hljs-comment">// [ 1, 4, 9, 16 ]</span><br><span class="hljs-keyword">let</span> a3 = <span class="hljs-built_in">Array</span>.from(a1,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123; <span class="hljs-keyword">return</span> x**<span class="hljs-built_in">this</span>.exponent&#125;,&#123;<span class="hljs-attr">exponent</span>:<span class="hljs-number">2</span>&#125;);<br><span class="hljs-built_in">console</span>.log(a3); <span class="hljs-comment">// [ 1, 4, 9, 16 ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>of()用于将一组参数转换成数组实例</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)); <span class="hljs-comment">// [ 1, 2, 3, 4 ]</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>ES6新增的方法和迭代器将空位当成存在的元素，值是undefined</p></li><li><p>map()会跳过空位</p></li><li><p>join()将空位置看做空字符串</p></li><li><p>数组中常用的方法：</p><p>检测数组：</p><ul><li>如果只有一个网页，instanceof()足以，</li><li>数组本身提供的Array.isArray()方法</li></ul><p>迭代器方法：</p><ul><li>keys()返回数组索引的迭代器</li><li>values()返回数组元素的迭代器</li><li>entires()返回索引/值对的迭代器</li></ul><p>复制和填充方法：</p><ul><li>fill(填充字符，[开始位置]，[结束位置])</li><li>copyWithin(插入开始位置，复制开始位置)</li></ul><p>转换方法：</p><ul><li>toString()返回由数组的每个值的等效字符串拼接而成的一个逗号分隔的字符串</li><li>valueOf()返回数组本身</li><li>想返回不同的分隔符，使用join()方法</li></ul><p>栈方法</p><ul><li>push()方法接收任意数量的参数，返回数组的最新长度</li><li>pop()删除数组的最后一项，返回被删除的项</li><li>使用push()和pop()可以把数组当做栈来使用</li></ul><p>队列方法</p><ul><li>shift()删除数组的第一项，并且返回它</li><li>使用shift()和push()可以把数组当做队列来使用</li><li>unshift()在数组开头添加任意多个值，返回新数组的长度</li><li>使用unshift()和pop()可以在相反方向上模拟队列</li></ul><p>排序方法</p><ul><li><p>reverse()反向排序</p></li><li><p>sort()对数组默认进行的是升序，但是sort()方法会对每一项调用String()函数，然后比较字符串来决定顺序</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>];<br><span class="hljs-built_in">console</span>.log(arr.sort());<span class="hljs-comment">// [ 0, 1, 10, 15, 5 ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>reverse()和sort()都返回调用他们的数组的引用</p></li></ul><p>操作方法</p><ul><li>concat()在现有数组全部元素的基础上创建一个新数组，（连接数组）</li><li>slice()创建一个包含原数组中一个或者多个元素的新数组</li><li>slice(开始索引，[结束索引])</li><li>splice()主要目的是在数组中插入元素</li><li>删除：splice(删除元素的位置，删除元素数量)</li><li>插入：splice(开始位置，0，要插入元素)</li><li>替换：splice(开始位置，删除元素数量，插入的任意多个元素)</li><li>splice()总是返回这样一个数组，他包含从数组中被删除的元素，如果没有元素，返回空数组</li></ul><p>搜索和位置方法</p><ul><li>indexOf()返回要查找的元素在数组中的位置，没有找到返回-1，从数组第一项开始向后搜索</li><li>lastIndexOf()返回要查找的元素在数组中的位置，没有找到返回-1，从数组末尾开始向前搜索</li><li>includes()返回布尔值，表示是否至少找到一个与指定元素匹配的项</li><li>find()从数组的最小索引开始，返回第一个匹配的元素</li><li>findIndex()返回第一个匹配元素的索引</li></ul><p>迭代方法</p><ul><li><p>every()对数组的每一项都运行传入函数，如果每一项都返回true，则这个方法返回true</p></li><li><p>filter()对数组的每一项都运行传入函数，函数返回true的项会组成新数组返回</p></li><li><p>forEach(没有返回值，只是简单的遍历数组</p></li><li><p>map()对数组的每一项都运行函数，返回每次函数调用结果构成的数组</p></li><li><p>some()对数组的每一项都运行函数，如果有一项返回true，则这个方法返回true</p></li><li><p>这些方法，都不改变调用他们的数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> everyResult = numbers.every(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(everyResult); <span class="hljs-comment">// false</span><br><span class="hljs-keyword">let</span> filterResult = numbers.filter(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(filterResult); <span class="hljs-comment">// [ 3, 4, 5, 4, 3 ]</span><br><span class="hljs-keyword">let</span> mapResult = numbers.map(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(mapResult); <span class="hljs-comment">// [ 2, 4, 6, 8, 10, 8, 6, 4, 2]</span><br>numbers.forEach(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(element); <span class="hljs-comment">// 1 2 3 4 5 4 3 2 1</span><br>&#125;);<br><span class="hljs-keyword">let</span> someResult = numbers.some(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element &gt; <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(someResult); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li></ul><p>归并方法</p><ul><li>reduce()从数组的第一项开始遍历到最后一项，接受2个参数，对每一项都会运行的归并函数，以及可选的以之为归并起点的初始值</li><li>传给reduce的函数接受4个参数：上一个归并值，当前项，当前项的索引，数组本身</li><li>返回归并的结果</li><li>reduceRight()从最后一项开始遍历到第一项</li></ul></li></ol><h2 id="三、定型数组-暂时不了解"><a href="#三、定型数组-暂时不了解" class="headerlink" title="三、定型数组(暂时不了解)"></a>三、定型数组(暂时不了解)</h2><h2 id="四、Map"><a href="#四、Map" class="headerlink" title="四、Map"></a>四、Map</h2><ol><li><p>Map是一种新的集合类型</p></li><li><p>使用new关键字和构造函数创建空的映射</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br></code></pre></div></td></tr></table></figure></li><li><p>使用set()方法添加键值对</p></li><li><p>使用get()和has()进行查询 get返回值，has返回布尔值</p></li><li><p>通过size属性返回键值对数量</p></li><li><p>使用delete()和clear()删除值 delete删除一个键值对，clear清空所有键值对</p></li><li><p>Map可以使用任何js数据类型作为键，Object只能使用数值，字符串或者符号作为键</p></li></ol><h2 id="五、WeakMap"><a href="#五、WeakMap" class="headerlink" title="五、WeakMap"></a>五、WeakMap</h2><ol><li>“弱映射”是一种新的集合类型</li><li>WeakMap中的“weak”描述的是js垃圾回收程序对待“弱映射”中键的方式</li></ol><h2 id="六、Set"><a href="#六、Set" class="headerlink" title="六、Set"></a>六、Set</h2><ol><li><p>Set是一种新的集合类型</p></li><li><p>使用new关键字和Set构造函数创建一个空集合</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></div></td></tr></table></figure></li><li><p>使用add()增加值</p></li><li><p>使用has()查询</p></li><li><p>通过size取得元素数量</p></li><li><p>使用delete()和clear()删除元素</p></li><li><p>Set 会维护值插入时的顺序，因此支持按顺序迭代</p></li></ol><h2 id="七、WeakSet"><a href="#七、WeakSet" class="headerlink" title="七、WeakSet"></a>七、WeakSet</h2><ol><li>“弱集合”是一种新的集合类型</li><li>WeakSet中的“weak”描述的是js垃圾回收程序对待“弱集合”中值的方式</li></ol><h2 id="八、小结"><a href="#八、小结" class="headerlink" title="八、小结"></a>八、小结</h2><div class="note note-success">            <ul><li>ECMAScript新增一批引用类型：Map、WeakMap、Set、WeakSet，这些类型为组织应用程序数据和简化内存管理提供了新能力</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否是数字类型</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否是数字类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>value 判断的数字</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDigit</span>(<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/^[0-9]*$/</span>;<br>    <span class="hljs-keyword">if</span> (pattern.exec(value) === <span class="hljs-literal">null</span> || value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(isDigit(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 对/^[0-9]*$/的理解：</p><ul><li>^ 正则匹配的开始</li><li>$正则匹配的结束</li><li>[0-9]匹配0-9</li><li>*匹配之前的子表达式零次或者多次 所以可以匹配到99、9999等数字</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否以某个字符串结束</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否以某个字符串结尾</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>s 匹配字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">endWith</span>(<span class="hljs-params">str, s</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> d = str.length - s.length;<br>    <span class="hljs-keyword">return</span> d &gt;= <span class="hljs-number">0</span> &amp;&amp; str.lastIndexOf(s) === d;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sdasd  sdx adsad asd sa&quot;</span>;<br><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;sa&quot;</span>;<br><span class="hljs-built_in">console</span>.log(endWith(str, s)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 对lastIndexOf的理解：</p><ul><li>从字符串结尾开始查找子字符串，返回下标</li><li>判断是否是结尾下标的方式，就是用str.length-s.length</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04判断是否以某个字符串开头</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否以某个字符串开头</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>s 匹配字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回布尔值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startWith</span>(<span class="hljs-params">str, s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> str.indexOf(s) === <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;sdasd  sdx adsad asd sa &quot;</span>;<br><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;a&quot;</span>; <br><span class="hljs-built_in">console</span>.log(startWith(str, s)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 对indexOf的理解：</p><ul><li>从字符串开头开始查找子字符串，返回下标</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04截取字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 截取字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 原始字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>len 截取的长度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回截取后的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cutStr</span>(<span class="hljs-params">str, len</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> temp; <span class="hljs-comment">// 记录每个字符</span><br>    <span class="hljs-keyword">let</span> icount = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录长度</span><br>    <span class="hljs-comment">// [^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br>    <span class="hljs-keyword">let</span> pattern = <span class="hljs-regexp">/[^\x00-\xff]/</span>;<br>    <span class="hljs-keyword">let</span> resStr = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 返回的字符串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (icount &lt; len - <span class="hljs-number">1</span>) &#123;<br>            temp = str.substr(i, <span class="hljs-number">1</span>); <span class="hljs-comment">//每次截取一个字符</span><br>            <span class="hljs-keyword">if</span> (pattern.exec(temp) == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 没有匹配到双字节字符，返回null</span><br>                icount = icount + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                icount = icount + <span class="hljs-number">2</span>;<br>            &#125;<br>            resStr += temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resStr + <span class="hljs-string">&#x27;......&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// let str = &quot;我爱你，我的祖国&quot;; // 我......</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;fhasjdhklsajhfnolsai&quot;</span>;<span class="hljs-comment">// fh......</span><br><span class="hljs-keyword">let</span> len = <span class="hljs-number">6</span>;<br><span class="hljs-built_in">console</span>.log(cutStr(str, len));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 对/[^\x00-\xff]/的理解：</p><ul><li><p>匹配双字节字符</p></li><li><p>英文字母属于单字节字符，而汉字则属于双字节字符。因为英文字母、数字、符号等完全可以用128种不同的数值来表示，而汉字太多则不能，所以才需要扩展到双字节。</p></li><li><p>一个双字节字符长度计2，ASCII字符计1</p></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-04冒泡排序</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-04%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冒泡排序：每次排序都把最大的放到最后</span><br><span class="hljs-comment"> * 细节：内层j遍历的时候，是当前值j和后一个j+1进行比较，所以j当前值最大控制在length-1</span><br><span class="hljs-comment"> * 当把最大值放到最后，下次遍历就不需要在去比较了，所以控制j=length-1-i</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr 原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回排序后的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maoPaoSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123; <span class="hljs-comment">//当j=length-1时，j+1 = length 最大是length</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">85</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">17</span>, <span class="hljs-number">31</span>, <span class="hljs-number">17</span>, <span class="hljs-number">86</span>, <span class="hljs-number">50</span>]; <span class="hljs-comment">//[17, 17, 24, 31, 50, 63, 85, 86 ]</span><br><span class="hljs-built_in">console</span>.log(maoPaoSort(arr));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-基本引用类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Date"><a href="#一、Date" class="headerlink" title="一、Date"></a>一、Date</h2><ol><li><p>创建日期对象</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></div></td></tr></table></figure></li><li><p>Date.parse()和Date.UTC()都会被Date构造函数隐式调用</p></li><li><p>Date.now()返回方法执行日期和时间的毫秒数</p></li><li><p>Date类型重写了toLocaleString()、toString()和valueOf()方法</p></li><li><p>日期中提供了很多方法，需要的时候，可以查看书籍P106</p></li></ol><h2 id="二、RegExp"><a href="#二、RegExp" class="headerlink" title="二、RegExp"></a>二、RegExp</h2><ol><li>ECMAScript 通过RegExp类型支持正则表达式</li><li>RegExp实例的方法：<ul><li>exec()：只要配合捕获组使用，只接受一个参数，即要应用模式的字符串</li><li>test()：接受一个字符串参数，如果匹配返回true，如果不匹配返回false</li></ul></li></ol><h2 id="三、原始值包装类型"><a href="#三、原始值包装类型" class="headerlink" title="三、原始值包装类型"></a>三、原始值包装类型</h2><ol><li><p>提供3种特殊的引用类型：Boolean、Number、String</p></li><li><p>原始值本身不是对象，逻辑上不应该有方法</p><p>String:</p></li><li><p>但是后台做了很多工作：在以读模式访问字符串的任何时候实际上后台会执行3步：</p><ul><li>创建一个String类型的实例</li><li>调用实例上的特定方法</li><li>销毁实例</li></ul></li><li><p>这种行为可以让原始值拥有对象的行为</p><p>Boolean:</p></li><li><p>Boolean是对应的布尔值的引用类型</p></li><li><p>Boolean的实例会重写valueOf()方法，返回一个原始值true或者false</p></li><li><p>toString()方法被调用时也会被覆盖，返回字符串“true”或者“false”</p><p>Number:</p></li><li><p>Number是对应的数值的引用类型</p></li><li><p>toFixed()返回包含小数点位数的数值字符串</p></li><li><p>toExponential()返回以科学计数法表示的数值字符串</p></li><li><p>toPrecision()方法会根据情况返回最合理的输出结果</p></li><li><p>ES6新增的Number.isInteger()方法，用于辨别一个数值是否保存为整数</p><p>String:</p></li><li><p>String是对应的字符串的引用类型</p></li><li><p>String的3个继承方法：toString、toLocaleString、valueOf可以在所有字符串原值上调用</p></li><li><p>字符串的length属性</p></li><li><p>字符串的操作方法：</p><ul><li>concat():用于将一个或者多个字符串拼接成一个新字符串</li><li>但是更常用的连接字符串的是“+”</li><li>slice():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置</li><li>slice():将所有负值参数都当做字符串长度加上负参数值</li><li>substring():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置</li><li>substring():会将所有负参数值转换成0</li><li>substr():返回字符串的一个子字符串，第一个参数表示子字符串开始的位置，第二个参数表示子字符串的个数</li><li>substr():将第一个负参数值当做字符串长度加上负参数值，第二个负参数值转化成0 </li><li>indexOf()：从字符串开头开始查找子字符串返回下标</li><li>lastIndexOf():从字符串末尾开始查找子字符串返回下标</li><li>startWith():判断字符串是否包含另一个字符串，返回布尔值，从索引0开始</li><li>endWith():检查开始于2个字符串长度的差值</li><li>includes():检查整个字符串</li><li>trim():删除前后所有空格</li><li>repeat():接受一个整数参数，表示将字符串复制多少次</li><li>padStart()、padEnd():复制字符串，如果小于指定长度，则在相应的一边填充字符</li><li>如果长度小于或者等于字符串长度，返回原字符串</li><li>字符串解构: 解构操作符…</li><li>字符串的大小转换：toLowerCase()、toLocaleLowerCase()、toUpperCase()、toLcaleUpperCase()</li><li>match():本质和RegExp对象的exec()方法相同</li><li>replace():第一个参数是字符串或者RegExp对象，第二个参数可以是字符串或者一个函数</li><li>split():会根据传入的分隔符把字符串分割，返回数组</li><li>localeCompare():比较2个字符串，大于返回1，小于返回-1，相等返回0</li></ul></li></ol><h2 id="四、单例内置对象"><a href="#四、单例内置对象" class="headerlink" title="四、单例内置对象"></a>四、单例内置对象</h2><ol><li>2个单例内置对象：Global、Math</li><li>在全局作用域中定义的变量和函数都会变成Global 对象的属性</li><li>通过eval()定义的任何变量和函数都不会被提升</li><li>undefined、NaN、Infinity都是Gobal对象的属性</li><li>所有原生引用类型构造函数比如:Object、Function也都是Global对象的属性</li><li>ECMA-262 没有规定直接访问Global对象的方式</li><li>浏览器将window对象实现为Global对象的代理</li><li>调用一个简单返回this的函数是在执行上下文中获取Global对象通用方式</li><li>Math提供和很多方法，需要时可以查看书籍P132</li></ol><h2 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h2><div class="note note-success">            <p>引用值与传统面向对象编程语言中的类相似，但实现不同</p><p>Date类型提供关于日期和时间的信息</p><p>RegExp类型是ECMAScript支持正则表达式的接口</p><p>由于原始值包装类型的存在，Js中的原始值可以当做对象来使用</p><p>当代码开始执行的时候，全局上下文会存在2个内置对象：Global和Math</p><p>Global对象在大多数ECMAScript实现中无法直接访问，不过浏览器将其实现为window对象</p><p>所有全局变量和函数都是Global对象的属性</p>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-变量、作用域与内存</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、原始值与引用值"><a href="#一、原始值与引用值" class="headerlink" title="一、原始值与引用值"></a>一、原始值与引用值</h2><ol><li>原始值就是最简单的数据</li><li>引用值则是多个值构成的对象</li><li>保存原始值的变量是按照值访问的</li><li>引用值是保存在内存中的对象</li><li>js不允许直接访问内存位置，也就不能直接操作对象所在的内存空间，在操作对象时，实际上操作的是对对象的引用</li><li>保存引用值的变量是按照引用访问的</li><li>对于引用值可以随时添加、修改、删除其属性和方法</li><li>只有引用值可以动态添加后面可以使用的属性</li><li>原始值：通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置</li><li>引用值：通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置，区别是，这里复制的值其实是一个指针，指向存在堆内存中的对象，操作完成后，两个变量实际上指向同一个对象</li><li>变量分为按照值和引用访问，而传参只有按照值传递</li><li>typeof用于检测原始数据类型，instanceof用于检测引用数据类型</li><li>所以引用值都是Object实例</li></ol><h2 id="二、执行上下文和作用域"><a href="#二、执行上下文和作用域" class="headerlink" title="二、执行上下文和作用域"></a>二、执行上下文和作用域</h2><ol><li>在浏览器中，全局上下文就是我们常说的window对象</li><li>全局上下文在应用程序退出时才销毁，比如关闭网页或退出浏览器</li><li>程序的执行流是通过上下文栈进行控制的</li><li>内部上下文可以通过作用域链访问外部上下文中的一切，但是外部上下文无法访问内部上下文中的任何东西</li><li>使用var的函数作用域声明</li><li>使用let的块级作用域声明</li><li>使用const声明的变量必须同时初始化为某个值</li></ol><h2 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h2><ol><li><p>垃圾回收的两种方式：标记清理和引用计数</p></li><li><p>引用计数存在循环引用的问题</p></li><li><p>循环引用就是对象A有一个指针指向对象B，而对象B也引用了对象A</p></li><li><p>分配给浏览器的内存通常比分配给桌面软件的要少的多，分配给移动浏览器的就更少了</p></li><li><p>将内存占用量保持在一个较小的值可以让页面的性能更好</p></li><li><p>解除对一个值的引用并不会自动导致相关的内存被回收，解除引用的关键是，确保相关的值不在上下文里了，他在下次垃圾回收的时候会被回收</p></li><li><p>Chorme是最流行的浏览器，使用的V8 JavaScript引擎</p></li><li><p>苹果浏览器使用的JavaScriptCore引擎</p></li><li><p>Chorme分为html渲染和JavaScrpit解析</p><ul><li>html渲染采用的是webkit的代码,</li><li>js解析采用的自己的框架V8 JavaScript引擎</li></ul></li><li><p>使用js闭包很容易在不知不觉之间造成内存泄漏</p></li><li><p>js的特点：内部变量可以访问外部变量，或者说子对象可以访问父对象的属性和方法</p></li><li><p>闭包：能够读取其他函数内部变量的函数</p></li><li><p>为了提升javascript的性能，可以采用静态分配和对象池</p></li></ol><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><div class="note note-success">            <p>原始值的大小固定，保存在栈内存</p><p>引用值是对象，保存在堆内存</p><p>typeof确定值的原始类型，instanceof确定值的引用类型</p><p>执行上下文分为全局上下文、函数上下文和块级上下文</p><p>javascript的垃圾回收机制：</p><p>离开作用域的值会被标记成可回收，然后垃圾回收期间被删除</p><p>主流的垃圾回收算法是标记清理</p><p>引用计数是另一种垃圾回收机制</p><p>引用计数在代码中存在循环引用的时候会出现问题</p><p>为了促进内存回收，全局对象，全局对象的属性和循环引用在不需要的时候，都要解除引用</p>          </div>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03打乱数组</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打乱数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arrOld 原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>num 打乱的个数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回打乱后的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upsetOld</span>(<span class="hljs-params">arrOld, num</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = []; <span class="hljs-comment">// 结果数组</span><br>    <span class="hljs-keyword">let</span> _length = num || arrOld.length; <span class="hljs-comment">// 打乱的个数</span><br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Object</span>.assign([], arrOld); <span class="hljs-comment">//Object.assign方法用于对象的合并</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; _length; i++) &#123; <span class="hljs-comment">// 删除随机的一位，然后去第一位放入结果数组</span><br>        result.push(arr.splice(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * arr.length), <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">let</span> arrOld = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.log(upsetOld(arrOld)); <span class="hljs-comment">//[ 5, 2, 7, 6, 1,  9, 4, 8, 0, 3]</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>对Object.assign()的理解：</p><ul><li>合并目标数组和原数组，,目标数组相同的键会被原数组覆盖</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> target = &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-attribute">const</span> source = &#123; b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;;<br><span class="hljs-attribute">const</span> returnedTarget = Object.assign(target, source);<br><span class="hljs-attribute">console</span>.log(target);//  &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;<br><span class="hljs-attribute">console</span>.log(returnedTarget);//  &#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">4</span>, c: <span class="hljs-number">5</span> &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p> 此方法只会拷贝源对象自身的并且可枚举的属性到目标对象</p></li><li><p>Object.assign进行的拷贝是浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123;<span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);<br> <br>obj1.a.b = <span class="hljs-number">2</span>;<br>obj2.a.b <span class="hljs-comment">// 2</span><br>由于是浅拷贝，所以属性a的内部有任何变化，都会在目标对象上呈现出来。<br></code></pre></div></td></tr></table></figure></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-07反序字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%8D%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-07%E5%8F%8D%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串反序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回反序字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isReverse</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span><br>    <span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse()); <span class="hljs-comment">//[ &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27; ]</span><br>    <span class="hljs-keyword">return</span> str.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// bca</span><br>&#125;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(isReverse(str));<br></code></pre></div></td></tr></table></figure><div class="note note-success">            <ul><li>字符串反序通过数组使用</li><li>利用split()转成数组</li><li>利用数组的方法reverse()翻转</li><li>在利用join连接数组，返回字符串</li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03数组去重</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组去重</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arrs  参数数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>去重数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeReapt</span>(<span class="hljs-params">arrs</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">let</span> json = &#123;&#125;;<span class="hljs-comment">// 定义标记数组 换成temp [] 可以达到一样的效果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arrs.length; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!json[arrs[i]]) &#123; <span class="hljs-comment">// json[arr[i]] 的值是undefined 是假值</span><br>            arr.push(arrs[i]);<br>            json[arrs[i]] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 每放进去一值，就做标记1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">let</span> arrs = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">79</span>, <span class="hljs-number">11</span>, <span class="hljs-number">46</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">46</span>];<br><span class="hljs-built_in">console</span>.log(removeReapt(arrs)); <span class="hljs-comment">// [ 11, 22, 33, 79, 46, 97 ]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-03格式化金额</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%91%E9%A2%9D/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-03%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%91%E9%A2%9D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化金额(没有分析)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>money 输入的钱数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>type 是否带小数点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params">money , type</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[^0-9\.]/</span>.test(money))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">if</span> (money == <span class="hljs-literal">null</span> || money == <span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    money = money.toString().replace(<span class="hljs-regexp">/^(\d*)$/</span>, <span class="hljs-string">&quot;$1.&quot;</span>);<br>    money = (money + <span class="hljs-string">&quot;00&quot;</span>).replace(<span class="hljs-regexp">/(\d*\.\d\d)\d*/</span>, <span class="hljs-string">&quot;$1&quot;</span>);<br>    money = money.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/(\d)(\d&#123;3&#125;,)/</span>;<br>    <span class="hljs-keyword">while</span> (re.test(money))<br>        money = money.replace(re, <span class="hljs-string">&quot;$1,$2&quot;</span>);<br>    money = money.replace(<span class="hljs-regexp">/,(\d\d)$/</span>, <span class="hljs-string">&quot;.$1&quot;</span>);<br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 不带小数位(默认是有小数位)</span><br>        <span class="hljs-keyword">var</span> a = money.split(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;00&quot;</span>) &#123;<br>            money = a[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> money;<br>&#125;<br><span class="hljs-built_in">console</span>.log(convert(<span class="hljs-number">123</span>)); <span class="hljs-comment">// 123.00</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02判断2个数组相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%88%A4%E6%96%AD2%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%88%A4%E6%96%AD2%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断2个数组相等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 参数1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 参数2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回boolean值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr1 === arr2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (arr1.length != arr2.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr1[i] !== arr2[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.log(arrayEqual(arr1,arr2)); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02验证身份证</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IdentityCodeValid</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> myreg = <span class="hljs-regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\d&#123;3&#125;(\d|[xX])$/i</span>;<br>    <span class="hljs-keyword">return</span> myreg.test(str);<br>&#125;<br><span class="hljs-built_in">console</span>.log(IdentityCodeValid(<span class="hljs-string">&quot;150316199910123446&quot;</span>));<span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02验证手机号</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>str 传入的手机号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verifyPhoneNumberFormat</span>(<span class="hljs-params">str</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> myreg = <span class="hljs-regexp">/^((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(17[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;$/</span>;<br>    <span class="hljs-keyword">return</span> myreg.test(str);<br>&#125;<br><span class="hljs-built_in">console</span>.log(verifyPhoneNumberFormat(<span class="hljs-string">&quot;15031679910&quot;</span>)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>对正则的理解：</p><p>/^((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8}$/;</p><p>^ 正则的开始</p><p>$ 正则的结束</p><p>13[0-9]{1} 表示数值可以是130、131、132…这样子，{1}表示匹配一位</p><p>\d：匹配一个数字字符。等价于[0-9]</p><p>{8}：匹配次数8次</p><p>\d{8}：任意的8个数字</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02生成uuid</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E7%94%9F%E6%88%90uuid/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E7%94%9F%E6%88%90uuid/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成uuid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateUUID</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//返回13位的毫秒数 从1970年1月1日到现在的北京时间</span><br>    <span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>    <span class="hljs-comment">//  /[xy]/g 是匹配字符串中的x或者y或者多个xy</span><br>    <span class="hljs-comment">// /g表示查找所以可能的匹配，返回结果是多个，如果不加/g最多只会匹配一个</span><br>    <span class="hljs-keyword">var</span> uuid = <span class="hljs-string">&#x27;xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx&#x27;</span>.replace(<span class="hljs-regexp">/[xy]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(c); // c的值是替换后的值xxxxxxxxxxxxxxxyxxxxxxxxxxxxxxx</span><br>        <span class="hljs-keyword">let</span> r = (d + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">16</span>) % <span class="hljs-number">16</span> | <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> (c == <span class="hljs-string">&#x27;x&#x27;</span> ? r : (r &amp; <span class="hljs-number">0x7</span> | <span class="hljs-number">0x8</span>)).toString(<span class="hljs-number">16</span>);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> uuid;<br>&#125;<br><span class="hljs-built_in">console</span>.log(generateUUID()); <span class="hljs-comment">//ee465953237b4f16a500bb4b1b96c0ff</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p> 对/[xy]/g的理解：</p><p> /[xy]/g 是匹配字符串中的x或者y或者多个xy</p><p> /g表示查找所以可能的匹配，返回结果是多个，如果不加/g最多只会匹配一个</p><p>如果上述的程序不加/g得到结果是： 5xxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx 只会匹配一个字符</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-01产生随机字符串</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-01%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-01%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 产生随机字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>radomFlag 用户是否设置位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>min 最小位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>max 最大位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span>返回生成的字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomWord</span>(<span class="hljs-params">radomFlag, min, max</span>) </span>&#123;<br>    <span class="hljs-comment">//结果字符串</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">// 位数 </span><br>    range = min;<br>    arr = [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>];<br>    <span class="hljs-comment">//设置产生位数与否</span><br>    <span class="hljs-keyword">if</span> (radomFlag) &#123;<br>        <span class="hljs-comment">// 产生min-max位的随机字符串</span><br>        range = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * (max - min)) + min;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; range; i++) &#123;<br>        <span class="hljs-comment">// 产生0-arr.length 的随机数</span><br>        <span class="hljs-keyword">let</span> pos = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * (arr.length - <span class="hljs-number">1</span>));<br>        str += arr[pos];<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-comment">// 生成3-32位的随机字符串</span><br><span class="hljs-keyword">let</span> str1 = randomWord(<span class="hljs-literal">true</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>);<br><span class="hljs-comment">// 生成32位随机字符串</span><br><span class="hljs-keyword">let</span> str2 = randomWord(<span class="hljs-literal">false</span>, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.log(str1); <span class="hljs-comment">// JWrQ5AmSv702B7X2J0A4o5mBO</span><br><span class="hljs-built_in">console</span>.log(str2); <span class="hljs-comment">// 5mKY</span><br></code></pre></div></td></tr></table></figure><div class="note note-success">            <p>对Math.radom()的理解：生成随机的大于等于0.0且小于1.0的double值</p><p>返回指定范围(m-n)的随机数的公式</p><p>Math.radom()*(n-m)+m;</p><p>比如生成3-32位的随机数：Math.radom()*(32-3)+3;</p><p>Math.radom() 生成的是0.0-1.0,</p><p>Math.radom()*(32-3)生成的是0-29</p><p>Math.radom()*(32-3)+3 生成的是3-32</p>          </div>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-语言基础</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><ol><li>ECMAScript中的一切都区分大小写</li><li>即使语句的末尾分号不是必须的，也应该加上</li><li>if之类的控制语句即使只有一行，也应该加上{}</li></ol><h2 id="二、关键字和保留字"><a href="#二、关键字和保留字" class="headerlink" title="二、关键字和保留字"></a>二、关键字和保留字</h2><h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><ol><li><p>ECMAScript的类型系统是松散的，有3个关键字可以申明变量：var、let、const</p></li><li><p>var声明：</p><ul><li><p>var初始化变量只是一个简单的赋值，还是可以改变他的值，或者数据类型</p></li><li><p>var声明的范围是函数作用域，在整个函数内部，都可以使用</p></li><li><p>在函数内部定义变量时，省略var操作符，意味着定义了一个全局变量</p></li><li><p>var存在变量提升，以下代码不会报错，是因为var声明的变量会自动提升到函数作用域顶部</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-keyword">var</span> age =<span class="hljs-number">26</span>;<br>&#125;<br>foo();<br></code></pre></div></td></tr></table></figure></li><li><p>以上的代码等价于如下的代码</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> age ;<br>    <span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// undefined</span><br>    age =<span class="hljs-number">26</span>;<br>&#125;<br>foo();<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>let声明：</p><ul><li>let 关键字声明的范围是块级作用域，var声明的是函数作用域</li><li>块作用域是函数作用域的子集</li><li>let不允许在同一个块作用域中出现冗余声明</li><li>let声明的变量不会在作用域中被提升</li><li>暂时性死区，不能以任何方式来引用未声明的变量，在let声明之前的执行瞬间成为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出错误</li><li>必须确保页面不会重复声明同一个变量</li></ul></li><li><p>const声明：</p><ul><li>const声明的变量必须同时初始化变量</li><li>尝试修改const声明的变量会导致运行时错误</li><li>如果const变量引用的是一个对象，那么修改这个对象内部的属性并不违反const限制</li><li>推荐使用：不使用var，const优先，let次之</li></ul></li></ol><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><ol><li>JS的数据类型分为原始数据类型和引用数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined</li><li>引用数据类型：Object、Array、Function</li></ul></li><li>ES的数据类型分为原始数据类型和引用数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined、Symbol</li><li>引用数据类型：Object</li></ul></li><li>TS的数据类型<ul><li>原始数据类型：Boolean、String、Number、Null、Undefined、Symbol、BigInt</li><li>Any、Never、void、数组、元组、枚举、联合</li><li>函数、对象、数组</li></ul></li><li>typeof操作符<ul><li>typeof null 返回的是object 特殊值null被认为是一个对空对象的引用</li></ul></li><li>undefined类型<ul><li>使用var和let声明变量但是没有初始化，就相当于给变量赋值了undefined值</li><li>undefined是一个假值</li></ul></li><li>null类型<ul><li>在定义将来要保存对象的变量的时候，建议使用null初始化</li><li>只要变量要保存对象，而且当时又没有对象可以保存，就要使用null来填充变量</li></ul></li><li>boolean类型<ul><li>在es中，true不等于1，false不等于0</li><li>True和False是有效的标识符，因为es严格区分大小写</li></ul></li><li>number类型<ul><li>八进制字面量第一个值是0</li><li>十六机制字面量第一个值是0x</li><li>es并不支持世界上所有的数值</li><li>超出范围，js的数值会自动转换成一个特殊的值Infinity</li><li>有一个特殊的数值NaN，意思是：不是数值</li><li>NaN不等于自己</li><li>isNaN()函数，任何不能转换为数值的值都会导致这个函数的返回值是true</li><li>数值转换：Number()、praseInt()、parseFloat()</li></ul></li><li>string类型<ul><li>字符串可以使用双引号(“”)、单引号(‘’)、反引号(`)标示</li><li>转义序列表示一个字符，所以只算一个字符</li><li>字符转换：toString()、String()转型函数、加号给一个值加上””</li><li>null和undefined没有toString()方法</li><li>字符串插值通过${}实现</li></ul></li><li>symbol类型<ul><li>符号的用途是确保对象属性使用唯一标识符</li><li>（暂时不学）</li></ul></li><li>object类型<ul><li>Object是派生其他对象的基类</li><li>Object类型的所有属性和方法在派生对象上同样存在</li><li>每个Object实例都有的属性和方法<ul><li>constructor 用于创建当前对象的函数</li><li>hasOwnProperty(propertyName) 判断当前对象的实例，是否存在给定的属性</li><li>isPrototypeOf(object)用于判断当前对象是否为另一个对象的原型</li><li>propertyIsEnumerable(propertyName)用于判断给定的属性是否可以使用for-in语句枚举</li><li>toLocaleString() 返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</li><li>toString()返回对象的字符串表示</li><li>valueOf()返回对象对应的字符串、数值或者布尔值表示</li></ul></li></ul></li></ol><h2 id="五、操作符"><a href="#五、操作符" class="headerlink" title="五、操作符"></a>五、操作符</h2><ol><li>操作符<ul><li>一元操作符：++、–、+、-、</li><li>位操作符：~、|、&amp;、^、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li><li>布尔操作符：！、&amp;&amp;、||、</li><li>乘性操作符：*、/</li><li>指数操作符：**</li><li>加性操作符：+、-</li><li>关系操作符：&lt;、&gt;、&lt;=、&gt;=、</li><li>相等操作符：==、!=、===、!==</li><li>条件操作符：？：</li><li>赋值操作符：=</li><li>逗号操作符：，</li></ul></li></ol><h2 id="六、语句"><a href="#六、语句" class="headerlink" title="六、语句"></a>六、语句</h2><ol><li><p>if语句</p></li><li><p>do-while语句:会执行一次代码，在进行判断</p></li><li><p>while语句:先进行判断在执行代码</p></li><li><p>for语句</p></li><li><p>for-in语句：for-in语句用来遍历对象</p></li><li><p>for-of语句:用来遍历数组</p><ul><li><p>对象遍历</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.for in 遍历 循环会遍历对象自身的和继承的可枚举属性</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-comment">// console.log(index);</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> index); <span class="hljs-comment">// string</span><br>    <span class="hljs-built_in">console</span>.log(arr[index]);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 2.Object.keys()遍历 返回一个数组,包括对象自身的(不含继承的)所有可枚举属性</span><br><span class="hljs-built_in">Object</span>.keys(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 3.Object.getOwnPropertyNames(obj)遍历 ,包含对象自身的所有属性</span><br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;getOwnPropertyNames下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 4.Reflect.ownKeys(obj)遍历</span><br><span class="hljs-built_in">Reflect</span>.ownKeys(arr).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Reflect.ownKeys下标&#x27;</span> + key, <span class="hljs-string">&#x27;值&#x27;</span> + arr[key]);<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>数组遍历</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.普通的for循环</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 2.优化for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr.length; i &lt; len; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(arr[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 3.forEach循环 不可以使用break return</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, i</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 3.forEach循环 不可以使用break return</span><br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(index);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 4.map遍历 不可以使用break return</span><br>arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, i</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;map遍历----&gt;&#x27;</span> + <span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 4.map遍历 不可以使用break return</span><br>arr.map(<span class="hljs-function">(<span class="hljs-params">value, i</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;map遍历----&gt;&#x27;</span> + <span class="hljs-string">&#x27;值&#x27;</span> + value, <span class="hljs-string">&#x27;下标&#x27;</span> + i);<br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 5.for of 方法正确响应break、continue和return语句 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>forEach和map的区别</p><ul><li><p>map遍历数组有返回值，返回值是处理后的新数组</p></li><li><p>map不会对空数组进行检测，map方法不改变原数组</p></li><li><p>forEach是没有返回值的，是undefined</p></li><li><p>forEach方法用来调用数组的每个元素，将元素传给回调函数</p></li><li><p>forEach对于空数组是不会调用回调函数的</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> str = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// &#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [ 1, 2, 3, 4, 5, 6 ]</span><br>    <span class="hljs-keyword">return</span> item / <span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(str); <span class="hljs-comment">// [ 0.5, 1, 1.5, 2, 2.5, 3 ]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str1 = arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, inex, arr</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// &#123;&#125;</span><br>    <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [ 1, 2, 3, 4, 5, 6 ]</span><br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>&#125;, <span class="hljs-built_in">this</span>);<br><span class="hljs-built_in">console</span>.log(str1); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>标签语句：可以通过break或者continue语句引用</p></li><li><p>break语句和continue语句</p><ul><li>break语句：用于立即退出循环，强制执行循环后的下一条语句</li><li>continue语句：用于立即退出循环，但是会再次从循环顶部开始执行</li></ul></li><li><p>with语句(不推荐)</p></li><li><p>switch语句： 在比较每个条件的值的时候采用的是全等于的方法</p></li></ol><h2 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h2><ol><li>ECMAScript中的函数不需要指定是否返回值</li><li>任何函数在任何时间都可以使用return语句来返回函数的值</li><li>不指定返回值的函数实际上返回值是undefined</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-html中的js</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-html%E4%B8%AD%E7%9A%84js/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-html%E4%B8%AD%E7%9A%84js/</url>
    
    <content type="html"><![CDATA[<h2 id="一、html中的js"><a href="#一、html中的js" class="headerlink" title="一、html中的js"></a>一、html中的js</h2><ol><li>javascript通过&lt;script、&gt;标签插入html中，也可以引入保存在外部文件中的javascript</li><li>所有的&lt;script、&gt;会根据他们在网页中出现的次序依次被解析</li><li>对于不推迟执行的脚本，浏览器必须解释完&lt;script、&gt;标签中的内容，才去渲染界面的其他内容</li><li>可以使用defer推迟脚本的执行，可以将脚本延迟到文档解析和加载完成后再运行脚本</li><li>async表示不需要等待其他脚本的加载，也不需要阻塞文档的渲染，即实现异步加载，但是异步加载不能保证他们按照web中的顺序执行</li><li>使用&lt;noscript、&gt;标签，可以解决浏览器不支持脚本的时候显示内容，如果浏览器支持脚本，那么&lt;noscript、&gt;的内容永远不会被看到</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-红宝书-什么是javascript</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E4%BB%80%E4%B9%88%E6%98%AFjavascript/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/js-%E7%BA%A2%E5%AE%9D%E4%B9%A6/js%E5%9F%BA%E7%A1%80js-%E7%BA%A2%E5%AE%9D%E4%B9%A6-%E4%BB%80%E4%B9%88%E6%98%AFjavascript/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对js的认识"><a href="#一、对js的认识" class="headerlink" title="一、对js的认识"></a>一、对js的认识</h2><ol><li>js是专门用来进行网页交互的语言</li><li>js包括3大核心内容<ul><li>ECMAscript  制定标准，ES是js基本语法的规范，js是ES的实现</li><li>DOM：提供与网页内容进行交互的方法和接口</li><li>BOM：提供与浏览器进行交互的方法和接口</li></ul></li><li>js的这3部分都得到了5个web浏览器（IE、Firefox、Chorme、Safari、Opera）不同程度的支持，基本上对ES5都是支持的，对ES6的支持也在不断完善。</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js-红宝书</category>
      
      <category>js基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-方法总结</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0js-%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0js-%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、every"><a href="#一、every" class="headerlink" title="一、every"></a>一、every</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1.every()方法：判断年龄是否都大于18岁</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">everyFun</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item &gt;= <span class="hljs-number">18</span>;<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.数组长度相等的基础</span><br>    <span class="hljs-comment">// 2.判断数组1和数组2的成员是否相同</span><br>    <span class="hljs-comment">// 3.every()函数对数组的每一项执行函数，如果都满足返回true</span><br>    <span class="hljs-comment">// 4.some()函数对数组的每一项执行函数，如果有一项满足返回true</span><br>    <span class="hljs-keyword">return</span> arr1.length === arr2.length &amp;&amp; arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item === arr2[index];<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h2 id="二、reduce"><a href="#二、reduce" class="headerlink" title="二、reduce"></a>二、reduce</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 2.reduce()方法，输出数组的总和</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceFun</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> result + item;<br>    &#125;, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(reduceFun(arr1));<span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattens</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-comment">// reduce()函数</span><br>    <span class="hljs-comment">// 1.reduce 包含2个参数，回调函数，初始值arr.reduce(callback,[initialValue])</span><br>    <span class="hljs-comment">// 2.回调函数包含4个参数 </span><br>    <span class="hljs-comment">// total初始值，或者计算结束后的返回值 必须</span><br>    <span class="hljs-comment">// currentValue 当前元素             必须</span><br>    <span class="hljs-comment">// currentIndex 当前元素的下标</span><br>    <span class="hljs-comment">// arr          当前元素所属的数组对象</span><br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;result:&#x27;+ result);</span><br>        <span class="hljs-comment">// console.log(&#x27;item:&#x27;+ item);</span><br>        <span class="hljs-keyword">return</span> result.concat(<span class="hljs-built_in">Array</span>.isArray(item) ? flatten(item) : item)<br>    &#125;, [])<br>&#125;<br><span class="hljs-built_in">console</span>.log(flattens([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])); <span class="hljs-comment">//[1,2,2,3]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02快速排序</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 方法一：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">var</span> left = []; <span class="hljs-comment">// 左边小容器</span><br>    <span class="hljs-keyword">var</span> right = []; <span class="hljs-comment">// 右边大容器</span><br>    <span class="hljs-keyword">var</span> k = arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 第一个值是基准</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= k) &#123;<br>            left.push(arr[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right.push(arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 继续递归左右容器</span><br>    <span class="hljs-keyword">return</span> quickSort(left).concat([k], quickSort(right));<br><span class="hljs-comment">// &#125;方法二：</span><br><span class="hljs-keyword">const</span> quickSort = <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> sort = <span class="hljs-function">(<span class="hljs-params">arr, left = <span class="hljs-number">0</span>, right = arr.length - <span class="hljs-number">1</span></span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<span class="hljs-comment">//如果左边的索引大于等于右边的索引说明整理完毕</span><br>      <span class="hljs-keyword">return</span><br>     &#125;<br>    <span class="hljs-keyword">let</span> i = left<br>    <span class="hljs-keyword">let</span> j = right<br>    <span class="hljs-keyword">const</span> baseVal = arr[j] <span class="hljs-comment">// 取无序数组最后一个数为基准值</span><br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<span class="hljs-comment">//把所有比基准值小的数放在左边大的数放在右边</span><br>     <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= baseVal) &#123; <span class="hljs-comment">//找到一个比基准值大的数交换</span><br>      i++<br>     &#125;<br>     arr[j] = arr[i] <span class="hljs-comment">// 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）</span><br>     <span class="hljs-keyword">while</span> (j &gt; i &amp;&amp; arr[j] &gt;= baseVal) &#123; <span class="hljs-comment">//找到一个比基准值小的数交换</span><br>      j--<br>    &#125;<br>     arr[i] = arr[j] <span class="hljs-comment">// 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）</span><br>    &#125;<br>    arr[j] = baseVal <span class="hljs-comment">// 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）</span><br>    sort(arr, left, j-<span class="hljs-number">1</span>) <span class="hljs-comment">// 将左边的无序数组重复上面的操作</span><br>    sort(arr, j+<span class="hljs-number">1</span>, right) <span class="hljs-comment">// 将右边的无序数组重复上面的操作</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> newArr = array.concat() <span class="hljs-comment">// 为了保证这个函数是纯函数拷贝一次数组</span><br>    sort(newArr)<br>    <span class="hljs-keyword">return</span> newArr<br>   &#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">76</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">49</span>];<br><span class="hljs-built_in">console</span>.log(quickSort(arr)); <span class="hljs-comment">// [13, 27, 38, 49,49, 65, 76, 97 ]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02数组相等</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr1.length != arr2.length) &#123; <span class="hljs-comment">//长度不同</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123; <span class="hljs-comment">// 依次遍历数组元素</span><br>        <span class="hljs-keyword">if</span> (arr1[i] !== arr2[i]) &#123; <span class="hljs-comment">// 判断是否相等，用了强不等于</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<span class="hljs-comment">// false</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr1 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>arr2 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns </span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrsEqual</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.数组长度相等的基础</span><br>    <span class="hljs-comment">// 2.判断数组1和数组2的成员是否相同</span><br>    <span class="hljs-comment">// 3.every()函数对数组的每一项执行函数，如果都满足返回true</span><br>    <span class="hljs-comment">// 4.some()函数对数组的每一项执行函数，如果有一项满足返回true</span><br>    <span class="hljs-keyword">return</span> arr1.length === arr2.length &amp;&amp; arr1.every(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item === arr2[index];<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arrsEqual(arr1, arr2));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-02数组扁平化</title>
    <link href="/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <url>/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/jsjs-02%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法一：数组扁平化，如果是数字，就放入数组，如果是数组，递归处理</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], <span class="hljs-number">9</span>], <span class="hljs-number">10</span>, [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flatten</span>(<span class="hljs-params">arr</span>) </span>&#123; <span class="hljs-comment">// 参数要传值，不然会导致栈无穷大</span><br>    <span class="hljs-keyword">let</span> flatArr = []; <span class="hljs-comment">//避免定义全局变量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> arr[i] == <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>            flatArr.push(arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(arr[i])) &#123; <span class="hljs-comment">// 如果是数组</span><br>            flatArr = flatArr.concat(flatten(arr[i]));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flatArr;<br>&#125;<br><span class="hljs-comment">// console.log(flatten(arr));</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法二：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flattens</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-comment">// reduce()函数</span><br>    <span class="hljs-comment">// 1.reduce 包含2个参数，回调函数，初始值arr.reduce(callback,[initialValue])</span><br>    <span class="hljs-comment">// 2.回调函数包含4个参数 </span><br>    <span class="hljs-comment">// total初始值，或者计算结束后的返回值 必须</span><br>    <span class="hljs-comment">// currentValue 当前元素             必须</span><br>    <span class="hljs-comment">// currentIndex 当前元素的下标</span><br>    <span class="hljs-comment">// arr          当前元素所属的数组对象</span><br>    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">result, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;result:&#x27;+ result);</span><br>        <span class="hljs-comment">// console.log(&#x27;item:&#x27;+ item);</span><br>        <span class="hljs-keyword">return</span> result.concat(<span class="hljs-built_in">Array</span>.isArray(item) ? flatten(item) : item)<br>    &#125;, [])<br>&#125;<br><span class="hljs-built_in">console</span>.log(flattens([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法练习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-vue3.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue3.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>选择安装了vue3.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720093125.png" alt="image-20210720093124295"></p></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091318.png" alt="image-20210720091317087"></p></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091346.png" alt="image-20210720091346033"></p><h2 id="三、vue3-0特点"><a href="#三、vue3-0特点" class="headerlink" title="三、vue3.0特点"></a>三、vue3.0特点</h2><ol><li><p>vue3.0的组件导入方式</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720092859.png" alt="image-20210720092858938"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></div></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;Elementplus&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./element-ui&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><br><span class="hljs-keyword">const</span> app = createApp(App);<br><span class="hljs-comment">// 调用</span><br>Elementplus(app);<br><span class="hljs-comment">// 使用</span><br>createApp(App).use(Elementplus).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li><li><p>vue3.0采用按需引入element-plus的方式，安装插件</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;babel-plugin-import&quot;</span>: <span class="hljs-string">&quot;^1.13.3&quot;</span>,<br><span class="hljs-built_in">npm</span> install babel-plugin-<span class="hljs-keyword">import</span> -D<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-vue2.0</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-vue2.0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><ol><li>创建项目 vue create xxx</li><li>默认选择安装了vue2.0</li><li>启动项目</li><li>在项目下安装 vue add @vue/script</li><li>npm i vuex</li><li>搭建完成</li></ol><h2 id="二、创建子组件"><a href="#二、创建子组件" class="headerlink" title="二、创建子组件"></a>二、创建子组件</h2><ol><li><p>头部组件 MenuBar</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721181505.png" alt="image-20210721181457020"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;header-wrapper&quot;&gt;<br>        &lt;div class=&quot;header-item&quot;&gt;<br>            &lt;div class=&quot;img-item&quot;&gt;<br>                &lt;img src=&quot;../assets/img/kjj.png&quot;/&gt;<br>            &lt;/div&gt;<br>            &lt;span&gt;Vue2.0 + TypeScript&lt;/span&gt;<br>        &lt;/div&gt;<br>        &lt;div class=&quot;select-item&quot;&gt;<br>            &lt;el-dropdown trigger=&quot;click&quot; @command=&quot;doNew&quot;&gt;<br>                  &lt;span class=&quot;el-dropdown-link&quot;&gt;<br>                    新建&lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt;<br>                  &lt;/span&gt;<br>                &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                    &lt;el-dropdown-item icon=&quot;el-icon-plus&quot;&gt;文本便签&lt;/el-dropdown-item&gt;<br>                &lt;/el-dropdown-menu&gt;<br>            &lt;/el-dropdown&gt;<br>            &lt;div class=&quot;space-item&quot;&gt;&lt;/div&gt;<br>            &lt;div&gt;<br>                &lt;el-dropdown trigger=&quot;click&quot; @command=&quot;doChange&quot; &gt;<br>                    &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(-1)&quot;&gt;<br>                      &lt;span class=&quot;el-dropdown-link&quot;&gt;<br>                        全部&lt;i class=&quot;el-icon-caret-bottom el-icon--right&quot;&gt;&lt;/i&gt;<br>                      &lt;/span&gt;<br>                    &lt;/el-badge&gt;<br>                    &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=-1&gt;<br>                            全部<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(-1)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=0 divided&gt;<br>                            工作<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(0)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=1&gt;<br>                            生活<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(1)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                        &lt;el-dropdown-item class=&quot;clearfix&quot; command=2&gt;<br>                            学习<br>                            &lt;el-badge class=&quot;mark&quot; :value=&quot;doFilter(2)&quot;/&gt;<br>                        &lt;/el-dropdown-item&gt;<br>                    &lt;/el-dropdown-menu&gt;<br>                &lt;/el-dropdown&gt;<br>            &lt;/div&gt;<br><br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>    import &#123;Vue, Component&#125; from &#x27;vue-property-decorator&#x27;;<br>    import ItemData from &quot;@/model/ItemData&quot;;<br><br>    @Component<br>    export default class MenuBar extends Vue &#123;<br>        value: string = &#x27;&#x27;<br><br>        //点击新建，出现编辑框<br>        doNew() &#123;<br>            // 点击新增初始化tranMemo，不然transMemo的初值是null<br>            this.$store.state.transMemo = new ItemData(-1, 0);<br>            this.$store.state.isshow = true<br>        &#125;<br><br>        doFilter(cid: number): number &#123;<br>            if (cid === -1) &#123;<br>                return this.$store.state.actionHelper.memoList.length<br>            &#125; else &#123;<br>                return this.$store.state.actionHelper.memoList.filter((ele) =&gt; &#123;<br>                    return ele.categoryId == cid;<br>                &#125;).length<br>            &#125;<br><br>        &#125;<br>        doChange(val)&#123;<br>            this.$store.state.fliterCateId = val;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>    .header-wrapper &#123;<br>        width: 100%;<br>        display: flex;<br>        justify-content: space-between;<br>        align-items: center;<br><br>        .space-item &#123;<br>            height: 60px;<br>            width: 40px;<br>            background-color: #409EFF;<br>        &#125;<br><br>        .header-item &#123;<br>            display: flex;<br>            align-items: center;<br>            height: 60px;<br><br>            .img-item &#123;<br>                height: 40px;<br>                width: 40px;<br><br>                img &#123;<br>                    height: 100%;<br>                    width: 100%;<br>                    border-radius: 50%;<br>                    border: 1px solid red;<br>                &#125;<br>            &#125;<br><br>            span &#123;<br>                display: inline-block;<br>                font-size: 20px;<br>                font-weight: bold;<br>                color: #fff;<br>                margin-left: 10px;<br>            &#125;<br><br>        &#125;<br><br>        .select-item &#123;<br>            display: flex;<br>            flex-direction: row;<br>            align-items: center;<br>        &#125;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>标签组件 MemoItem</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721181616.png" alt="image-20210721181615603"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;memo-container&quot;&gt;<br>    &lt;div class=&quot;memo&quot;&gt;<br>      &lt;div class=&quot;mark&quot;&gt;&lt;/div&gt;<br>      &lt;div class=&quot;memo-heading&quot;&gt;<br>        &lt;h5 class=&quot;title&quot;&gt;&#123;&#123; memo.title &#125;&#125;&lt;/h5&gt;<br>        &lt;ul class=&quot;tools&quot;&gt;<br>          &lt;li class=&quot;edit&quot; @click=&quot;showEdit&quot;&gt;&lt;/li&gt;<br>          &lt;li class=&quot;delete&quot; @click=&quot;doDel&quot;&gt;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>      &lt;h6 class=&quot;memo-info&quot;&gt;<br>        &lt;span class=&quot;timeStamp&quot;&gt;&#123;&#123; memo.createTime &#125;&#125;&lt;/span&gt;<br>        &lt;span class=&quot;category&quot;<br>          &gt;分类:&#123;&#123;<br>            $store.state.aHelper.getCategoryName(memo.categoryId)<br>          &#125;&#125;&lt;/span<br>        &gt;<br>      &lt;/h6&gt;<br>      &lt;div class=&quot;content&quot;&gt;<br>        &lt;div class=&quot;text&quot;&gt;&#123;&#123; memo.content &#125;&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot;&gt;<br>import ItemData from &quot;@/model/ItemData&quot;;<br>import &#123; Vue, Component, Prop &#125; from &quot;vue-property-decorator&quot;;<br>@Component<br>export default class MemoItem extends Vue &#123;<br>  @Prop() memo!: ItemData;<br>  doDel(): void &#123;<br>    if (!window.confirm(`确认删除【$&#123;this.memo.title&#125;】的笔记吗?`)) return;<br>    //   确认后,就删除<br>    this.$store.state.aHelper.remove(this.memo.id);<br>  &#125;<br>  showEdit(): void &#123;<br>    // 1.创建副本<br>    let newMemo = JSON.parse(JSON.stringify(this.memo));<br>    // 2.传递给transmemo<br>    this.$store.commit(&#x27;showEditMemo&#x27;, newMemo);<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>编辑组件 MemoEditor</p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210721182011.png" alt="image-20210721182010265"></p><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;el-dialog<br>            :visible.sync=&quot;$store.state.isshow&quot;<br>            width=&quot;30%&quot;<br>            append-to-body<br>            :show-close=&quot;false&quot;&gt;<br>        &lt;el-card class=&quot;box-card&quot;&gt;<br>            &lt;template #header&gt;<br>                &lt;div class=&quot;card-header&quot;&gt;<br>                    &lt;el-input type=&quot;text&quot; placeholder=&quot;标题&quot; v-model=&quot;memo.title&quot;&gt;&lt;/el-input&gt;<br>                    &lt;el-dropdown @command=&quot;handleCommand&quot; class=&quot;el-dropdown-item&quot;&gt;<br>                          &lt;span class=&quot;el-dropdown-link&quot;&gt;&#123;&#123;memo.categoryId  == 0 ? &#x27;工作&#x27;: memo.categoryId == 1? &#x27;生活&#x27;:&#x27;学习&#x27; &#125;&#125;<br>                            &lt;i class=&quot;el-icon-arrow-down el-icon--right&quot;&gt;&lt;/i&gt;<br>                          &lt;/span&gt;<br>                        &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;<br>                            &lt;el-dropdown-item command=0&gt;工作&lt;/el-dropdown-item&gt;<br>                            &lt;el-dropdown-item command=1&gt;生活&lt;/el-dropdown-item&gt;<br>                            &lt;el-dropdown-item command=2&gt;学习&lt;/el-dropdown-item&gt;<br>                        &lt;/el-dropdown-menu&gt;<br>                    &lt;/el-dropdown&gt;<br>                    &lt;div class=&quot;el-button-item&quot;&gt;<br>                        &lt;el-button class=&quot;button&quot; type=&quot;text&quot; @click=&quot;doSave&quot; icon=&quot;el-icon-message&quot;&gt;&lt;/el-button&gt;<br>                        &lt;el-button class=&quot;button&quot; type=&quot;text&quot; @click=&quot;doCancel&quot; icon=&quot;el-icon-circle-close&quot;&gt;&lt;/el-button&gt;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            &lt;/template&gt;<br>            &lt;div&gt;<br>                &lt;el-input<br>                        type=&quot;textarea&quot;<br>                        :rows=&quot;2&quot;<br>                        placeholder=&quot;请输入内容&quot;<br>                        v-model=&quot;memo.content&quot;&gt;<br>                &lt;/el-input&gt;<br>            &lt;/div&gt;<br>        &lt;/el-card&gt;<br>    &lt;/el-dialog&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>    import &#123;Vue, Component&#125; from &#x27;vue-property-decorator&#x27;;<br>    import ItemData from &quot;@/model/ItemData&quot;;<br><br>    @Component<br>    export default class MemoEditor extends Vue &#123;<br>        memo: ItemData = new ItemData(-1, 0);<br><br>        created(): void &#123;<br>            this.memo = this.$store.state.transMemo<br>        &#125;<br><br>        handleCommand(val) &#123;<br>            this.memo.categoryId = val;<br>        &#125;<br><br>        doCancel() &#123;<br>            this.$store.state.isshow = false<br>        &#125;<br><br>        doSave() &#123;<br>            if (this.memo &amp;&amp; this.memo.categoryId &gt; -1 &amp;&amp; this.memo.title.trim().length &gt; 0 &amp;&amp; this.memo.content.trim().length &gt; 0) &#123;<br>                if (this.memo.id &lt;= -1) &#123;<br>                    this.$store.state.actionHelper.addData(this.memo)<br>                &#125; else &#123;<br>                    this.$store.state.actionHelper.editData(this.memo)<br>                &#125;<br>                this.$store.state.isshow = false<br>            &#125; else &#123;<br>                window.alert(&#x27;数据输入不完整！&#x27;)<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>    .item &#123;<br>        margin-bottom: 18px;<br>        font-size: 14px;<br>    &#125;<br><br>    /deep/ .el-card__header &#123;<br>        padding: 10px 0 10px 10px;<br>    &#125;<br><br>    .card-header &#123;<br>        display: flex;<br>        justify-content: space-between;<br>        align-items: center;<br>    &#125;<br><br>    /deep/ .el-card__body &#123;<br>        padding: 10px;<br>    &#125;<br><br>    .second-item &#123;<br>        font-size: 14px;<br>        display: flex;<br>        justify-content: space-between;<br>        padding: 5px 10px;<br>    &#125;<br><br>    /deep/ .el-textarea__inner &#123;<br>        height: 300px;<br>        resize: none;<br>    &#125;<br><br>    .el-card &#123;<br>        width: 100%;<br>    &#125;<br><br>    .el-button-item &#123;<br>        width: 80px;<br>    &#125;<br><br>    .el-dropdown-item &#123;<br>        width: 120px;<br>        margin-left: 15px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><ol><li>   MenuList组件</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MemoItem</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in filterMemo()&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> <span class="hljs-attr">:memo</span>=<span class="hljs-string">&quot;item&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">import</span> &#123;Vue, Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-property-decorator&#x27;</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> MemoItem <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/MemoItem.vue&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">import</span> ItemData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/model/ItemData&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">    @Component(&#123;</span><br><span class="javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">            MemoItem</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Vue</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-attr">memoArr</span>:<span class="hljs-built_in">Array</span>&lt;ItemData&gt; = <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList;</span><br><span class="javascript">        filterMemo():<span class="hljs-built_in">Array</span>&lt;ItemData&gt; &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.$store.state.fliterCateId == -<span class="hljs-number">1</span>)&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.memoArr;</span><br><span class="javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">               <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.memoArr.filter(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;</span><br><span class="javascript">                  <span class="hljs-keyword">return</span>  item.categoryId == <span class="hljs-built_in">this</span>.$store.state.fliterCateId</span><br><span class="javascript">               &#125;)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.list-item</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">        <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="三、vue2-0特点"><a href="#三、vue2-0特点" class="headerlink" title="三、vue2.0特点"></a>三、vue2.0特点</h2><ol><li><p>vue2.0的组件导入方式，采用注解</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210720091554.png" alt="image-20210720091553890"></p></li><li><p>编辑文件是会出现红色提示，可能是变量未赋值等，更改package.json</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;no-unused-vars&quot;</span>: <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;vue/no-unused-components&quot;</span>: [<br>     <span class="hljs-string">&quot;off&quot;</span>,<br>     &#123;<br>       <span class="hljs-string">&quot;ignoreWhenBindingPresent&quot;</span>: <span class="hljs-literal">true</span><br>     &#125;<br>   ],<br>   <span class="hljs-string">&quot;prefer-const&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br> &#125;<br></code></pre></div></td></tr></table></figure></li><li><p>在书写css样式时，采用了scss语法，安装相关组件，注意版本问题</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.14.1&quot;</span>,<br> <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.3.1&quot;</span>,<br> npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span>.<span class="hljs-number">1</span> -D<br> npm install sass-loader@<span class="hljs-number">7.3</span>.<span class="hljs-number">1</span> -D<br></code></pre></div></td></tr></table></figure></li><li><p>main.ts文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/global.css&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br>Vue.use(ElementUI)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="四、实现功能"><a href="#四、实现功能" class="headerlink" title="四、实现功能"></a>四、实现功能</h2><ol><li><p>创建跨组件共享数据文件store</p><p>代码：创建跨组件共享数据文件store</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import Vuex from &#x27;vuex&#x27;<br>import ActionHelper from &quot;@/store/ActionHelper&quot;;<br><br>Vue.use(Vuex)<br>let store = new Vuex.Store(&#123;<br>    state: &#123;<br>        isshow: false,<br>        actionHelper: new ActionHelper(),<br>        transMemo: null,// 传递数据的桥梁<br>        fliterCateId: -1<br>    &#125;,<br>    mutations: &#123;<br>        showEditMemo(state: any, editMemo: any) &#123;<br>            state.transMemo = editMemo;<br>            state.isshow = true;<br>        &#125;<br>    &#125;<br>&#125;)<br>export default store<br><br></code></pre></div></td></tr></table></figure></li><li><p>设计便签的数据模型：MemoItem类</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">class ItemData &#123;<br>    id: number<br>    categoryId: number<br>    title: string<br>    content: string<br>    createTime: string<br><br>    constructor(id: number = -1, categoryId: number = -1, title: string = &#x27;&#x27;, content: string = &#x27;&#x27;, createTime: string) &#123;<br>        this.id = id;<br>        this.categoryId = categoryId;<br>        this.title = title;<br>        this.content = content;<br>        this.createTime =this.toselfDate(Date.now()) ;<br>    &#125;<br><br>    toselfDate(dateSpan: number): string &#123;<br>        let date = new Date(dateSpan);<br>        let str = date.getFullYear() + &#x27;-&#x27; + (date.getMonth() + 1) + &#x27;-&#x27; + date.getDate() + &#x27; &#x27; + date.getHours() + &#x27;:&#x27; + date.getMinutes();<br>        return str;<br><br>    &#125;<br>&#125;<br>export  default  ItemData<br></code></pre></div></td></tr></table></figure></li><li><p>设计枚举的数据模型</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">enum CateEnum &#123;<br>    Work,<br>    Life = 1,<br>    Study<br>&#125;<br>export  default CateEnum<br></code></pre></div></td></tr></table></figure></li><li><p>创建操作localstorage的类DataHelper</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// DataHelper主要实现对localstorage的操作<br>// 0.构造类<br>class DataHelper &#123;<br>    dataKey: string<br>    primaryKey: string<br><br>    constructor(dataKey: string, primaryKey: string) &#123;<br>        this.dataKey = dataKey;<br>        this.primaryKey = primaryKey<br>    &#125;<br><br>    // 1.读数据<br>    readData(): any &#123;<br>        // 1.读取数据<br>        let strData: string | null = localStorage.getItem(this.dataKey);<br>        // 2.将json转成json对象<br>        let arrData: any = [];<br>        if (strData != null) &#123;<br>            arrData = JSON.parse(strData);<br>        &#125;<br>        return arrData;<br>    &#125;<br><br>    // 2.存数据<br>    saveData(arrData: Array&lt;Object&gt;): void &#123;<br>        // 1.将json对象装成字符串<br>        let strData: string = JSON.stringify(arrData);<br>        // 2.存储<br>        localStorage.setItem(this.dataKey, strData);<br><br>    &#125;<br><br>    // 3.新增数据<br>    addData(newDataObj: any): number &#123;<br>        //  1. 读取本地现有的数据<br>        let dataArray = this.readData();<br>        if (dataArray == null) &#123;<br>            dataArray = [];<br>        &#125;<br>        //  3.自动生成主键，id<br>        let newId = dataArray.length &gt; 0 ? dataArray[dataArray.length - 1].id + 1 : 1;<br><br>        //  4.将id添加到对象中<br>        dataArray.id = newId;<br>        //  5.将数组保存到本地<br><br>        dataArray.push(newDataObj);<br>        this.saveData(dataArray);<br>        //  6.返回newId的值<br>        return newId;<br>    &#125;<br><br>    // 4.删除数据<br>    removeData(id: string | number): boolean &#123;<br>        // 1.获取本地数据<br>        let arrData: any = this.readData();<br>        // 2.查找下标 删除<br>        let index = arrData.findIndex((ele: any) =&gt; &#123;<br>            return ele[this.primaryKey] == id;<br>        &#125;)<br>        // 3.重新保存删除后的数据<br>        if (index &gt; -1) &#123;<br>            arrData.splice(index, 1);<br>            this.saveData(arrData);<br>            return true;<br>        &#125;<br>        return false;<br>    &#125;<br>&#125;<br>export  default  DataHelper;<br></code></pre></div></td></tr></table></figure></li><li><p>在main.ts测试DataHelper的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// 0.测试构造的itemdata类<br>// let itemData = new ItemData(1,1,&#x27;标题&#x27;,&#x27;内容&#x27;);<br>// console.log(itemData)<br>// 1.测试构造的枚举类型<br>// let itemData = new ItemData(1,CateEnum.Work,&#x27;标题&#x27;,&#x27;内容&#x27;);<br>// console.log(itemData)<br>// ****************DataHelper***********<br>// 2.测试新增数据(新增的数据id都是-1)<br>// let itemData = new ItemData();<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;, &#x27;id&#x27;);<br>// console.log(dh.addData(itemData))<br>// 3.删除数据<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;,&#x27;id&#x27;);<br>// dh.removeData(&#x27;-1&#x27;);<br>// 4.测试读数据<br>// let dh:DataHelper = new DataHelper(&#x27;keyData&#x27;,&#x27;id&#x27;);<br>// console.log(dh.readData());<br></code></pre></div></td></tr></table></figure></li><li><p>创建操作类ActionHelper</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">import DataHelper from &quot;@/store/DataHelper&quot;;<br>import ItemData from &quot;@/model/ItemData&quot;;<br><br>class ActionHelper &#123;<br>    // 1.在Datahelper的基础上再次封装<br>    dh: DataHelper = new DataHelper(&#x27;keyData&#x27;, &#x27;id&#x27;);<br>    // 2.定义一个便签数组<br>    memoList: Array&lt;ItemData&gt;;<br><br>    constructor() &#123;<br>        // 便签数组的初始化数据，就是从本身读取数据，相当于vue的create方法，读取数据<br>        this.memoList = this.dh.readData();<br>    &#125;<br><br>    // 读取数据<br>    readData(): Array&lt;ItemData&gt; &#123;<br>        let arrData = this.dh.readData();<br>        // 将获取的数据，装成itemdata类型<br>        let arrItem = arrData.map((ele) =&gt; &#123;<br>            // @ts-ignore<br>            let item: ItemData = new ItemData(); // item是itemData类型的空对象<br>            // 0.第一种方式 // 给空对象赋值<br>            // item = ele;<br>            // 1.第二种方式 // 给空对象赋值<br>            item.id = ele.id;<br>            item.categoryId = ele.categoryId;<br>            item.title = ele.title;<br>            item.content = ele.content;<br>            item.createTime = ele.createTime;<br>            return item;<br>        &#125;)<br>        return arrItem;<br>    &#125;<br><br>    // 新增<br>    addData(item: ItemData): number &#123;<br>        // 0.新增笔记到本地<br>        item.id = this.dh.addData(item);<br>        //  1.将笔记添加到memoList<br>        this.memoList.push(item);<br>        //  2.将笔记数组从新保存本地<br>        this.dh.saveData(this.memoList);<br>        return item.id;<br>    &#125;<br><br>    // 修改<br>    editData(item: ItemData): void &#123;<br>        // 0.先找到下标<br>        let editItem = this.memoList.find((ele) =&gt; &#123;<br>            return ele.id == item.id;<br>        &#125;)<br>        //    1.修改对象<br>        if (editItem) &#123;<br>            editItem.categoryId = item.categoryId;<br>            editItem.title = item.title;<br>            editItem.content = item.content;<br>        &#125;<br>        //    2.保存对象<br>        this.dh.saveData(this.memoList);<br>    &#125;<br><br>    // 删除<br>    delData(id: number): void &#123;<br>        // 0.找下标<br>        let index = this.memoList.findIndex((ele) =&gt; &#123;<br>            return ele.id == id;<br>        &#125;)<br>        if (index &gt; -1) &#123;<br>            this.memoList.splice(index, 1);<br>        &#125;<br>        this.dh.saveData(this.memoList);<br>    &#125;<br>&#125;<br><br>export default ActionHelper;<br></code></pre></div></td></tr></table></figure></li><li><p>在main.ts中测试</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">//**************ActionHelper*************<br>// 0.测试新增(数据的id正常递增)<br>// let ah:ActionHelper = new ActionHelper();<br>// let item:ItemData = new ItemData();<br>// ah.addData(item);<br>// 1.测试修改（修改不存在的对象，会覆盖）<br>// let ah:ActionHelper = new ActionHelper();<br>// let item:ItemData = new ItemData(1,1,&#x27;我爱你11&#x27;,&#x27;我爱学习&#x27;);<br>// ah.editData(item);<br>// 2.测试删除<br>// let ah:ActionHelper = new ActionHelper();<br>// ah.delData(1);<br></code></pre></div></td></tr></table></figure></li><li><p>实现新增功能</p><ul><li><p>点击新增，实现弹框</p><p>点击新增的时候，设置全局的isshow值是true</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">//点击新建，出现编辑框<br>doNew() &#123;<br>    // 点击新增初始化tranMemo，不然transMemo的初值是null<br>    this.$store.state.transMemo = new ItemData(-1, 0);<br>    this.$store.state.isshow = true<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>实现保存功能</p><ul><li>保存第一步对数据进行校验</li><li>分为新增保存</li><li>分为修改保存</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">doSave</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.memo &amp;&amp; <span class="hljs-built_in">this</span>.memo.categoryId &gt; -<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">this</span>.memo.title.trim().length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">this</span>.memo.content.trim().length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.memo.id &lt;= -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">this</span>.$store.state.actionHelper.addData(<span class="hljs-built_in">this</span>.memo)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.$store.state.actionHelper.editData(<span class="hljs-built_in">this</span>.memo)<br>        &#125;<br>        <span class="hljs-built_in">this</span>.$store.state.isshow = <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">&#x27;数据输入不完整！&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>实现修改功能</p><ul><li><p>点击修改的时候，出现弹框</p></li><li><p>修改时，弹框内出现数据</p><p>在点击修改的时候，创建当前标签数据的副本，并且把数据传到共享数据文件中</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">doEdit():<span class="hljs-built_in">void</span>&#123;<br>    <span class="hljs-comment">// 创建副本</span><br>    <span class="hljs-keyword">let</span> newMemo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">this</span>.memo));<br>    <span class="hljs-comment">// 提交数据到桥梁</span><br>    <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;showEditMemo&#x27;</span>,newMemo);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>展示组件MemoEditor的时候，在created方法中获取标签副本的值</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">created(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">this</span>.memo = <span class="hljs-built_in">this</span>.$store.state.transMemo<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>实现删除功能</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-title">doDel</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.confirm(<span class="hljs-string">`确认删除【<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.memo.title&#125;</span>的标签吗？】`</span>)) <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">this</span>.$store.state.actionHelper.delData(<span class="hljs-built_in">this</span>.memo.id);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>统计类别的个数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">doFilter(cid: number): number &#123;<br>    <span class="hljs-keyword">if</span> (cid === -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList.length<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.actionHelper.memoList.filter(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> ele.categoryId == cid;<br>        &#125;).length<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>点击不同的类别，展示不同的便签内容</p><ul><li>把分类的值，传给全局的变量，fliterCateId</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs s">doChange(val)&#123;<br>    this.$store.state.fliterCateId = val;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在memoList展示便签的时候，做过滤处理</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">filterMemo():<span class="hljs-built_in">Array</span>&lt;ItemData&gt; &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.$store.state.fliterCateId == -<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.memoArr;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.memoArr.filter(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span>  item.categoryId == <span class="hljs-built_in">this</span>.$store.state.fliterCateId<br>   &#125;)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="五、gitee共享"><a href="#五、gitee共享" class="headerlink" title="五、gitee共享"></a>五、gitee共享</h2><p><a href="https://gitee.com/porous-crystal/vue20-ys.git">https://gitee.com/porous-crystal/vue20-ys.git</a></p><h2 id="六、展示"><a href="#六、展示" class="headerlink" title="六、展示"></a>六、展示</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210827130236.gif"></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-便签项目</title>
    <link href="/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/tsts-%E4%BE%BF%E7%AD%BE%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、搭建项目环境"><a href="#一、搭建项目环境" class="headerlink" title="一、搭建项目环境"></a>一、搭建项目环境</h2><ol><li><p>本人安装的是vue 2.x的环境,先卸载本地的vue-cli</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">npm uninstall vue-cli -g<br>npm uninstall vue-cli<br></code></pre></div></td></tr></table></figure></li><li><p>安装 vue 3.x的脚手架</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">npm install <span class="hljs-meta">@vue</span>/cli -g<br></code></pre></div></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">vue create XXX(xxx可任意取名，是自己的项目名)<br></code></pre></div></td></tr></table></figure></li><li><p>创建完成,在vscode环境下，编译</p></li><li><p>安装vue/typescript</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">vue add <span class="hljs-meta">@vue</span>/typescript<br></code></pre></div></td></tr></table></figure></li><li><p>安装vuex</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts">npm i vuex<br></code></pre></div></td></tr></table></figure></li><li><p>npm run serve 运行项目</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111441.png" alt="image-20210718111431874"></p></li></ol><h2 id="二、MenuBar组件"><a href="#二、MenuBar组件" class="headerlink" title="二、MenuBar组件"></a>二、MenuBar组件</h2><ol><li><p>public文件导入imgs、common.css 文件</p></li><li><p>index.html引入相关配置</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111817.png" alt="image-20210718111814438"></p></li><li><p>创建MenuBar.vue 文件，将MenuBar组件抛出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718111932.png" alt="image-20210718111929831"></p></li><li><p>在App.vue中引入组件</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112034.png" alt="image-20210718112031898"></p></li><li><p>运行</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718112114.png" alt="image-20210718112112983"></p></li></ol><h2 id="三、ItemData、CateEnum数据模型"><a href="#三、ItemData、CateEnum数据模型" class="headerlink" title="三、ItemData、CateEnum数据模型"></a>三、ItemData、CateEnum数据模型</h2><ol><li><p>ItemData封装了便签所有内容的类</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121305.png" alt="image-20210718121304705"></p></li><li><p>对日期进行处理，封装一个toSelfDataStr的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121412.png" alt="image-20210718121411435"></p></li><li><p>将ItemData、CateEnum以模块的形式导出</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121449.png" alt="image-20210718121445269"></p></li><li><p>CateEnum对分类进行枚举</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121506.png" alt="image-20210718121504968"></p></li><li><p>在main.ts 进行测试</p><p>导入2个数据模型：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121631.png" alt="image-20210718121630607"></p><p>测试数据：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121654.png" alt="image-20210718121653652"></p><p>结果：</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718121716.png" alt="image-20210718121715646"></p></li></ol><h2 id="四、封装操作类：ActionHelper、DataHelper"><a href="#四、封装操作类：ActionHelper、DataHelper" class="headerlink" title="四、封装操作类：ActionHelper、DataHelper"></a>四、封装操作类：ActionHelper、DataHelper</h2><ol><li><p>DataHelper用评论项目的</p></li><li><p>ActionHelper主要进行业务逻辑的操作</p><p>定义一个memoList，处理便签数组，初始化时，将本地的数组赋值给memoList</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124923.png" alt="image-20210718124922846"></p><p>封装读取本地数据的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718124958.png" alt="image-20210718124957796"></p></li><li><p>main.ts 测试数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125512.png" alt="image-20210718125511997"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718125525.png" alt="image-20210718125525035"></p></li></ol><h2 id="五、ActionHelper增加业务逻辑，add、edit、remove"><a href="#五、ActionHelper增加业务逻辑，add、edit、remove" class="headerlink" title="五、ActionHelper增加业务逻辑，add、edit、remove"></a>五、ActionHelper增加业务逻辑，add、edit、remove</h2><ol><li><p>ActionHelper增加对文件add、edit、remove操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155200.png" alt="image-20210718155159203"></p></li><li><p>在main.ts中测试</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718155501.png" alt="image-20210718155459058"></p></li></ol><h2 id="六、组件之间可以共享数据，基于Vuex"><a href="#六、组件之间可以共享数据，基于Vuex" class="headerlink" title="六、组件之间可以共享数据，基于Vuex"></a>六、组件之间可以共享数据，基于Vuex</h2><ol><li><div class="hljs code-wrapper"><pre><code>  state共享对象和数据，mutations共享方法</code></pre></div></li></ol><p>   <img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162101.png" alt="image-20210718162100273"></p><ol start="2"><li><p>在main.ts 全局注册</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162141.png" alt="image-20210718162140393"></p></li><li><p>使用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162205.png" alt="image-20210718162205010"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718162236.png" alt="image-20210718162234966"></p></li></ol><h2 id="七、构建便签列表组件ItemList"><a href="#七、构建便签列表组件ItemList" class="headerlink" title="七、构建便签列表组件ItemList"></a>七、构建便签列表组件ItemList</h2><ol><li><p>创建ItemList文件</p></li><li><p>编写组件类，获取便签的数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718164042.png" alt="image-20210718164041544"></p></li></ol><h2 id="八、构建便签项MemoItem"><a href="#八、构建便签项MemoItem" class="headerlink" title="八、构建便签项MemoItem"></a>八、构建便签项MemoItem</h2><ol><li><p>MemoItem是MemoList 的子组件</p></li><li><p>创建prop接收父组件的传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718170807.png" alt="image-20210718170806446"></p></li><li><p>父组件传值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171108.png" alt="image-20210718171107567"></p></li><li><p>ActionHelper添加翻译分类的方法</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171241.png" alt="image-20210718171240621"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718171305.png" alt="image-20210718171304877"></p></li></ol><h2 id="九、MemoItem的删除"><a href="#九、MemoItem的删除" class="headerlink" title="九、MemoItem的删除"></a>九、MemoItem的删除</h2><ol><li><p>创建删除方法，绑定到按钮</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718172923.png" alt="image-20210718172920028"></p></li><li><p>结果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718173036.png" alt="image-20210718173035896"></p></li></ol><h2 id="十、创建新增对话框的组件"><a href="#十、创建新增对话框的组件" class="headerlink" title="十、创建新增对话框的组件"></a>十、创建新增对话框的组件</h2><ol><li><p>创建MemoEditor组件</p></li><li><p>创建全局的isshow属性</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195415.png" alt="image-20210718195414493"></p></li><li><p>设置新增按钮，展示新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210719000857.png" alt="image-20210719000856425"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195700.png" alt="image-20210718195659454"></p></li><li><p>MemoEditor的退出按钮，取消div的展示</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195614.png" alt="image-20210718195613690"></p></li><li><p>效果</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718195636.png" alt="image-20210718195633344"></p></li><li><p>实现新增：界面的按钮、文本框需要和memo建立关系，采用v-model实现双向绑定</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203130.png" alt="image-20210718203108285"></p></li><li><p>新增保存：0.进行数据校验，1.将数据保存到localstorage 2.隐藏新增div</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718203322.png" alt="image-20210718203321636"></p></li></ol><h2 id="十一、编写Edit功能"><a href="#十一、编写Edit功能" class="headerlink" title="十一、编写Edit功能"></a>十一、编写Edit功能</h2><ol><li><p>对编辑来说，第一步：获取已经有的数据</p></li><li><p>编辑内容</p></li><li><p>将编辑的内容保存到本地</p></li><li><p>使用vuex进行数据传递</p></li><li><p>点击编辑的时候，创建数据副本，并且传到vuex中</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224828.png" alt="image-20210718224827848"></p></li><li><p>vuex中建立方法，供组件调用</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718224936.png" alt="image-20210718224935837"></p></li><li><p>MemoEditor创建的时候，拿到数据，赋值</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225115.png" alt="image-20210718225114919"></p></li><li><p>对新增和修改保存操作的梳理</p><p>新增的时候，初始化了参数id是-1，通过id判断操作</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718225408.png" alt="image-20210718225406704"></p></li></ol><h2 id="十二、点击分类，展示页面"><a href="#十二、点击分类，展示页面" class="headerlink" title="十二、点击分类，展示页面"></a>十二、点击分类，展示页面</h2><ol><li><p>在vuex里创建全局数据</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234840.png" alt="image-20210718234839548"></p></li><li><p>写doFilterByCateId()方法，当点击不同的li,展示不同的分类list</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718234938.png" alt="image-20210718234937947"></p></li><li><p>计算分类数封装doFilter()</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210718235205.png" alt="image-20210718235204119"></p></li></ol><h2 id="十三、创建gitee、放到仓库上"><a href="#十三、创建gitee、放到仓库上" class="headerlink" title="十三、创建gitee、放到仓库上"></a>十三、创建gitee、放到仓库上</h2><p><a href="https://gitee.com/porous-crystal/vue-ts-memo-item.git">https://gitee.com/porous-crystal/vue-ts-memo-item.git</a></p>]]></content>
    
    
    <categories>
      
      <category>实战练习</category>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue vue2.x</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20vue2.x/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20vue2.x/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue的安装"><a href="#一、vue的安装" class="headerlink" title="一、vue的安装"></a>一、vue的安装</h2><ol><li>在官网下载vue.min.js 然后在script标签中引入。</li><li>使用CDN方法，下载，然后在script标签中引入。</li><li>使用npm安装。</li></ol><h2 id="二、vue的目录结构"><a href="#二、vue的目录结构" class="headerlink" title="二、vue的目录结构"></a>二、vue的目录结构</h2><ol><li>build：是项目打包后的文件夹</li><li>config：配置目录，包括端口号等</li><li>node_modules: 项目的依赖模块</li><li>src：开发目录<ol><li>assets：放置图片等</li><li>components:组件文件</li><li>App.vue 项目入口文件</li><li>main.js 项目的核心文件</li></ol></li><li>static:静态资源目录，图片</li><li>test:测试目录，可以删除</li><li>.xxx文件：都是配置文件</li><li>index.html：首页入口文件</li><li>package.json:项目配置文件</li><li>README.md :项目的说明文档</li></ol><h2 id="三、Vue-js-起步"><a href="#三、Vue-js-起步" class="headerlink" title="三、Vue.js 起步"></a>三、Vue.js 起步</h2><ol><li>每个Vue应用都需要通过实例化Vue来实现。</li><li>Vue构造器中有一个el参数，他是DOM元素的id</li><li>data用于定义属性</li><li>methods用于定义函数</li><li>Vue实例被创建时，它向Vue的响应式系统中加入其data对象中能找到的所有属性</li></ol><h2 id="四、Vue-js-计算属性"><a href="#四、Vue-js-计算属性" class="headerlink" title="四、Vue.js 计算属性"></a>四、Vue.js 计算属性</h2><ol><li><p>methods和computed在效果上是一样的，</p></li><li><p>computed基于他的依赖缓存，只有相关依赖发生改变的时候才会重新获取值</p></li><li><p>methods在重新渲染的时候，函数会重新被调用执行</p></li><li><p>computed只有getter，但是在需要的时候可以加入set</p></li><li><p>computed和methods的比较</p></li><li><p>computed的依赖发生变化，会实时更新，methods只有触发才会调用</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        长度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;length&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        宽度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;width&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        面积：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;areas&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        和的值为:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">length</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">num</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">areas</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> areas = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    areas = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> areas;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>结果：<br><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144528.png" alt="image-20210716095112614"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144532.png" alt="image-20210716095200442"></p></li></ol><h2 id="五、Vue-js的监听属性"><a href="#五、Vue-js的监听属性" class="headerlink" title="五、Vue.js的监听属性"></a>五、Vue.js的监听属性</h2><ol><li><p>watch 监听响应数据的变化</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        千米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;kilometers&quot;</span> /&gt;</span><br>        米：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;meters&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> demo = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#main&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-number">0</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">computed</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">kilometers</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.meters = <span class="hljs-built_in">this</span>.kilometers * <span class="hljs-number">1000</span>;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">meters</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.kilometers = val / <span class="hljs-number">1000</span>;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        demo.$watch(<span class="hljs-string">&#x27;kilometers&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newValue, oldValue</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;info&quot;</span>).innerHTML = <span class="hljs-string">&quot;修改前值为: &quot;</span> + oldValue + <span class="hljs-string">&quot;，修改后值为: &quot;</span> + newValue;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="六、Vue-js-事件处理器"><a href="#六、Vue-js-事件处理器" class="headerlink" title="六、Vue.js 事件处理器"></a>六、Vue.js 事件处理器</h2><ol><li>v-on：进行事件的监听</li></ol><h2 id="七、Vue-js-组件"><a href="#七、Vue-js-组件" class="headerlink" title="七、Vue.js 组件"></a>七、Vue.js 组件</h2><ol><li><p>注册一个全局组件的语法</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">Vue.component(tagName, options)<br><span class="hljs-comment">// 组件</span><br><span class="hljs-params">&lt;tagName&gt;</span><span class="hljs-params">&lt;/tagName&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>prop子组件接受父组件传递的数据</p></li><li><p>动态props，使用v-bind在父组件绑定props的值，当父组件的值变化时，子组件也会变化</p></li><li><p>props提供验证，可以定制props的验证方式</p></li></ol><h2 id="八、自定义事件"><a href="#八、自定义事件" class="headerlink" title="八、自定义事件"></a>八、自定义事件</h2><ol><li>父组件通过props把值传给子组件</li><li>子组件想要把值传回去，就需要自定义事件</li><li>父组件使用v-on 监听子组件值的变化</li><li>子组件通过$emit触发事件</li><li>data必须是一个函数</li></ol><h2 id="九、Vue-js-路由"><a href="#九、Vue-js-路由" class="headerlink" title="九、Vue.js 路由"></a>九、Vue.js 路由</h2><ol><li><p>router的相关属性</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 同上 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;home&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;register&#x27;, query: &#123; plan: &#x27;private&#x27; &#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>replace 当点击时，会调用router.replace ,而不是router.push ，导航不会留下历史记录</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/abc&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">replace</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>append  在当前路径前添加路径，例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;relative/path&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">append</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p>tag 将<router-link>渲染成某种标签</p></li><li><p>event 声明用来触发导航的事件</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-bind:to</span> = <span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; path: &#x27;/route1&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">event</span> = <span class="hljs-string">&quot;mouseover&quot;</span>&gt;</span>Router Link 1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="十、Vue-js-混入"><a href="#十、Vue-js-混入" class="headerlink" title="十、Vue.js 混入"></a>十、Vue.js 混入</h2><ol><li>混入定义了一些可复用的方法或者计算属性</li><li>当组件混入对象时,所有混入对象选项将被混入组件本身</li><li>慎用全局混入</li></ol><h2 id="十一、ajax和axios的区别"><a href="#十一、ajax和axios的区别" class="headerlink" title="十一、ajax和axios的区别"></a>十一、ajax和axios的区别</h2><ol><li><p>ajax</p><p>优点：</p><p>传统的Ajax指的是XMLHttpRequest，最早出现的发送后端请求技术，核心使用的是XMLHttpRequest对象</p><p>JQuery ajax是对原生XHR的封装，除此之外还提供了对JSONP的支持</p><p>缺点：</p><p>本身是针对MVC编程，不符合现在前端MVVM的浪潮</p><p>基于原生的XHR开发， XHR本身的架构不清晰</p><p>JQuery整个项目太大，为了使用Ajax就引入JQuery非常的不合理</p><p>不关注分离原则</p><p>配置和调用非常混乱</p><p>用法：</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">$.ajax(&#123;<br>    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>    url:url,<br>    <span class="hljs-keyword">data</span>:<span class="hljs-keyword">data</span>,<br>    dataType:dataType,<br>    success:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;,<br>    error:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li><p>axios</p><p>优点：</p><p>基于promise用于浏览器和nodejs的HTTP客户端</p><p>本质也是对原生XHR的封装，但是是Promise的实现，</p><p>从浏览器创建XMLHttpRequest</p><p>支持promise API</p><p>客户端支持防止CSRF</p><p>提供一些并发请求的接口</p><p>从nodejs创建http请求</p><p>转换请求数据和响应数据</p><p>取消请求</p><p>自动转换json数据</p><p>用法：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">axios(&#123;<br>method:<span class="hljs-string">&#x27;post&#x27;</span>,<br>ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;/user/1245&#x27;</span>,<br>dat<span class="hljs-variable">a:</span>&#123;<br>firstname:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>lastname:<span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;,<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(response)</span>&#123;</span><br><br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span>&#123;</span><br><br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"><a href="#十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）" class="headerlink" title="十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）"></a>十二、MVC（model-view-controller）和MVVM（model-view-viewmodel）</h2><p>MVVM</p><ol><li><p>MVVM源自经典的MVC模式</p></li><li><p>MVVM的核心是viewmodel层</p></li><li><p>viewmodel层是一个中转站，向上与视图层进行双向的数据绑定，向下与model层通过接口进行数据交互</p></li><li><p>view层展示的不是model层的数据，而是viewmodel层的数据</p></li><li><p>viewmodel层进行数据交互，这就完全解耦了view层和model层</p></li><li><p>这种解耦是前后端分离方案最重要的一环</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144545.png" alt="img"></p></li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144548.jpg" alt="562c11dfa9ec8a13ab6935fbfc03918fa0ecc0be"></p><p>MVC</p><ol><li>controller负责将model的数据用view展示出来</li><li>model是数据的管理者，负责存放数据</li><li>model提供接口，可以使得controller去调用他存放的数据</li><li>view：数据的显示部分，视图是根据模型创建的</li><li>controller 负责从视图读取数据，控制用户输入，并且向模型发送数据</li></ol><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144552.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210716144559.png" alt="img"></p><h2 id="十三、css伪类和伪元素的区别"><a href="#十三、css伪类和伪元素的区别" class="headerlink" title="十三、css伪类和伪元素的区别"></a>十三、css伪类和伪元素的区别</h2><ol><li>伪类与伪元素的区别在于：有没有创建一个文档树之外的元素、</li><li>伪类是在已有的DOM元素下操作：:hover、:active</li><li>伪元素是创建一些不在DOM树存在的元素 ： ::after、::before</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_42068550/article/details/89480350">MVC和MVVM的区别</a></p><p><a href="https://blog.csdn.net/hyld_lzw/article/details/91346726?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;amp;spm=1001.2101.3001.4242">ajax和axios、fetch的区别</a></p><p><a href="https://www.html.cn/qa/css3/11853.html">css伪类和伪元素的区别是什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue  创建2.0项目</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E5%88%9B%E5%BB%BA2.0%E9%A1%B9%E7%9B%AE/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E5%88%9B%E5%BB%BA2.0%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、环境搭建（vue2-X）"><a href="#一、环境搭建（vue2-X）" class="headerlink" title="一、环境搭建（vue2.X）"></a>一、环境搭建（vue2.X）</h2><ol><li><p>安装node.js 官网下载（本人是解压版，解压后是如图所示）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714202421911.png" alt="image-20210714202421911"></p></li><li><p>安装vue-cli （vue 2.x）</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203045168.png" alt="image-20210714203045168"></p></li><li><p>输入命令 </p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">vue init webpack <span class="hljs-keyword">my</span>-project<br></code></pre></div></td></tr></table></figure></li><li><p>设置默认属性</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203426287.png" alt="image-20210714203426287"></p></li><li><p>创建项目成功</p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203451146.png" alt="image-20210714203451146"></p></li><li><p>访问项目<a href="http://localhost:8080/#/">http://localhost:8080/#/</a></p><p><img src="C:/Users/11090/AppData/Roaming/Typora/typora-user-images/image-20210714203547293.png" alt="image-20210714203547293"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-声明合并</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数的合并"><a href="#一、函数的合并" class="headerlink" title="一、函数的合并"></a>一、函数的合并</h2><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二、接口的合并"><a href="#二、接口的合并" class="headerlink" title="二、接口的合并"></a>二、接口的合并</h2><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br>&#125;<br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 相当于：</span><br>interface <span class="hljs-class">Alarm </span>&#123;<br><span class="hljs-symbol">    price:</span> number;<br><span class="hljs-symbol">    weight:</span> number;<br>&#125;<br><span class="hljs-comment">// 注意，合并的属性的类型必须是唯一的</span><br></code></pre></div></td></tr></table></figure><h2 id="三、接口中方法的合并"><a href="#三、接口中方法的合并" class="headerlink" title="三、接口中方法的合并"></a>三、接口中方法的合并</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">interface</span> Alarm &#123;<br>    <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;<br>    weight: <span class="hljs-built_in">number</span>;<br>    alert(s: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>    alert(s: <span class="hljs-built_in">string</span>, <span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四、类的合并"><a href="#四、类的合并" class="headerlink" title="四、类的合并"></a>四、类的合并</h2><p>类的合并与接口的合并规则一致。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-泛型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、泛型"><a href="#一、泛型" class="headerlink" title="一、泛型"></a>一、泛型</h2><ol><li><p>小例</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">/* 小例 */</span><br><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Array(<span class="hljs-params">length</span>: <span class="hljs-params">number</span>, <span class="hljs-params">value</span>: <span class="hljs-params">any</span>)</span>: Array&lt;any&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">[]</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>= value;<br>  &#125;<br>  return result;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-built_in">array</span> = create<span class="hljs-constructor">Array(3,&#x27;<span class="hljs-params">x</span>&#x27;)</span>;<br>console.log(<span class="hljs-built_in">array</span>); <span class="hljs-comment">// [ &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27; ]</span><br><span class="hljs-comment">// 缺点是返回值的类型没有定义，我们应该要求数组中的每一项都是value的类型</span><br></code></pre></div></td></tr></table></figure></li><li><p>泛型</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArray1</span>&lt;<span class="hljs-title">T</span>&gt; (<span class="hljs-params">length:<span class="hljs-built_in">number</span>,value:T</span>):<span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">var</span> array1 = createArray1(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;y&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(array1); <span class="hljs-comment">// [ &#x27;y&#x27;, &#x27;y&#x27;, &#x27;y&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>多个类型参数</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog"><span class="hljs-comment">/* 多个类型参数 */</span><br>function swap&lt;<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>&gt;(tuple:[<span class="hljs-symbol">T</span>,<span class="hljs-symbol">U</span>]):[<span class="hljs-symbol">U</span>,<span class="hljs-symbol">T</span>]&#123;<br>    return [tuple[<span class="hljs-number">1</span>],tuple[<span class="hljs-number">0</span>]];<br>&#125;<br>console.log(swap([<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;seven&#x27;</span>])); // [ <span class="hljs-string">&#x27;seven&#x27;</span>, <span class="hljs-number">7</span> ]<br></code></pre></div></td></tr></table></figure></li><li><p>泛型约束</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型约束 */</span><br><span class="hljs-keyword">interface</span> Lengthwise &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logging</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Lengthwise</span>&gt;(<span class="hljs-params">args: T</span>): <span class="hljs-title">T</span> </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(args.length); <span class="hljs-comment">// 3</span><br>  <span class="hljs-keyword">return</span> args;<br>&#125;<br>logging(<span class="hljs-string">&#x27;123&#x27;</span>); <br></code></pre></div></td></tr></table></figure></li><li><p>泛型接口</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型接口 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc &#123;<br>    &lt;T&gt;(length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray2: CreateArrayFunc;<br>createArray2 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">let</span> result :T[] = [];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>      result[i] =value;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray2(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">// [ &#x27;z&#x27;, &#x27;z&#x27;, &#x27;z&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>泛型参数提前到接口上</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型参数提前到泛型接口上 */</span><br><span class="hljs-keyword">interface</span> CreateArrayFunc1&lt;T&gt; &#123;<br>    (length: <span class="hljs-built_in">number</span>, <span class="hljs-attr">value</span>: T): <span class="hljs-built_in">Array</span>&lt;T&gt;;<br>&#125;<br><span class="hljs-keyword">let</span> createArray3: CreateArrayFunc1&lt;<span class="hljs-built_in">any</span>&gt;;<br>createArray3 = <span class="hljs-function"><span class="hljs-keyword">function</span> &lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">length: <span class="hljs-built_in">number</span>, value: T</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">let</span> result: T[] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.log(createArray3(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;W&#x27;</span>)); <span class="hljs-comment">// [ &#x27;W&#x27;, &#x27;W&#x27;, &#x27;W&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li><li><p>泛型类</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 泛型类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericNumber</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-attr">zeroValue</span>:T;<br>    add:<span class="hljs-function">(<span class="hljs-params">x:T,y:T</span>) =&gt;</span>T; <span class="hljs-comment">// 函数</span><br>&#125;<br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> GenericNumber&lt;<span class="hljs-built_in">number</span>&gt;();<br>myGenericNumber.zeroValue=<span class="hljs-number">0</span>;<br>myGenericNumber.add=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>泛型参数的默认类型</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">/* 泛型参数的默认类型 */<br>function createArray5&lt;T = <span class="hljs-built_in">string</span>&gt;(<span class="hljs-built_in">length</span>: <span class="hljs-built_in">number</span>, value: T): Array&lt;T&gt; &#123;<br>    let <span class="hljs-literal">result</span>: T[] = [];<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-literal">result</span>[i] = value;<br>    &#125;<br><span class="hljs-built_in">    return</span> <span class="hljs-literal">result</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类的概念"><a href="#一、类的概念" class="headerlink" title="一、类的概念"></a>一、类的概念</h2><ol><li><p>类：定义一个抽象物体的特点，包括他的属性和方法</p></li><li><p>对象：类的实例，通过new实现</p></li><li><p>面向对象的三大特性：封装、继承、多态</p></li><li><p>封装：将对数据操作的细节隐藏起来，只暴露对外的接口</p></li><li><p>继承：子类继承父类，而且还可以有自己更具体的特性</p></li><li><p>多态：由继承产生的相关的不同的类，对同一个方法有不同的相应。</p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210713143911.png" alt="image-20210713143807626"></p></li></ol><h2 id="二、ES6类的用法"><a href="#二、ES6类的用法" class="headerlink" title="二、ES6类的用法"></a>二、ES6类的用法</h2><ol><li><p>属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的属性和方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123; <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a.sayHi()); <span class="hljs-comment">//my name is Jack</span><br></code></pre></div></td></tr></table></figure></li><li><p>类的继承</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-comment">/* 类的继承 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>constructor(name)&#123;<br>    <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 使用super调用父类的构造函数和方法</span><br>    console.log(<span class="hljs-keyword">this</span>.name); <span class="hljs-comment">//cat</span><br><br>&#125;<br>sayHi()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-symbol">&#x27;Meo</span>w&#x27; + <span class="hljs-keyword">super</span>.sayHi();<br>&#125;<br>&#125;<br>let cat = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>(<span class="hljs-symbol">&#x27;ca</span>t&#x27;);<br>console.log(cat.sayHi()); <span class="hljs-comment">// Meowmy name is cat</span><br></code></pre></div></td></tr></table></figure></li><li><p>存储器</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* 存取器 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Jack&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setter:&#x27;</span> + value); <span class="hljs-comment">// setter:Kitty</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> animal = <span class="hljs-keyword">new</span> Animal1(<span class="hljs-string">&#x27;Kitty&#x27;</span>);<br>animal.name = <span class="hljs-string">&#x27;tom&#x27;</span>; <span class="hljs-comment">// setter:tom</span><br></code></pre></div></td></tr></table></figure></li><li><p>静态方法</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 静态方法 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123; <span class="hljs-comment">// 构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">isAnimal</span>(<span class="hljs-params">a</span>)</span> &#123; <span class="hljs-comment">// 静态方法</span><br>        <span class="hljs-keyword">return</span> a <span class="hljs-keyword">instanceof</span> Animal2;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Animal2(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(Animal2.isAnimal(a1)); <span class="hljs-comment">// true //静态方法不需要实例，类直接调用</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、ES7类中的用法"><a href="#二、ES7类中的用法" class="headerlink" title="二、ES7类中的用法"></a>二、ES7类中的用法</h2><ol><li><p>实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7实例属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal3</span></span>&#123;<br>    name=<span class="hljs-string">&#x27;Jack3&#x27;</span>; <span class="hljs-comment">// 直接在类里定属性</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Animal3();<br><span class="hljs-built_in">console</span>.log(a2.name); <span class="hljs-comment">// Jack3</span><br></code></pre></div></td></tr></table></figure></li><li><p>静态属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* es7静态属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal4</span></span>&#123;<br>    <span class="hljs-keyword">static</span> num =<span class="hljs-number">42</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(Animal4.num); <span class="hljs-comment">// 42</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="三、ts中类的用法"><a href="#三、ts中类的用法" class="headerlink" title="三、ts中类的用法"></a>三、ts中类的用法</h2><ol><li><p>public 修饰符（开放的属性和方法）</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Animal5 &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a3 = <span class="hljs-built_in">new</span> Animal5(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a3.name); // Jack5<br>a3.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>console.log(a3.name); // tom5<br></code></pre></div></td></tr></table></figure></li><li><p>private修饰符（无法直接读取）</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/* private */</span><br><span class="hljs-keyword">class</span> Animal6 &#123;<br>    private <span class="hljs-type">name</span>;<br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a4 = <span class="hljs-built_in">new</span> Animal6(<span class="hljs-string">&#x27;Jack5&#x27;</span>);<br>console.log(a4.name); <br>a4.name = <span class="hljs-string">&#x27;tom5&#x27;</span>; <br>// 报错Property <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">is</span> private <span class="hljs-keyword">and</span> <span class="hljs-keyword">only</span> accessible <span class="hljs-keyword">within</span> <span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;Animal6&#x27;</span><br></code></pre></div></td></tr></table></figure></li><li><p>private（子类无法访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-comment">/* private 子类*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> name;<br>    public constructor(name) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal7</span> </span>&#123;<br>    constructor(name) &#123;<br>        <span class="hljs-keyword">super</span>(name); <span class="hljs-comment">// 访问父类</span><br>        console.log(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>protected修饰符（子类可以访问父类）</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-comment">/* protected修饰符 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> name;<br>    public constructor(name)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal8</span></span>&#123;<br>    constructor(name)&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        console.log(<span class="hljs-keyword">this</span>.name);<br>        <br>    &#125;<br>&#125;<br>let cat8 = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat8</span>(<span class="hljs-symbol">&#x27;cat</span>8&#x27;)<br>console.log(cat8); <span class="hljs-comment">// Cat8 &#123; name: &#x27;cat8&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure></li><li><p>修饰符和readonly可以使用在构造函数参数中</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 参数属性 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal9</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// tom9</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> cat9  = <span class="hljs-keyword">new</span> Animal9(<span class="hljs-string">&#x27;tom9&#x27;</span>); <br></code></pre></div></td></tr></table></figure></li><li><p>只读属性readonly</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-comment">/* readonly 可以用在属性 构造函数  */</span><br><span class="hljs-keyword">class</span> Animal10&#123;<br>    readonly <span class="hljs-type">name</span>; <br>    <span class="hljs-built_in">public</span> constructor (<span class="hljs-type">name</span>)&#123;<br>        this.name = <span class="hljs-type">name</span>;<br>    &#125;<br>&#125;<br>let a10 = <span class="hljs-built_in">new</span> Animal10(<span class="hljs-string">&#x27;tom10&#x27;</span>);<br>console.log(a10.name); // tom10<br>a10.name = <span class="hljs-string">&#x27;jack 10&#x27;</span> //  Cannot assign <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;name&#x27;</span> because it <span class="hljs-keyword">is</span> a <span class="hljs-keyword">read</span>-<span class="hljs-keyword">only</span> property.<br></code></pre></div></td></tr></table></figure></li><li><p>readonly和其他访问修饰符同时存在，要放到后面</p></li><li><p>抽象类</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 抽象类 不可以被实例化 抽象类的方法必须被子类实现 */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal11</span> </span>&#123; <span class="hljs-comment">// 抽象类</span><br>    <span class="hljs-keyword">public</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> sayHi(); <span class="hljs-comment">// 抽象方法</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat11</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal11</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`meow, my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>); <span class="hljs-comment">// meow, my name is tom11</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat11 = <span class="hljs-keyword">new</span> Cat11(<span class="hljs-string">&#x27;tom11&#x27;</span>);<br>cat11.sayHi();<br></code></pre></div></td></tr></table></figure></li><li><p>类的类型</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类的类型 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal12</span> </span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    sayHi():<span class="hljs-built_in">string</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> cat12:Animal12 = <span class="hljs-keyword">new</span> Animal12(<span class="hljs-string">&#x27;tom12&#x27;</span>); <span class="hljs-comment">// 指定cat12的类型是Animal12 而且进行了初始化</span><br><span class="hljs-built_in">console</span>.log(cat12.sayHi()); <span class="hljs-comment">// my name is tom12</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类与接口</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><ol><li><p>举例：</p><p>防盗门是门的子类，</p><p>防盗门有报警的功能</p><p>车有报警的功能</p><p>报警提取成接口，防盗门和车都去实现他</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">/* 类和接口 */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Alarm</span> </span>&#123;<br>    alert(): <span class="hljs-type">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityDoor</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Door</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;securityDoor alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>类实现多个接口</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 类实现多个接口 */</span><br><span class="hljs-keyword">interface</span> Alarm1 &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> Light&#123;<br>    lightOn():<span class="hljs-built_in">void</span>;<br>    lightOff():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car1</span> <span class="hljs-title">implements</span> <span class="hljs-title">Alarm1</span>,<span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car alert&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light on&#x27;</span>);<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">lightOff</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;car light off&#x27;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>接口继承接口</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-comment">/* 接口继承接口 */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Alarm2</span> &#123;<br>    alert():<span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Light2</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Alarm2</span>&#123; <span class="hljs-comment">// 除了继承父级的方法，还有定义了自己的方法</span><br>    lighton():<span class="hljs-built_in">void</span>;<br>    lightoff():<span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>接口继承类</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> Point3d <span class="hljs-keyword">extends</span> Point &#123; <span class="hljs-comment">// Point3d 实际上继承的是Point的实例的类型</span><br>    <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> point3d: Point3d = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">z</span>: <span class="hljs-number">3</span> &#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>接口为什么可以继承类</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口为什么可以继承类 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <span class="hljs-comment">// Point1 当做类来使用</span><br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> point1 = <span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">/*****************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point1</span> </span>&#123; <br>    <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br>    y: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printPoint</span> (<span class="hljs-params">p:Point1</span>)</span>&#123; <span class="hljs-comment">// Point1当做类型来用</span><br>    <span class="hljs-built_in">console</span>.log(p.x,p.y); <span class="hljs-comment">// 1 2 </span><br>&#125;<br>printPoint(<span class="hljs-keyword">new</span> Point1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <br></code></pre></div></td></tr></table></figure></li><li><p>声明Point类的时候，除了会创建一个名为Point类之外，还创建了一个名为Point的类型</p></li><li><p>声明Point类的时候，创建的Point类型是不包含构造函数的</p></li><li><p>声明Point类的时候,创建的Point类型只包含其中的实例属性和实例方法</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型别名</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E8%BF%9B%E9%98%B6ts-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型别名"><a href="#一、类型别名" class="headerlink" title="一、类型别名"></a>一、类型别名</h2><ol><li><p>使用type创建类型别名，多应用于联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> aa = <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">type</span> bb = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">let</span> a: aa = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> b: bb = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(a);<br><span class="hljs-built_in">console</span>.log(b);<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="二、字符串字面量类型"><a href="#二、字符串字面量类型" class="headerlink" title="二、字符串字面量类型"></a>二、字符串字面量类型</h2><ol><li><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/* 字符串字面量类型 */</span><br>type EventNames = <span class="hljs-string">&#x27;click&#x27;</span>| <span class="hljs-string">&#x27;scroll&#x27;</span>| <span class="hljs-string">&#x27;mousemove&#x27;</span>;<br><span class="hljs-keyword">function</span> handleEvent (ele:Element,event:EventNames)&#123;<br> <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br>handleEvent(document.getElementById(<span class="hljs-string">&#x27;hello&#x27;</span>),<span class="hljs-string">&#x27;scroll&#x27;</span>); <span class="hljs-regexp">//</span> 运行正常<br><span class="hljs-regexp">//</span> document is not defined (操作DOM和BOM 只能在浏览器环境下进行)<br><span class="hljs-regexp">//</span> handleEvent(document.getElementById(<span class="hljs-string">&#x27;world&#x27;</span>),<span class="hljs-string">&#x27;dbclick&#x27;</span>); <span class="hljs-regexp">//</span> 报错 因为没有<span class="hljs-string">&#x27;dbcllick&#x27;</span><br></code></pre></div></td></tr></table></figure></li><li><p>类型别名和字符串字面量类型都是用type来定义</p></li></ol><h2 id="三、元组"><a href="#三、元组" class="headerlink" title="三、元组"></a>三、元组</h2><ol><li><p>数组合并类型相同的对象，元组合并类型不同的对象</p></li><li><p>元组</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">25</span>];<br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">0</span>]); <span class="hljs-comment">// tom</span><br><span class="hljs-built_in">console</span>.log(tom[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 25</span><br></code></pre></div></td></tr></table></figure></li><li><p>元组赋值</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">let tom1: [string, number];<br>tom1 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];  // 必须先赋值，不然报错<br>tom1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom1&#x27;</span>;<br>tom1[<span class="hljs-number">1</span>] = <span class="hljs-number">25</span>;<br>console.log(tom1[<span class="hljs-number">0</span>]);<br>console.log(tom1[<span class="hljs-number">1</span>]);<br></code></pre></div></td></tr></table></figure></li><li><p>可以赋值一个</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom2: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom2 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom2[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;tom2&#x27;</span>; <span class="hljs-comment">// 只赋值一个值</span><br><span class="hljs-built_in">console</span>.log(tom2[<span class="hljs-number">0</span>]);<br></code></pre></div></td></tr></table></figure></li><li><p>直接变量初始化</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom3: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom3 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>]; <span class="hljs-comment">// 直接初始化，必须赋值所有项</span><br></code></pre></div></td></tr></table></figure></li><li><p>越界元素不允许</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> tom4: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>tom4 = [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">0</span>];<br>tom4.push(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tom4); <span class="hljs-comment">// [ &#x27;jack&#x27;, 0, &#x27;tom&#x27; ]</span><br>tom4.push(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 无法push,必须push元组中的类型</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="四、枚举"><a href="#四、枚举" class="headerlink" title="四、枚举"></a>四、枚举</h2><ol><li><p>枚举的关键字enum</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-string">&#x27;Sun&#x27;</span>] === <span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(Days[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;Sun&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure></li><li><p>枚举成员会被赋值从0开始递增的数字，同时也会对枚举值和枚举名进行反向映射</p></li><li><p>给枚举项手动赋值，没有赋值的会递增上一个的枚举值</p></li><li><p>手动赋值</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值 */</span><br>enum Days1 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days1[<span class="hljs-string">&#x27;Wed&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></li><li><p>手动赋值小数</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/* 手动赋值可以是小数 */</span><br>enum Days2 &#123;Sun = <span class="hljs-number">7</span>, Mon = <span class="hljs-number">1.5</span>, Tue, Wed, Thu, Fri, Sat&#125;;<br>console.log(Days2[<span class="hljs-string">&#x27;Tue&#x27;</span>]); <span class="hljs-regexp">//</span> <span class="hljs-number">2.5</span><br></code></pre></div></td></tr></table></figure></li><li><p>常数枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 常输枚举 不可以包含计算属性 <span class="hljs-operator">*/</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span><br></code></pre></div></td></tr></table></figure></li><li><p>外部枚举</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-operator">/*</span> 外部枚举 <span class="hljs-operator">*/</span><br><span class="hljs-variable">declare</span> <span class="hljs-variable">enum</span> <span class="hljs-variable">Directions2</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-built_in">Up</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Down</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Left</span><span class="hljs-operator">,</span><br>    <span class="hljs-built_in">Right</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">let</span> <span class="hljs-variable">directions2</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Up</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Down</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Left</span><span class="hljs-operator">,</span> <span class="hljs-variable">Directions2</span><span class="hljs-operator">.</span><span class="hljs-built_in">Right</span><span class="hljs-punctuation">]</span><span class="hljs-operator">;</span> <span class="hljs-operator">//</span> <span class="hljs-punctuation">(</span>运行时会报错 <span class="hljs-variable">Directions2</span> <span class="hljs-variable">is</span> <span class="hljs-variable">not</span> <span class="hljs-variable">defined</span><span class="hljs-punctuation">)</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-内置对象</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、内置对象"><a href="#一、内置对象" class="headerlink" title="一、内置对象"></a>一、内置对象</h2><ol><li><p>ECMAScript的内置对象:Boolean、Error、Date、RegExp</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">let b:Boolean = new Boolean(1);<br>let e:Error = new Error(&#x27;Error occurred&#x27;);<br>let d:Date = new Date();<br>let r:RegExp = /[a-z]/;<br></code></pre></div></td></tr></table></figure></li><li><p>DOM和BOM的内置对象：Document、HTMLElement、Event、NodeList</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body: HTMLElement = <span class="hljs-built_in">document</span>.body;<br><span class="hljs-keyword">let</span> allDiv: NodeList = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e:MouseEvent</span>)</span>&#123;<br><span class="hljs-comment">// </span><br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-类型断言</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类型断言"><a href="#一、类型断言" class="headerlink" title="一、类型断言"></a>一、类型断言</h2><ol><li><p>类型断言可以手动指定一个值的类型</p></li><li><p>我觉得更好理解的一种说法：就是告诉编译器你不用做类型检查了，相信我，它就是这个类型</p></li><li><p>推荐使用 “值 as 类型”的写法</p></li><li><p>类型断言的用途：</p><ol><li><p>将一个联合类型指定为其中的一个类型</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">/* 将一个联合类型断言为其中一个类型§ */<br>interface Cat &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br>interface Fish &#123;<br>    name: string;<br>    swim(): void;<br>&#125;<br>function getName(anmial: Cat | Fish) &#123;<br>    return anmial.name; // 只能访问公共的属性或者方法<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">// function isFish(anmial: Cat | Fish) &#123;<br>//     if (typeof anmial.swim === &#x27;function&#x27;) &#123; // 会报错，无法访问私有的<br>//         return true;<br>//     &#125; else &#123;<br>//         return false;<br>//     &#125;<br>// &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">function isFish2(animal: Cat | Fish) &#123;<br>    if (typeof (animal as Fish).swim === &#x27;function&#x27;) &#123; // 使用类型断言欺骗ts编译器<br>        return true;<br>    &#125;<br>    return false;<br>&#125;<br>const tom: Cat = &#123; // 定义变量<br>    name: &#x27;Tom&#x27;,<br>    run() &#123; console.log(&#x27;swim&#x27;) &#125;<br>&#125;;<br>console.log(isFish2(tom));<br></code></pre></div></td></tr></table></figure></li><li><p>将一个父类断言成更加具体的子类</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">apiError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    code: number = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">httpError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>&#123;<br>    statusCode: number = <span class="hljs-number">200</span>;<br>&#125;<br>function isApiError(error: <span class="hljs-type">Error</span>) &#123;<br>    <span class="hljs-keyword">if</span> (typeof (error as apiError).code === <span class="hljs-symbol">&#x27;numbe</span>r&#x27;) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>将任何一个类型断言成any(慎用)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/* 将任何一个类型断言为 any */</span><br><span class="hljs-regexp">//</span> const foo: number =<span class="hljs-number">1</span>;<br><span class="hljs-regexp">//</span> foo.length =<span class="hljs-number">1</span>; (会报错)<br>(window as any).foo =<span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>将any断言成一个具体的类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* 将any断言成一个具体的类型 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCacheData</span>(<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.cache[key];<br>&#125;<br><span class="hljs-keyword">var</span> tom1 = getCacheData(<span class="hljs-string">&#x27;args&#x27;</span>);<br>tom.run();<br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>类型断言的限制：要使得A断言为B，只需要A兼容B或者B兼容A即可</p></li><li><p>双重断言，不到万不得已，不使用</p></li><li><p>类型断言VS类型转换：类型断言更像是类型的选择，而不是类型的转换</p></li><li><p>类型断言VS 类型声明：类型声明比类型断言更加严格</p></li><li><p>类型断言VS泛型</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tsx">/* 类型断言VS泛型 */<br>function getCacheData1&lt;T&gt;(key: string): T &#123;<br>    return (window as any).cache[key];<br>&#125;<br><br>interface Cat1 &#123;<br>    name: string;<br>    run(): void;<br>&#125;<br><br>const tom3 = getCacheData1&lt;Cat1&gt;(&#x27;args&#x27;);<br>tom3.run();<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-函数类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、函数是js的一等公民"><a href="#一、函数是js的一等公民" class="headerlink" title="一、函数是js的一等公民"></a>一、函数是js的一等公民</h2><ol><li><p>js的函数声明</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">/* js函数声明 */<br><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>js的函数表达式</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">/* js函数表达式 */<br>let mySum = <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(x, y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> + y;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>ts的函数声明</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/* ts函数声明 */</span><br><span class="hljs-keyword">function</span> sum1(x: number, y: number): number &#123;<br>    return x + y;<br>&#125;<br><span class="hljs-regexp">//</span> 输入多余或者少于的参数都是不被允许的，会报错<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-regexp">//</span> sum1(<span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure></li><li><p>ts的函数表达式</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts函数表达式 */</span><br><span class="hljs-keyword">let</span> mySum1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>ts的箭头函数</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts箭头函数 */</span><br><span class="hljs-keyword">let</span> mySum2: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>接口定义函数</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 接口定义函数 */</span><br><span class="hljs-keyword">interface</span> Func1 &#123;<br>    (source: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-keyword">let</span> myFun: Func1;<br>myFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, arg2: <span class="hljs-built_in">string</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arg1.search(arg2) !== <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/* 返回结果true */</span><br><span class="hljs-built_in">console</span>.log(myFun(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>));<br></code></pre></div></td></tr></table></figure></li><li><p>ts函数的可选参数（必须写在最后，可选参数后面不可以出现必须函数了）</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* ts的可选参数 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName?: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat, tom);<br><span class="hljs-comment">// 结果：tomcat tom</span><br></code></pre></div></td></tr></table></figure></li><li><p>ts函数参数的默认值（自动识别默认值的参数是可选参数，不在受[可选参数必须在必须参数后面]的限制）</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildname1</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;cat&#x27;</span></span>): <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27;&#x27;</span> + lastName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> tomcat1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>);<br><span class="hljs-keyword">let</span> tom1 = buildname(<span class="hljs-string">&#x27;tom&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(tomcat1, tom1);<br><span class="hljs-comment">// 结果：tomcat tomcat</span><br></code></pre></div></td></tr></table></figure></li><li><p>ts 函数重载</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">/* ts函数重载 */<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br><span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> | void &#123;<br>    <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br>&#125;<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-number">123</span>));<br>console.log<span class="hljs-built_in">(reverse</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<br></code></pre></div></td></tr></table></figure></li><li><p>重载要求函数名相同，但是参数的类型、参数的个数不相同，跟java的重载相似</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-数组类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数组的表示方法"><a href="#一、数组的表示方法" class="headerlink" title="一、数组的表示方法"></a>一、数组的表示方法</h2><ol><li><p>[类型 + 方括号] 表示法</p><figure class="highlight golo"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs golo"><span class="hljs-keyword">let</span> <span class="hljs-keyword">array</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br></code></pre></div></td></tr></table></figure></li><li><p>泛型表示方法</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">let array3 <span class="hljs-symbol">:Array&lt;number&gt;</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></div></td></tr></table></figure></li><li><p>接口表示方法(一般表示类数组才会用到)</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 数值数组</span><br><span class="hljs-keyword">interface</span> NumberArray&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array4 : NumberArray = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">// 字符数组</span><br><span class="hljs-keyword">interface</span> NumberArray1&#123;<br>    [index:<span class="hljs-built_in">number</span>] : <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">let</span> array5 : NumberArray1 = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>];<br></code></pre></div></td></tr></table></figure></li><li><p>类数组不是数组类型 （比如arguments、IArguments）</p></li><li><p>类数组不可以普通的数组来描述，应该用接口</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 类数组(arguments是类数组,不可以用普通的方式表示，要用接口)<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span> sum ()&#123;<br><span class="hljs-regexp">//</span>     let args :number[] = arguments;(会报错)<br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> 正常运行<br><span class="hljs-keyword">function</span> sum ()&#123;<br>    let args : &#123;<br>        [index:number] : number;  <span class="hljs-regexp">//</span> 类型<br>        length:number; <span class="hljs-regexp">//</span> 属性<br>        callee:Function; <span class="hljs-regexp">//</span> 属性<br>    &#125; = arguments;<br>&#125;<br><span class="hljs-keyword">function</span> sum2 ()&#123;<br>    let args: IArguments = arguments; <span class="hljs-regexp">//</span> IArguments是ts定义好的类型<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>any在数组中的应用</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> list : <span class="hljs-built_in">any</span>[] = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-attr">data</span>:<span class="hljs-string">&#x27;你好&#x27;</span>&#125;];<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-对象类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对象类型-接口"><a href="#一、对象类型-接口" class="headerlink" title="一、对象类型-接口"></a>一、对象类型-接口</h2><ol><li><p>ts中对象通过接口来实现</p></li><li><p>确定属性：</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> tom:Person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">25</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>定义了一个接口Person,定义了一个变量：tom ,他的类型是Person，约束了变量的形状必须和接口保持一致</p></li><li><p>接口一般会大写</p></li><li><p>定义的变量比接口多一些属性或者少一些属性都是不允许的</p></li><li><p>赋值的时候，变量的形状必须和接口保持一致</p></li><li><p>可选属性：</p></li><li><p>如果我们不希望完全匹配一个形状，我们可以设置可选属性（但是并不允许添加未定义的属性）</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Car &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> car1:Car = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>任意属性：</p></li><li><p>任意属性有固定的写法：[propName:string]:xxx;</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Cat &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    age?:<span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> cat:Cat = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leg</span>:<span class="hljs-number">4</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>只要定义了任意属性，那确定属性和可选属性只能是他的子属性</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 报错，因为number不是string的子属性</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125;<br><span class="hljs-comment">// 正常运行</span><br><span class="hljs-keyword">interface</span> Tree &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 可选属性</span><br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 任意属性</span><br>&#125;<br><span class="hljs-keyword">let</span> tree: Tree = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小车&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;12岁了&#x27;</span>,<br>    <span class="hljs-attr">leave</span>: <span class="hljs-string">&#x27;12个&#x27;</span><br>&#125; <br></code></pre></div></td></tr></table></figure></li><li><p>只读属性：(只能在创建时被赋值)</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">// 报错，因<span class="hljs-built_in">为id</span>已经被初始化，在赋值会报错<br>interface Person &#123;<br>    readonly<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> number</span>;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>    [propName:<span class="hljs-built_in"> string</span>]: any;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">89757</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    gender: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom<span class="hljs-built_in">.id</span> = <span class="hljs-number">9527</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>只读属性的约束在第一次给对象赋值的时候，不是第一次给只读属性赋值的时候</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Person &#123;<br>    <span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">number</span>;<br>    name: <span class="hljs-built_in">string</span>;<br>    age?: <span class="hljs-built_in">number</span>;<br>    [propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,   <span class="hljs-comment">// 第一次错误：初始化的时候，没有给只读属性赋值</span><br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom.id = <span class="hljs-number">89757</span>; <span class="hljs-comment">// 无法赋值，他是只读属性， 只能在创建时赋值</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-原始数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E5%9F%BA%E7%A1%80ts-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、boolean类型"><a href="#一、boolean类型" class="headerlink" title="一、boolean类型"></a>一、boolean类型</h2><ol><li> boolean是最基本的数据类型，boolean是js的基本类型，Boolean是js的构造函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> createdByNewBoolean = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByNewBoolean);<br>输出：<span class="hljs-built_in">object</span><br><span class="hljs-comment">//直接调用Boolean 也可以返回一个boolean类型</span><br><span class="hljs-keyword">let</span> createdByboolean :<span class="hljs-built_in">boolean</span> = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> createdByboolean);<br>输出：<span class="hljs-built_in">boolean</span><br><span class="hljs-comment">// 但是多一个new关键字，就会报错</span><br><span class="hljs-keyword">let</span> createdByNewBoolean: <span class="hljs-built_in">boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);(报错)<br>因为使用构造函数创建的对象不是<span class="hljs-built_in">Boolean</span>值<br></code></pre></div></td></tr></table></figure><h2 id="二、数值"><a href="#二、数值" class="headerlink" title="二、数值"></a>二、数值</h2><h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><ol><li><p>ts生成模板string</p></li><li><p>``用来定义es6的模板字符串，${expr} 用来</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myName : <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-keyword">let</span> Myage : <span class="hljs-built_in">number</span> = <span class="hljs-number">23</span>;<br><br><span class="hljs-keyword">let</span> sentence : <span class="hljs-built_in">string</span> = <span class="hljs-string">`hello , my name is <span class="hljs-subst">$&#123;myName&#125;</span>. I am <span class="hljs-subst">$&#123;Myage+<span class="hljs-number">1</span>&#125;</span> years old`</span><br><span class="hljs-built_in">console</span>.log(sentence)<br><span class="hljs-comment">// 输出hello , my name is Tom. I am 24 years old</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="四、空值"><a href="#四、空值" class="headerlink" title="四、空值"></a>四、空值</h2><ol><li>js中没有空值的概念，在ts中可以用void表示没有任何返回值的函数</li></ol><h2 id="五、null和undefined"><a href="#五、null和undefined" class="headerlink" title="五、null和undefined"></a>五、null和undefined</h2><ol><li>ts里可以定义null和undefined两种数据类型</li><li>null和undefined是所有类型的子类型（undefined类型可以赋值给number类型）</li><li>void类型不可以赋值给number类型</li></ol><h2 id="六、任意值（any）"><a href="#六、任意值（any）" class="headerlink" title="六、任意值（any）"></a>六、任意值（any）</h2><ol><li><p>一个普通类型，在赋值过程中改变类型是不被允许的</p></li><li><p>但是如果是任意类型，就可以被赋值成任何类型</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> myFavoriteNumber: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myFavoriteNumber = <span class="hljs-number">7</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>任意值上可以访问任意的属性</p></li><li><p>任意值上也可以调用任何的方法</p></li><li><p>声明一个变量是任意值以后，对他的任何操作，返回的任何类型都是任意值</p></li><li><p>如果没有声明类型的变量，识别成任意值类型</p></li></ol><h2 id="七、类型推论"><a href="#七、类型推论" class="headerlink" title="七、类型推论"></a>七、类型推论</h2><ol><li><p>如果在定义的时候没有赋值，那么会识别成any类型</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 会报错</span><br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 不会报错</span><br><span class="hljs-keyword">let</span> myAge;<br>Myage = <span class="hljs-string">&#x27;serven&#x27;</span>;<br>myAge = <span class="hljs-number">7</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>如果在定义的时候赋值了，会进行类型推论</p></li><li><p>总结：赋值是推论，没赋值是any</p></li></ol><h2 id="八、联合类型"><a href="#八、联合类型" class="headerlink" title="八、联合类型"></a>八、联合类型</h2><ol><li><p>联合类型的写法</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">let</span> myName: string | number;<br><span class="hljs-attribute">myName</span> = <span class="hljs-string">&#x27;seven&#x27;</span>;<br><span class="hljs-attribute">myName</span> = <span class="hljs-number">7</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>只可以识别联合类型里有的类型，没有的类型，会报错</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myName: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myName = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myName = <span class="hljs-number">7</span>;<br><span class="hljs-comment">// 会报错</span><br><span class="hljs-comment">// myName = true; </span><br></code></pre></div></td></tr></table></figure></li><li><p>访问联合类型的属性或者方法，只能访问联合类型共有的类型和方法</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 会报错，因为number没有length属性</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : number&#123;<br>   return something.length;<br> &#125;<br><span class="hljs-comment">// 运行成功</span><br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Length(<span class="hljs-params">something</span> : <span class="hljs-params">string</span> | <span class="hljs-params">number</span>)</span> : <span class="hljs-built_in">string</span>&#123;<br>    return something.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>联合类型的变量在被赋值的时候，会根据类型推断的规则推断出一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 运行成功 */</span><br><span class="hljs-keyword">let</span> myTest: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myTest = <span class="hljs-string">&#x27;server&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length);<br><span class="hljs-comment">// 根据类型推论得到myTest的类型是number，会报错</span><br>myTest = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.log(myTest.length)<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ts.xcatliu.com/">TypeScript入门教程</a></p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-hellots</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-hellots/</url>
    
    <content type="html"><![CDATA[<h2 id="一、第一个ts"><a href="#一、第一个ts" class="headerlink" title="一、第一个ts"></a>一、第一个ts</h2><ol><li><p>全局安装ts    npm install -g typescript</p></li><li><p>vscode 环境下运行ts文件</p></li><li><p>编写第一个ts文件，在终端输入tsc hello.ts 去编译文件 ，会自动生成hello.js 文件</p><figure class="highlight ts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">/* 编译成功 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br><span class="hljs-comment">/*编译出错 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span> (<span class="hljs-params">person : <span class="hljs-built_in">string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">let</span> user = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// Hello.js 中的代码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">person</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span> + person;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(sayHello(user));<br></code></pre></div></td></tr></table></figure></li><li><p>使用node hello.js 可以运行js文件</p></li><li><p>ts会在编译的时候对类型进行静态检查，如果有错，编译的时候就会报错，但是还是会生成相应的js文件，如果不想生成js，在tsconfig.json中配置noEmitOnError即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts-ts简介</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/ts/ts%E7%AE%80%E4%BB%8Bts-ts%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ts简介"><a href="#一、ts简介" class="headerlink" title="一、ts简介"></a>一、ts简介</h2><ol><li><p>ts是添加了类型系统的js，适合任何项目</p></li><li><p>ts是一个静态类型，弱类型语言</p><p>动态类型：是运行时才做类型检查(js)</p><p>静态类型：是编译的时候就去做类型检查(ts)</p><p>弱类型：是允许隐式转换</p><p>强类型：不允许类型转换(python)</p></li><li><p>ts完全兼容js</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>ts</category>
      
      <category>ts简介</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>师姐分享</title>
    <link href="/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/"/>
    <url>/%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB%E5%B8%88%E5%A7%90%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://zhuanlan.zhihu.com/p/60279001">前端面试：谈谈 JS 垃圾回收机制 - 知乎</a></li><li><a href="https://www.cnblogs.com/xaun/p/13673798.html">关于height:100%和height:100vh的区别 - 六人行 - 博客园</a></li><li><a href="https://www.cnblogs.com/yxkNotes/p/13931717.html">浏览器设置强缓存和协商缓存 - Judicious - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/138490697">ajax请求的五个步骤 - 知乎</a></li><li><a href="https://blog.csdn.net/qq_41261490/article/details/82966077">js中正则表达式test()方法_DiuDiu_yang的博客-CSDN博客_js test</a></li><li><a href="https://mp.weixin.qq.com/s/FnN0cIhhS8Y7mJADFCdfqQ">面经字节校招四轮技术面</a></li><li><a href="https://mp.weixin.qq.com/s/GnTIlJ80bfI28NrwwZmNLw">你真的了解 GET 和 POST 吗，它们的区别是什么？</a></li><li><a href="https://www.kwgg2020.com/">前端导航</a></li><li><a href="https://zhuanlan.zhihu.com/p/39903074">Web前端知识体系梳理 - 知乎</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>师姐分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Share</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目列表</title>
    <link href="/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/"/>
    <url>/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、智库项目"><a href="#一、智库项目" class="headerlink" title="一、智库项目"></a>一、智库项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801151402.png" alt="image-20210801151400899"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801151453.png" alt="image-20210801151452979"></p><h2 id="二、团委项目"><a href="#二、团委项目" class="headerlink" title="二、团委项目"></a>二、团委项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801105503.png"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801105611.png"></p><h2 id="三、社科联"><a href="#三、社科联" class="headerlink" title="三、社科联"></a>三、社科联</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801161402.png" alt="image-20210801161401775"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801161424.png" alt="image-20210801161422917"></p><h2 id="四、璧山项目"><a href="#四、璧山项目" class="headerlink" title="四、璧山项目"></a>四、璧山项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801162432.png" alt="image-20210801162431522"></p><h2 id="五、气矿项目"><a href="#五、气矿项目" class="headerlink" title="五、气矿项目"></a>五、气矿项目</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801162758.png" alt="image-20210801162757554"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801164221.png" alt="image-20210801164220913"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801164311.png" alt="image-20210801164309941"></p><h2 id="六、社科处"><a href="#六、社科处" class="headerlink" title="六、社科处"></a>六、社科处</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801173140.png" alt="1 (1)"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801173154.png" alt="2 (1)"></p><h2 id="七、中石化"><a href="#七、中石化" class="headerlink" title="七、中石化"></a>七、中石化</h2><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801185819.png" alt="image-20210801185818654"></p><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210801185849.png" alt="image-20210801185848472"></p>]]></content>
    
    
    <categories>
      
      <category>实战项目</category>
      
      <category>研究生项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-异步操作</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、异步操作"><a href="#一、异步操作" class="headerlink" title="一、异步操作"></a>一、异步操作</h2><ol><li><p>javaScript是单线程模式</p></li><li><p>好处是：实现比较简单，执行环境相对简单</p></li><li><p>坏处是: 只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行</p></li><li><p>为了解决这个问题，js的内部采用了”事件循环”机制</p></li><li><p>同步任务和异步任务</p></li><li><p>异步操作的几种模式</p><ol><li>事件回调</li><li>事件监听</li><li>发布/订阅</li></ol></li><li><p>异步操作的流程控制</p><ol><li>串行执行</li><li>并行执行</li><li>并行与串行结合</li></ol></li><li><p>定时器setTimeout 设置某个函数或者代码推迟一段时间运行，setInterval 设置任务每隔一段时间就执行</p></li><li><p>promise对象 是js的异步操作解决方案，为异步操作提供统一接口，起到了代理的作用</p></li><li><p>promise是对象，也是构造函数</p></li><li><p>promise实例的then(),用来添加回调函数</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-面向对象编程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、new"><a href="#一、new" class="headerlink" title="一、new"></a>一、new</h2><ol><li>面向对象编程的语言（c++、java）</li><li>对象是一个具体实物的抽象</li><li>对象是一个容器，包含属性和方法</li><li>c++和java都有一个类的概念，所谓类就是对象的模板，对象是类的实例</li><li>但是js的语言的对象体系不是基于类的，是基于构造函数和原型链的</li><li>js使用构造函数做为对象的模板</li><li>构造函数的特点：（1）函数的内部使用了this关键字，（2）生成对象的时候必须使用new关键字</li><li>new命令的特点：执行构造函数，返回一个实例对象</li><li>Object.create() 创建实例对象，有时候拿不到构造函数，就以现有的对象做为模板，生成新的实例对象</li></ol><h2 id="二、this"><a href="#二、this" class="headerlink" title="二、this"></a>二、this</h2><ol><li><p>this的指向，总是指向当前属性或者方法所在的对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓名:&#x27;</span>+ <span class="hljs-built_in">this</span>.name;<br>&#125;<br><br><span class="hljs-keyword">var</span> A = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><span class="hljs-keyword">var</span> B = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<br><span class="hljs-attr">describe</span>:f<br>&#125;<br><br>A.describe()<br><span class="hljs-string">&quot;姓名:张三&quot;</span><br>B.describe()<br><span class="hljs-string">&quot;姓名:李四&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>this的使用场合</p><p>（1）全局环境；this指的是顶层对象window</p><p>（2）构造函数；this指是的实例对象</p><p>（3）对象的方法；this指的是该方法运行时所在的对象</p></li><li><p>绑定this的方法</p><p>Function.prototype.call()</p><p>Function.prototype.apply()</p><p>Function.prototype.bind()</p></li></ol><h2 id="三、对象继承"><a href="#三、对象继承" class="headerlink" title="三、对象继承"></a>三、对象继承</h2><ol><li><p>通过构造函数为实例对象定义属性，同一个构造函数的多个实例之间无法共享属性</p></li><li><p>prototype属性的作用；属性和方法定义在原型对象上，所有的实例对象都可以共享</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span> (<span class="hljs-params">name</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br>Animal.prototype.color = <span class="hljs-string">&#x27;white&#x27;</span>;<br><span class="hljs-keyword">var</span> cat1 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;大猫&#x27;</span>);<br><span class="hljs-keyword">var</span> cat2 = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;小猫&#x27;</span>);<br>cat1.name;<br><br><span class="hljs-string">&quot;大猫&quot;</span><br>cat2.name<br><span class="hljs-string">&quot;小猫&quot;</span><br>cat1.color<br><span class="hljs-string">&quot;white&quot;</span><br>cat2.color<br><span class="hljs-string">&quot;white&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>每一个函数都有一个prototype属性，指向一个对象</p></li><li><p>原型链，读取对象属性的时候，js引擎先在当前对象中找，如果找不到就去原型对象中找，直到顶层Object.prototype，找不到返回undefined</p></li><li><p>constructor属性，默认指向prototype对象的构造函数</p></li><li><p>instanceof运算符，判断对象是否是某个构造函数的实例</p></li></ol><h2 id="四、object对象"><a href="#四、object对象" class="headerlink" title="四、object对象"></a>四、object对象</h2><ol><li><p>Object.getPrototypeOf() 获取原型对象的标准方法</p><p>object的原型对象是null</p><p> 空对象的原型对象是Object</p><p>function的原型对象是Function</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(&#123;&#125;)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf((Object.<span class="hljs-params">prototype</span>)</span>)<span class="hljs-operator"> === </span>null<br><span class="hljs-literal">true</span><br><span class="hljs-keyword">function</span> F <span class="hljs-literal">()</span> &#123;&#125; ;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(F)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Function</span>.</span></span>prototype<br><span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li><li><p>Object.setPrototypeOf()可以模拟new,第一个参数是现有对象，第二个参数是原型对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> F ();<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">this</span>.foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> f = <span class="hljs-built_in">Object</span>.setPrototypeOf(&#123;&#125;,F.prototype);<br>f.foo<br><br><span class="hljs-literal">undefined</span><br>F.call(f);<br>f.foo<br><span class="hljs-string">&quot;bar&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Object.create () 提供一个对象做为另一个对象的原型，另一个对象继承所有属性和方法</p></li><li><p>Object.prototype.isPrototypeOf() 判断对象是不是参数对象的原型</p></li><li><p>```<br>Object.prototype.<strong>proto</strong> 实例对象的__proto__属性，返回该对象的原型</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><br>   <br><br><span class="hljs-number">6</span>. 获取实例对象的<span class="hljs-number">3</span>种方法：<br><br>   ```js<br>   obj.__proto__ <span class="hljs-regexp">//</span> 只有浏览器才需要部署<br>   obj.constructor.prototype <span class="hljs-regexp">//</span> 如果改写了原型对象，就会失真<br>   obj.getPrototypeOf(obj) <span class="hljs-regexp">//</span> 推荐<br></code></pre></div></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames() 返回一个数组，对象是参数对象所有自身属性的键名</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Date)<br>(<span class="hljs-number">6</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>]</span><br><span class="hljs-selector-tag">Object</span><span class="hljs-selector-class">.getOwnPropertyNames</span>(Math)<br>(<span class="hljs-number">43</span>) <span class="hljs-selector-attr">[<span class="hljs-string">&quot;abs&quot;</span>, <span class="hljs-string">&quot;acos&quot;</span>, <span class="hljs-string">&quot;acosh&quot;</span>, <span class="hljs-string">&quot;asin&quot;</span>, <span class="hljs-string">&quot;asinh&quot;</span>, <span class="hljs-string">&quot;atan&quot;</span>, <span class="hljs-string">&quot;atanh&quot;</span>, <span class="hljs-string">&quot;atan2&quot;</span>, <span class="hljs-string">&quot;ceil&quot;</span>, <span class="hljs-string">&quot;cbrt&quot;</span>, <span class="hljs-string">&quot;expm1&quot;</span>, <span class="hljs-string">&quot;clz32&quot;</span>, <span class="hljs-string">&quot;cos&quot;</span>, <span class="hljs-string">&quot;cosh&quot;</span>, <span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;floor&quot;</span>, <span class="hljs-string">&quot;fround&quot;</span>, <span class="hljs-string">&quot;hypot&quot;</span>, <span class="hljs-string">&quot;imul&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;log1p&quot;</span>, <span class="hljs-string">&quot;log2&quot;</span>, <span class="hljs-string">&quot;log10&quot;</span>, <span class="hljs-string">&quot;max&quot;</span>, <span class="hljs-string">&quot;min&quot;</span>, <span class="hljs-string">&quot;pow&quot;</span>, <span class="hljs-string">&quot;random&quot;</span>, <span class="hljs-string">&quot;round&quot;</span>, <span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;sin&quot;</span>, <span class="hljs-string">&quot;sinh&quot;</span>, <span class="hljs-string">&quot;sqrt&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;tanh&quot;</span>, <span class="hljs-string">&quot;trunc&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;LN10&quot;</span>, <span class="hljs-string">&quot;LN2&quot;</span>, <span class="hljs-string">&quot;LOG10E&quot;</span>, <span class="hljs-string">&quot;LOG2E&quot;</span>, <span class="hljs-string">&quot;PI&quot;</span>, <span class="hljs-string">&quot;SQRT1_2&quot;</span>, <span class="hljs-string">&quot;SQRT2&quot;</span>]</span><br></code></pre></div></td></tr></table></figure></li><li><p>Object.prototype.hasOwnProperty 判断某个属性定义在对象自身还是原型链</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;length&#x27;</span>)<br><span class="hljs-literal">true</span><br><span class="hljs-built_in">Date</span>.hasOwnProperty(<span class="hljs-string">&#x27;toString&#x27;</span>)<br><span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure></li><li><p>获取对象的所有属性，不管是自身的还是继承的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritedPropertyNames</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-keyword">var</span> props = &#123;&#125;;<br><span class="hljs-keyword">while</span>(obj)&#123;<br><span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) </span>&#123;<br>props[p] = <span class="hljs-literal">true</span>;<br>&#125;);<br>obj = <span class="hljs-built_in">Object</span>.getPrototypeOf(obj);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.getOwnPropertyNames(props);<br>&#125;<br>inheritedPropertyNames(<span class="hljs-built_in">Date</span>);<br>(<span class="hljs-number">22</span>) [<span class="hljs-string">&quot;length&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;prototype&quot;</span>, <span class="hljs-string">&quot;now&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>, <span class="hljs-string">&quot;UTC&quot;</span>, <span class="hljs-string">&quot;arguments&quot;</span>, <span class="hljs-string">&quot;caller&quot;</span>, <span class="hljs-string">&quot;constructor&quot;</span>, <span class="hljs-string">&quot;apply&quot;</span>, <span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>, <span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-string">&quot;__defineGetter__&quot;</span>, <span class="hljs-string">&quot;__defineSetter__&quot;</span>, <span class="hljs-string">&quot;hasOwnProperty&quot;</span>, <span class="hljs-string">&quot;__lookupGetter__&quot;</span>, <span class="hljs-string">&quot;__lookupSetter__&quot;</span>, <span class="hljs-string">&quot;isPrototypeOf&quot;</span>, <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span>, <span class="hljs-string">&quot;valueOf&quot;</span>, <span class="hljs-string">&quot;toLocaleString&quot;</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;length&quot;</span><span class="hljs-number">1</span>: <span class="hljs-string">&quot;name&quot;</span><span class="hljs-number">2</span>: <span class="hljs-string">&quot;prototype&quot;</span><span class="hljs-number">3</span>: <span class="hljs-string">&quot;now&quot;</span><span class="hljs-number">4</span>: <span class="hljs-string">&quot;parse&quot;</span><span class="hljs-number">5</span>: <span class="hljs-string">&quot;UTC&quot;</span><span class="hljs-number">6</span>: <span class="hljs-string">&quot;arguments&quot;</span><span class="hljs-number">7</span>: <span class="hljs-string">&quot;caller&quot;</span><span class="hljs-number">8</span>: <span class="hljs-string">&quot;constructor&quot;</span><span class="hljs-number">9</span>: <span class="hljs-string">&quot;apply&quot;</span><span class="hljs-number">10</span>: <span class="hljs-string">&quot;bind&quot;</span><span class="hljs-number">11</span>: <span class="hljs-string">&quot;call&quot;</span><span class="hljs-number">12</span>: <span class="hljs-string">&quot;toString&quot;</span><span class="hljs-number">13</span>: <span class="hljs-string">&quot;__defineGetter__&quot;</span><span class="hljs-number">14</span>: <span class="hljs-string">&quot;__defineSetter__&quot;</span><span class="hljs-number">15</span>: <span class="hljs-string">&quot;hasOwnProperty&quot;</span><span class="hljs-number">16</span>: <span class="hljs-string">&quot;__lookupGetter__&quot;</span><span class="hljs-number">17</span>: <span class="hljs-string">&quot;__lookupSetter__&quot;</span><span class="hljs-number">18</span>: <span class="hljs-string">&quot;isPrototypeOf&quot;</span><span class="hljs-number">19</span>: <span class="hljs-string">&quot;propertyIsEnumerable&quot;</span><span class="hljs-number">20</span>: <span class="hljs-string">&quot;valueOf&quot;</span><span class="hljs-number">21</span>: <span class="hljs-string">&quot;toLocaleString&quot;</span>length: 22__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-标准库</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%A0%87%E5%87%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、object对象"><a href="#一、object对象" class="headerlink" title="一、object对象"></a>一、object对象</h2><p>object对象，所有其他的对象都是继承了object对象，那些对象是object的实例</p><p>object的方法分成原生方法和实例方法</p><p>object（）函数，可以将任意类型转换成对象</p><p>object构造函数  var obj = new  Object（），主要用他来生成新的对象</p><p>Object（value）表示将一个值转换成对象，new Object （value）是新生成一个对象，值是value</p><p>object的静态方法和实例方法</p><p>静态方法是定义在object对象上，Object.keys 、Object.getOwnPropertyNames</p><p>实例方法是定义在object.prototype对象上，Object.prototype.valueOf()、Object.prototype.toString() 。。。。</p><p>所有的实例对象都可以继承实例方法</p><p>object和Object.prototype 的区别</p><p>obeject其实就是一个函数，函数是对象，但是所有的原型是对象，但是不是函数，object.prototype是对象，是js的根对象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>.prototype.__proto__<br><span class="hljs-string">&quot;object&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><ol><li><p>数组的构造方法</p><p>最建议使用的方式：var arrays = [1,2,3]</p><p>var arrays = new Array（2）定义一个长度是2的数组</p></li><li><p>数组的静态方法</p><p>Array.isArray()</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrays = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">Array</span>.isArray(arrays)<br><span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li><li><p>数组的实例方法</p><ol><li><p>valueof()返回数组本身，toString() 返回数组的字符串形式</p></li><li><p>push()方法，在数组的尾部添加一个或者多个值，返回新数组的长度</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.push(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure></li><li><p>pop()删除数组的最后一个元素，并且返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.pop()<br><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>pop和push的组合构成了栈的”后进先出”</p></li><li><p>shift()在数组的头部删除一个元素，并且返回删除值</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.shift()<br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>shift和push相结合构成队列的”先进先出”</p></li><li><p>unshift() 在数组的头部添加一个或者多个元素，返回数组长度</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.unshift(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure></li><li><p>join() 以传入的参数作为分隔符，将数组连接成一个新的字符串返回，默认是逗号</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.join(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-string">&quot;123&quot;</span><br>a.join(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-string">&quot;1,2,3&quot;</span><br>a.join(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-string">&quot;1-2-3&quot;</span><br>a.join()<br><span class="hljs-string">&quot;1,2,3&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>concat() 数组的连接 ，负责数组的合并，返回新数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[<span class="hljs-string">&#x27;hello&#x27;</span>].concat([<span class="hljs-string">&#x27;world&#x27;</span>])<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].concat([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></div></td></tr></table></figure><p>数组成员包含对象，concat()返回数组的一个浅拷贝，</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj =&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">var</span> oldArray = [obj]<br><span class="hljs-keyword">var</span> newArray = oldArray.concat()<br>obj.a = <span class="hljs-number">2</span><br>newArray[<span class="hljs-number">0</span>].a<br><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure></li><li><p>reverse() 数组倒序</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a.reverse()<br>[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure></li><li><p>slice()用于提取目标数组的一部分，slice(strart,end) 从strat开始，不包括end结束</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">2</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></div></td></tr></table></figure><p>slice()利用Array.prototype.slice.call()将类似数组转成数组</p></li><li><p>splice() 删除数组的部分，然后再删除的位置添加新的元素，返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>a.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>)<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">//查看a的现状</span><br>a<br>(<span class="hljs-number">7</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></div></td></tr></table></figure></li><li><p>sort()排序，按照字典序</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;love&#x27;</span>]<br>a.sort()<br>(<span class="hljs-number">3</span>) [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>自定义的排序方式</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">29</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;].sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">o1,o2</span>)</span>&#123;<br><span class="hljs-keyword">return</span> o1.age - o2.age&#125;)<br><br><span class="hljs-number">0</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>&#125;<br><span class="hljs-number">1</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>&#125;<br><span class="hljs-number">2</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br><span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br><br></code></pre></div></td></tr></table></figure></li><li><p>map() 将数组的所有成员依次传入函数参数，把每一次的执行结果组成新的数组返回</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>numbers.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>)</span>&#123;<br><span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span><br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></div></td></tr></table></figure><p>map() 接受一个函数做为参数，并且该函数的回调函数有3个参考值 element 元素，index 元素下标，arr 原数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem,ind,arr</span>)</span>&#123;<br><span class="hljs-keyword">return</span> ind * elem<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br></code></pre></div></td></tr></table></figure><p>map()接受第二个参数（index），绑定内部的this变量，数组a是map()方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[index];<br>&#125;,a)<br>(<span class="hljs-number">2</span>) [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>map方法的回调函数会跳过空位，不会跳过undefined和null</p></li><li><p>forEach() 和map的用法基本一致，就是map()返回值，forEach()不返回值，只是遍历数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">element,index,arr</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;[&#x27;</span>+index + <span class="hljs-string">&#x27;] =&#x27;</span> + element)<br>&#125;<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(log)<br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">0</span>] =<span class="hljs-number">1</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">1</span>] =<span class="hljs-number">2</span><br><span class="hljs-attr">VM1183</span>:<span class="hljs-number">2</span> [<span class="hljs-number">2</span>] =<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>forEach()也可以接受第二个参数，绑定内部的this变量，空数组<code>out</code>是<code>forEach()</code>方法的第二个参数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> out = [];<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.push(index * index);<br>&#125;,out)<br><span class="hljs-literal">undefined</span><br>out<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br></code></pre></div></td></tr></table></figure><p>forEach()会跳过空位，不会跳过undefined和null</p><p>forEach() 无法中断，总是把数组遍历完</p></li><li><p>filter(),参数是一个函数，所有成员依次执行函数，返回符合条件的结果</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>].filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> (elem &gt;<span class="hljs-number">3</span>)<br>&#125;)<br>(<span class="hljs-number">3</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></div></td></tr></table></figure><p>filter()也可以接受第二个参数</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj = &#123;max :<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">var</span> myFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(item)</span></span>&#123;<br><span class="hljs-keyword">if</span>(item&gt;<span class="hljs-keyword">this</span>.max) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>arr.filter(myFilter,obj)<br>(<span class="hljs-number">6</span>) [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></div></td></tr></table></figure><p>第二个参数obj可以绑定myFilter内部的this变量</p></li><li><p>some()只要数组的一个成员符合条件，就返回true</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">some</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li><li><p>every()是所有成员都符合，才返回true</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr.<span class="hljs-built_in">every</span>(function(<span class="hljs-built_in">elem</span>,index,arr)&#123;<br> <span class="hljs-built_in">return</span> <span class="hljs-built_in">elem</span> &gt;<span class="hljs-number">5</span><br>&#125;)<br><span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>reduce</code>方法和<code>reduceRight</code>方法依次处理数组的每个成员，最终累计为一个值。</p></li><li><p><code>indexOf</code>方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回<code>-1</code>。</p></li><li><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1</p></li><li><p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> user = [<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;tom@qq.com&#x27;</span>&#125;,<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;peter&#x27;</span>,<span class="hljs-attr">email</span>:<span class="hljs-string">&#x27;peter@qq.com&#x27;</span>&#125;<br>];<br>user.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>)</span>&#123;<br><span class="hljs-keyword">return</span> user.email<br>&#125;).filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-regexp">/^t/</span>.test(email);<br>&#125;).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">email</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(email)<br>&#125;)<br><span class="hljs-attr">VM2562</span>:<span class="hljs-number">10</span> tom@qq.com<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h2 id="三、包装对象"><a href="#三、包装对象" class="headerlink" title="三、包装对象"></a>三、包装对象</h2><ol><li><p>3个原型对象的包装对象</p></li><li><p>如果使用了new 就是生成包装对象</p></li><li><p>如果只是普通的函数调用，那就是强转</p></li><li><p>js引擎会自动的把原生数据类型转成包装对象，并且在使用后自动销毁</p></li><li><p>包装对象的实例方法 valueof()，toString()</p></li><li><p>可以给包装对象自定义实例方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br><span class="hljs-string">&#x27;abc&#x27;</span>.double()<br><span class="hljs-string">&quot;abcabc&quot;</span><br><br><span class="hljs-built_in">Number</span>.prototype.double = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.valueOf() + <span class="hljs-built_in">this</span>.valueOf()<br>&#125;;<br>(<span class="hljs-number">2</span>).double()<br><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="四、Boolean对象"><a href="#四、Boolean对象" class="headerlink" title="四、Boolean对象"></a>四、Boolean对象</h2><ol><li><p>Boolean转换为false的现象</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-literal">false</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)<br><span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure></li><li><p>Boolean转换为true的现象</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(<span class="hljs-string">&#x27;false&#x27;</span>)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">([])</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(&#123;&#125;)</span></span><br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(function()</span></span>&#123;&#125;)<br>true<br><span class="hljs-function"><span class="hljs-title">Boolean</span><span class="hljs-params">(/foo/)</span></span><br>true<br></code></pre></div></td></tr></table></figure></li><li><p>所有对象对应的Boolean都是true</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>))&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>之所以输出true，是因为false对应的包装对象实例是一个对象，进行逻辑运算时，自动转成布尔值true</p></li></ol><h2 id="五、Number对象"><a href="#五、Number对象" class="headerlink" title="五、Number对象"></a>五、Number对象</h2><ol><li>Number()是原始数字类型的包装类型</li><li>有自己静态的属性，定义在Number对象上</li><li>有自己的实例化方法</li><li>也可以自定义方法</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>+x;<br>&#125;;<br>(<span class="hljs-number">8</span>).add(<span class="hljs-number">2</span>)<br><span class="hljs-number">10</span><br><span class="hljs-built_in">Number</span>.prototype.subtract= <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> -x;<br>&#125;;<br>(<span class="hljs-number">10</span>).subtract(<span class="hljs-number">4</span>)<br><span class="hljs-number">6</span><br><span class="hljs-built_in">Number</span>.prototype.iterate = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> result = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">this</span>;i++)&#123;<br>result.push(i);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;;<br>(<span class="hljs-number">10</span>).iterate()<br>(<span class="hljs-number">11</span>) [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></div></td></tr></table></figure><h2 id="六、String对象"><a href="#六、String对象" class="headerlink" title="六、String对象"></a>六、String对象</h2><ol><li><p>String是js原生提供的三个包装对象之一</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span> (<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-keyword">typeof</span> s1<br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> s2<br><span class="hljs-string">&quot;object&quot;</span><br>s2.valueOf()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>字符串对象是一个类似数组对象</p></li><li><p>单独的String() 没有new 是强制转换，有new是，String包装对象</p></li><li><p>string的静态属性，定义在string对象本身,参数是一个或者多个数值，返回数值对应的Unicode</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>)<br><span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>)<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>string的实例属性 Sting.prototype.length</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span><br>s1.length<br><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></li><li><p>String的实例方法</p><ol><li><p>charAt() 返回指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>s1.charAt(<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;b&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>charCodeAt() 返回指定位置的字符的Unicode的值，没有参数，默认返回首字符的Unicode值</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">var s1 = &#x27;abcd&#x27;;<br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt(1)</span>;<br><span class="hljs-number">98</span><br>s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">CodeAt()</span><br><span class="hljs-number">97</span><br></code></pre></div></td></tr></table></figure></li><li><p>concat() 连接2个字符串，返回新字符串，可以接受多个参数，如果参数不是字符串，先转成字符串在连接</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> one =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> three = <span class="hljs-string">&#x27;3&#x27;</span>;<br><span class="hljs-string">&#x27;&#x27;</span>.concat(one,two,three);<br><span class="hljs-string">&quot;123&quot;</span><br>one + two + three;<br><span class="hljs-string">&quot;33&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>slice() 第一个参数是开始位置，第二个参数是结束位置 (不包括结束位置) 返回子串</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">0</span>,-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;p&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.slice(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>substring() 跟slice的作用相同，就是当第一个参数 &gt; 第二个参数的时候，会自动换位置，如果是负数，会自动转成0</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,<span class="hljs-number">10</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;JavaSCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substring(<span class="hljs-number">4</span>,-<span class="hljs-number">3</span>);<br><span class="hljs-string">&quot;Java&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>substr() 第一个参数是开始的位置，第二个参数是子字符串的长度，如果第一个参数是负数，表示倒数开始，如果第二个参数是负数，返回空字符串</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br><span class="hljs-string">&quot;S&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(<span class="hljs-number">4</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>);<br><span class="hljs-string">&quot;SCript&quot;</span><br><span class="hljs-string">&#x27;JavaSCript&#x27;</span>.substr(-<span class="hljs-number">6</span>,<span class="hljs-number">0</span>);<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>indexof() 表示一个字符串在另一个字符串中第一次出现的位置，如果匹配返回下标，如果不匹配，返回-1</p><p>可以接受第二个参数，第二个参数代表从指定位置开始匹配</p><p>lastIndexof() 表示从尾部开始匹配</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">4</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;x&#x27;</span>)<br>-<span class="hljs-number">1</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-number">7</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure></li><li><p>trim() 用于去除字符串两端的空格，返回一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27; hello world &#x27;</span>.trim()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;\r\nabc \t&#x27;</span>.trim()<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>toLowerCase() 将字符串全部小写，toUpperCase() 将字符串全部大写</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;Hello World&#x27;</span>.toLowerCase()<br><span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-string">&#x27;Hello World&#x27;</span>.toUpperCase()<br><span class="hljs-string">&quot;HELLO WORLD&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>match() 确定原字符串是否匹配某个子字符串，</p><p>返回一个数组，成员是匹配的第一个字符串，index是匹配的下标，input是原数组，</p><p>如果没有匹配，返回null</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;e&#x27;</span>);<br>[<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span>]<span class="hljs-number">0</span>: <span class="hljs-string">&quot;e&quot;</span>groups: undefinedindex: 1input: <span class="hljs-string">&quot;hello world&quot;</span>length: 1__proto__: <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;hello world&#x27;</span>.match(<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-literal">null</span><br></code></pre></div></td></tr></table></figure></li><li><p>search() 和match() 方法基本相似，但是返回匹配值的第一个位置（下标）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;hello world&#x27;</span>.search(<span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></li><li><p>replace() 用于替换匹配的子字符串，默认只替换第一个</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;aaa&#x27;</span>.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-string">&quot;baa&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>split() 方法，按照指定的规则分割字符串，返回一个分割出来的子字符串组成的数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split()<br>[<span class="hljs-string">&quot;a|b|c&quot;</span>]<br><span class="hljs-string">&#x27;a||c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;&quot;</span>]<br> <span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">3</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-string">&#x27;a|b|c&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-number">2</span>)<br> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h2 id="七、json对象"><a href="#七、json对象" class="headerlink" title="七、json对象"></a>七、json对象</h2><ol><li><p>Json格式</p><p>复杂类型只能是数组或者对象，不能是函数、正则对象，日期对象</p><p>原始类型只有4种，字符串、数值、布尔值和null</p><p>字符串必须使用双引号，不能使用单引号</p><p>对象的键名必须在双引号里</p><p>数组或者对象最后一个成员后面不能加逗号</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>]<br><br>&#123; <span class="hljs-attr">&quot;one&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">&quot;two&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">&quot;three&quot;</span>: <span class="hljs-number">3</span> &#125;<br><br>&#123;<span class="hljs-attr">&quot;names&quot;</span>: [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>] &#125;<br><br>[ &#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>&#125;, &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;李四&quot;</span>&#125; ]<br></code></pre></div></td></tr></table></figure></li><li><p>JSON.stringify()  将一个值转成JSON字符串</p></li><li><p>如果参数对象有自定义的toJSON()方法，会使用这个方法作为返回值，忽略其他的属性</p></li><li><p>JSON.parse()  将JSON字符串转成对应的值</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-语法</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、强制转换"><a href="#一、强制转换" class="headerlink" title="一、强制转换"></a>一、强制转换</h2><p>强制转化的基本类型 Number、String、Boolean</p><h2 id="二、Number比parseInt更加严格"><a href="#二、Number比parseInt更加严格" class="headerlink" title="二、Number比parseInt更加严格"></a>二、Number比parseInt更加严格</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-literal">NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;42Cat&#x27;</span>)<br><span class="hljs-number">42</span><br></code></pre></div></td></tr></table></figure><ol><li><p>自动转换，背后有比较复杂的转换预原则</p></li><li><p>错误处理机制</p></li><li><p>编码风格</p></li><li><p>console.log()</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-运算符</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、加法运算符（算术运算符）"><a href="#一、加法运算符（算术运算符）" class="headerlink" title="一、加法运算符（算术运算符）"></a>一、加法运算符（算术运算符）</h2><p>boolean会转换成数值型，在做加法</p><p>string类型做加法就是进行连接操作</p><p>到底是执行加法还是连接会在运行时决定，这种现象叫做”重载”,</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-string">&quot;75&quot;</span><br><span class="hljs-string">&#x27;3&#x27;</span> + <span class="hljs-number">4</span> +<span class="hljs-number">5</span><br><span class="hljs-string">&quot;345&quot;</span><br></code></pre></div></td></tr></table></figure><p>只有加法有重载，其他的算术运算没有</p><p>对象相加会先转换成原始类型的值在相加</p><p>对象转换成原始类型的原则是先调用valuesof（），</p><p>valuesof（）总是返回对象本身，在调用对象的toString（）方法，将其转成字符串</p><h2 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h2><p>相等比较的是值</p><p>严格相等比较的是类型和值</p><p>当都是原始类型值的时候，转成数值在比较</p><p>如果是对象，转成原始类型在比较</p><p>undefined和null他们自身比较，或者互相比较是true，其他时候都是false</p><p>相等运算符存在问题，推荐使用严格相等</p><p>比如: </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">2</span> == <span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-number">2</span> == <span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><h2 id="三、布尔运算符"><a href="#三、布尔运算符" class="headerlink" title="三、布尔运算符"></a>三、布尔运算符</h2><p>! 取反   !! x 等价于 Boolean（x）</p><p>&amp;&amp; 且  如果第一个表示式是false ，返回第一个表达式的值，如果第一个是true，返回第二个表达式的值</p><p>if（x） { doSometing（x） } 等价于 x &amp;&amp; doSomething（x） （短路写法）</p><p>|| 或     如果第一个表达式的值是true，返回第一个表达式的值，如果第一个表达式的值是false，返回第二个表达式  </p><p>text == text || ‘’ （短路写法）</p><p>？ ： 三目运算符</p><h2 id="四、二进制运算符"><a href="#四、二进制运算符" class="headerlink" title="四、二进制运算符"></a>四、二进制运算符</h2><p>| 或 </p><p>&amp; 与</p><p>~ 否 （取反 0 变1 1 变0 ）</p><p>^ 异或 （不同取1 相同取0）</p><p>&lt;&lt; 左移 变大 左移一位乘以2</p><p>&lt;&lt; 右移 变小 右移一位除以2</p><p>&lt;&lt;&lt; 头部补零 得到的都是正数，不管符号位</p><h2 id="五、其他运算符"><a href="#五、其他运算符" class="headerlink" title="五、其他运算符"></a>五、其他运算符</h2><p>void（）：执行一个表达式，不返回任何值，或者说返回的是undefined</p><p>逗号：返回最后一个表达式的值</p><p>圆括号：运算级最高</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js-数据类型</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的数据类型"><a href="#一、js的数据类型" class="headerlink" title="一、js的数据类型"></a>一、js的数据类型</h2><p>（1）Number (整数和小数) </p><p>（2）String </p><p>（3）Boolean </p><p>（4）null </p><p>（5）undefine </p><p>（6）object（狭义的对象、Array、function）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span><br><span class="hljs-string">&quot;number&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-string">&quot;string&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&quot;boolean&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span><br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> [] <br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span><br><span class="hljs-string">&quot;function&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">typeof</span> f<br><span class="hljs-string">&quot;function&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="二、null和undefined"><a href="#二、null和undefined" class="headerlink" title="二、null和undefined"></a>二、null和undefined</h2><p>null 在转换成数值是0，undefined 在转换成数值是NaN</p><p>null和undefined的比较</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span> <br>    <br><span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>只有这6种类型被认为是false：null、undefined、””、’’、0、NaN</p><h2 id="三、数值型"><a href="#三、数值型" class="headerlink" title="三、数值型"></a>三、数值型</h2><p>parseInt将字符串转换成数值型，</p><p>parseInt的返回值类型只可能是数值或者NaN，</p><p>如果一个参数不是字符串，会先转成字符串再转换成数值</p><p>parseFloat将字符串转成字符型</p><p>isFinite() 返回布尔值，判断一个值是不是正常的数值</p><h2 id="四、字符型"><a href="#四、字符型" class="headerlink" title="四、字符型"></a>四、字符型</h2><p>字符串和字符数组，转义字符，base64转码，js返回的字符串长度可能是不一样的</p><h2 id="五、对象"><a href="#五、对象" class="headerlink" title="五、对象"></a>五、对象</h2><p>(for …in ) 遍历对象的属性，但是in无法区别自身的属性，可以加入hasOwnProperty判断是不是自身的属性</p><p>with语句不建议使用</p><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><ul><li><p>函数是一种特殊的值</p></li><li><p>函数的特点是子集可以一直调用父级的内部变量，js特有的链式作用域</p></li><li><p>闭包是函数内部和外部连接起来的桥梁</p></li><li><p>闭包：在函数内部定义一个函数</p></li><li><p>闭包作用：读取外部函数内部的变量，</p></li><li><p>```js<br>function a (){<br>var n =1;<br>function b () {<br> console.log(n)<br>}<br>return b<br>}<br>var res = a();<br>res()</p><p>VM2106:4 1</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><br>  <br><br>- 让这些变量一些保留在内存中，<br><br>- 封装对象的私有属性和私有方法<br><br>- ```js<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span> <span class="hljs-params">(name)</span></span>&#123;<br>  <span class="hljs-keyword">var</span> _age ;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAge</span> <span class="hljs-params">(n)</span></span>&#123;<br>  _age = n;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span> <span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-keyword">return</span> _age;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>  name:name,<br>  getAge:getAge,<br>  setAge:setAge<br>  &#125;;<br>  &#125;<br>  <br>  <span class="hljs-keyword">var</span> p1 = person(<span class="hljs-string">&quot;张三&quot;</span>);<br>  p1.setAge(<span class="hljs-number">25</span>);<br>  p1.getAge()<br>  <br>  <span class="hljs-number">25</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="七、数组"><a href="#七、数组" class="headerlink" title="七、数组"></a>七、数组</h2><p>数组的本质是一种对象，</p><p>数组的遍历可以用forEach方法，</p><p>任何类型都可以放入数组中，</p><p>可以使用Array.prototype.sclice.call() 把类似数组转成数组，</p><p>可以使用Array.prototype.forEach.call()把类似数组转成数组</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-入门介绍</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/jsjs-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、js的概念"><a href="#一、js的概念" class="headerlink" title="一、js的概念"></a>一、js的概念</h2><p>js是一种轻量级的脚本语言，所谓脚本语言就是他不能去开发操作系统，只能编写控制其他大型应用程序的“脚本”</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span> (<span class="hljs-params">val</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>+ val)<br>&#125;<br>first(<span class="hljs-string">&#x27;world&#x27;</span>)<br> helloworld<br></code></pre></div></td></tr></table></figure><h2 id="二、js的优势"><a href="#二、js的优势" class="headerlink" title="二、js的优势"></a>二、js的优势</h2><ul><li>js操作浏览器的能力</li><li>js广泛的使用领域</li><li>js的易学性</li><li>js的语法的灵活性</li><li>js强大的性能</li><li>js的开放性</li><li>js的社区支持和就业机会</li></ul><ol><li><p>js的历史</p><p>js和java是2种不同的语言，最大的区别：</p><p>（1）js的函数是一种独立的数据类型，</p><p>（2）是基于原型对象的继承链，</p><p>（3）js不需要编译，解释器直接运行</p><p>（4）ES和js的关系是：ES是js基本语法的规范，js是ES的体现</p><p>Augular是微软发布的，React是FaceBook发布的</p><h2 id="三、js的基础语法"><a href="#三、js的基础语法" class="headerlink" title="三、js的基础语法"></a>三、js的基础语法</h2><p>js存在变量提升，</p><p>js用var代表声明一个变量，</p><p>js运行的原理是先获取所有被声明的变量，然后再一行一行运行</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/htmlhtml/</url>
    
    <content type="html"><![CDATA[<h2 id="一、html基础"><a href="#一、html基础" class="headerlink" title="一、html基础"></a>一、html基础</h2><h3 id="1-html简介"><a href="#1-html简介" class="headerlink" title="1.html简介"></a>1.html简介</h3><p>（1）doctype的声明不区分大小写，用来告知浏览器用的哪个版本</p><p>（2）对于中文页面需要使用<meta charset="utf-8">声明编码，否则会出现乱码。有的浏览器支持GBK为默认编码，则设置<meta charset="gbk"></p><p>（3）在大部分浏览器中，直接输出中文会出现乱码现象，需要在头部设置字符为UTF-8</p><p>（4）HTML 的格式</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2、html编译器"><a href="#2、html编译器" class="headerlink" title="2、html编译器"></a>2、html编译器</h3><p>介绍几种好用的html编译器：VS code ：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>Sublime text：<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p><h3 id="3、html超连接和照片"><a href="#3、html超连接和照片" class="headerlink" title="3、html超连接和照片"></a>3、html超连接和照片</h3><h3 id="4、html元素"><a href="#4、html元素" class="headerlink" title="4、html元素"></a>4、html元素</h3><p>（1）html的元素可以嵌套，并且大多数html元素都嵌套</p><p>（2）html在未来都会强制要求有开始标签和结束标签</p><p>（3）有空元素<br>换行的意思，但是在未来最好规范写法<br/></p><p>（4）html的元素有<p></p>   <body></body>   <br/></p><h3 id="5、html属性"><a href="#5、html属性" class="headerlink" title="5、html属性"></a>5、html属性</h3><p>（1）html有常用的属性 class=” “、id=” “、style=” “、title=” “</p><p>（2）属性要名称/值对的形式出现 比如：name=”value”</p><p>（3）一般是双引号，但是如果有双引号的，用单引号 比如：name=’John “ShotGun” Nelson’</p><h3 id="6、html标题"><a href="#6、html标题" class="headerlink" title="6、html标题"></a>6、html标题</h3><p>（1）HTML标题分为h1-h6 </p><p>（2）添加水平线 </p><p>（3）注释的格式<!--.....--></p><p>（4）浏览器会在标题前后自动加入空行</p><h3 id="7、html段落"><a href="#7、html段落" class="headerlink" title="7、html段落"></a>7、html段落</h3><p>（1）浏览器会自动地在段落的前后添加空行</p><p>（2）浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格</p><h3 id="8、html格式化"><a href="#8、html格式化" class="headerlink" title="8、html格式化"></a>8、html格式化</h3><p>（1）<b></b> 定义加粗的字体、<i></i> 定义斜体</p><p>（2）<sub></sub> 定义下标字 <sup></sup>定义上标字</p><h3 id="9、html链接"><a href="#9、html链接" class="headerlink" title="9、html链接"></a>9、html链接</h3><p>（1）html超链接的格式<a href="''"></a></p><p>（2）html的target属性设置为_blank ,可以在新的窗口打开一个网页</p><p>（3）在本页内实现调转，设置id属性</p><h3 id="10、html头部head"><a href="#10、html头部head" class="headerlink" title="10、html头部head"></a>10、html头部head</h3><p>（1）html 的头部可以添加 <title>, <style>, <meta>, <link>, <script>, <noscript> 和 <base>标签</p><p>（2）title标签：定义页面的标题</p><p>（3）style标签：定义了html样式文件的引用地址，也可以在style标签中直接设置样式</p><p>（4)meta标签：使用meta标签描述文档的属性，比如关键词、作者、字符集等，meta标签的内容不会显示，但是会被浏览器解析。</p><p>（5）link标签：定义html文档与外部资源的关系，只要用于链接样式表</p><p>（6）script标签：加载脚本语言，比如javascript</p><p>（7）base标签：标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接，</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>html的base标签学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;images/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这里的照片可以正常访问，是因为在base标签里定义了目标网址<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面会在新的窗口打开，因为在base标签定义了target的属性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;images/1.jpg&quot;&gt;表示此代码所在html文件路径下的images文件中的1.jpg文件--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;..images/1.jpg&quot;&gt;表示此代码所在html文件路径的上一级文件images文件中的1.jpg文件--&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="11、html-css"><a href="#11、html-css" class="headerlink" title="11、html css"></a>11、html css</h3><p>（1）css来设置html的文本样式</p><p>（2）内联样式:使用style标签 <p style="color:red;margin-left: 10px">内联样式</p></p><p>（3）内部样式表：在head属性中设置 </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b3d4fc</span>&#125;</span><br><span class="css">  <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: black&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>（4）引入外部样式表</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;test.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="12、html图像"><a href="#12、html图像" class="headerlink" title="12、html图像"></a>12、html图像</h3><p>（1）alt=“ ” 用来定义图片的含义，如果图片没有正确显示，会有相应的文字提示，得到失去的内容</p><p>（2）图片的映射</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">&lt;img src=<span class="hljs-string">&quot;planets.gif&quot;</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">&quot;145&quot;</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">&quot;126&quot;</span> alt=<span class="hljs-string">&quot;Planets&quot;</span> usemap=<span class="hljs-string">&quot;#planetmap&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">map</span> name=<span class="hljs-string">&quot;planetmap&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> coords=<span class="hljs-string">&quot;0,0,82,126&quot;</span> alt=<span class="hljs-string">&quot;Sun&quot;</span> href=<span class="hljs-string">&quot;sun.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;90,58,3&quot;</span> alt=<span class="hljs-string">&quot;Mercury&quot;</span> href=<span class="hljs-string">&quot;mercur.htm&quot;</span>&gt;<br>  &lt;area <span class="hljs-built_in">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> coords=<span class="hljs-string">&quot;124,58,8&quot;</span> alt=<span class="hljs-string">&quot;Venus&quot;</span> href=<span class="hljs-string">&quot;venus.htm&quot;</span>&gt;<br>&lt;/<span class="hljs-built_in">map</span>&gt;<br></code></pre></div></td></tr></table></figure><p>（3）sharp设置可点击区域的性状，coords是指链接区域在图片中的坐标</p><h3 id="13、html的表格"><a href="#13、html的表格" class="headerlink" title="13、html的表格"></a>13、html的表格</h3><p>（1）表格的构成 <table></table> ,<tr></tr> ,<td></td> </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表格练习--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一行一列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>两行三列<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>521<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>(2) <th></th> 设置表头信息</p><p>（3）表格还有很多的属性，包括利用css样式，设计一个漂亮的表格</p><p>（4）&lt;td colspan=”2”&gt; </td> 实现横跨两列的效果</p><h3 id="14、html列表"><a href="#14、html列表" class="headerlink" title="14、html列表"></a>14、html列表</h3><p>（1）无序列表：</p><!--HTML的列表--><h4>无序列表</h4><ul>  <li>苹果</li>  <li>香蕉</li>  <li>栗子</li> </ul><p>（2）有序列表</p> <h4>有序列表</h4> <ul>   <li>第一名</li>   <li>第二名</li>   <li>第三名</li> </ul><p>（3）可以设置不同类型的列表，有序列表用type=“A”，无序列表用 style=”list-style-type:circle”</p><h3 id="15、html块区"><a href="#15、html块区" class="headerlink" title="15、html块区"></a>15、html块区</h3><p>（1）HTML的块级元素 <div></div></p><p>(2)html的内联元素 <span></span></p><h3 id="16、HTML布局"><a href="#16、HTML布局" class="headerlink" title="16、HTML布局"></a>16、HTML布局</h3><p>（1）div和table都可以实现网页的布局。一般选用div</p><h3 id="17、html表单"><a href="#17、html表单" class="headerlink" title="17、html表单"></a>17、html表单</h3><p>（1）简单的表单</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>   firstname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;firstname&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;<br>  lastname:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;lastname&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></div></td></tr></table></figure><p>（2）单选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Male<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;radio&quot; <span class="hljs-type">name</span>=&quot;sex&quot;&gt;Female<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>（3）复选框表单</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;form&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;apple&quot;&gt;苹果<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;egg&quot;&gt;鸡蛋<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;banana&quot;&gt;香蕉<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>（4）下拉列表</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;eat&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;egg&quot;</span>&gt;</span>egg<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;apple&quot;</span>&gt;</span>apple<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;water&quot;</span>&gt;</span>water<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banana&quot;</span>&gt;</span>banana<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rice&quot;</span>&gt;</span>rice<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>（5）表单的提交</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;form action=&quot;http://www.baidu.com.cn&quot;&gt;<br>  First <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;FirstName&quot; <span class="hljs-keyword">value</span>=&quot;Mickey&quot;&gt;&lt;br&gt;<br>  Last <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;LastName&quot; <span class="hljs-keyword">value</span>=&quot;Mouse&quot;&gt;&lt;br&gt;<br>  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提交&quot;&gt;<br>  &lt;p&gt;会提交服务器的百度地址上&lt;/p&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>（6）表单这里有很多知识点还要进一步的学习深入</p><h3 id="18、html框架"><a href="#18、html框架" class="headerlink" title="18、html框架"></a>18、html框架</h3><p>（1）<frame></frame>设置HTML的框架</p><p>（2）框架可以和超链接结合，达到想要的效果</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--html的框架--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test1.html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com.cn&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span>点击进入百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>因为target的属性设置是iframe_a所以跳转的页面会显示在框架内<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="19、html颜色"><a href="#19、html颜色" class="headerlink" title="19、html颜色"></a>19、html颜色</h3><p>（1）html的颜色是RGB构成、红绿蓝  216+40 （微软和MAC各20种）256种颜色</p><h3 id="20、html-颜色名"><a href="#20、html-颜色名" class="headerlink" title="20、html 颜色名"></a>20、html 颜色名</h3><p>（1）html一共有141种颜色名、17（标准颜色）+124</p><p>（2）标准颜色：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色</p><h3 id="21、html的颜色值"><a href="#21、html的颜色值" class="headerlink" title="21、html的颜色值"></a>21、html的颜色值</h3><p>（1）3位的表示#RGB，6位的表示#RRGGBB</p><h3 id="22、html脚本"><a href="#22、html脚本" class="headerlink" title="22、html脚本"></a>22、html脚本</h3><p>（1）javascript主要用于图片操作、表单验证、内容的动态更新</p><p>（2）script直接在html输出</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--javascript写入html的输出流--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;p&gt;这是一个段落&lt;/p&gt;&quot;</span>)</span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;这是一级标题&lt;/h1&gt;&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>只能在html的输出流中使用<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>document.write<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>（3）script进行事件响应的处理</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script的事件响应--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第一个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>javascript可以完成事件的响应<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>).innerHTML=<span class="hljs-string">&quot;hello world ,hello html&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f()&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>（4）script改变html的样式</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--script处理HTML的样式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>第二个javascript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>点击按钮实现样式的修改<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">   x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test2&quot;</span>)</span><br><span class="javascript">     x.style.color=<span class="hljs-string">&quot;#a12&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f1()&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="23、html字符实体"><a href="#23、html字符实体" class="headerlink" title="23、html字符实体"></a>23、html字符实体</h3><p>(1) 想显示&lt;&gt; 需要用的字符符号 &amp;lt、&amp;gt</p><p>（2）连续不间断的空格 &amp;nbsp</p><p>（3）实体名称对大小写敏感</p><p>24、html的URL</p><p>（1）URL统一资源定位器</p><p>（2）Web浏览器通过URL从Web服务器请求页面。</p><p>当您点击 HTML 页面中的某个链接时，对应的 <a> 标签指向万维网上的一个地址。</p><p>一个统一资源定位器(URL) 用于定位万维网上的文档。</p><p>（3）URL 只能使用 [ASCII URL 只能使用 ASCII 字符集.</p><p>来通过因特网进行发送。由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。</p><p>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</p><p>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/csscss/</url>
    
    <content type="html"><![CDATA[<h2 id="一、网页布局的本质"><a href="#一、网页布局的本质" class="headerlink" title="一、网页布局的本质"></a>一、网页布局的本质</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li>网页元素都是盒子</li><li>利用css设置盒子的样式和位置</li><li>往盒子里装内容</li><li>网页核心的本质就是摆盒子</li></ol><h3 id="盒子模型的内容"><a href="#盒子模型的内容" class="headerlink" title="盒子模型的内容"></a>盒子模型的内容</h3><ul><li>盒子包括4个部分：边框、内容、内边距、外边距</li><li>边框控制盒子的边缘border</li><li>内容content</li><li>内边距控制盒子和内容的距离padding</li><li>外边距控制盒子和盒子的距离margin</li></ul><h3 id="边框设置"><a href="#边框设置" class="headerlink" title="边框设置"></a>边框设置</h3><ul><li>边框的主要3个属性：粗细、样式、颜色</li><li>边框的复合写法特别常用：border：1px solid gery</li><li>合并相邻边框(主要针对表格) border-collapse</li><li>边框的设置会影响盒子的大小，（变大）</li></ul><h3 id="内边距设置"><a href="#内边距设置" class="headerlink" title="内边距设置"></a>内边距设置</h3><ul><li>padding 5px 上下左右都是5px</li><li>padding 5px 10px 上下5px 左右10px</li><li>padding 5px 10px 20px 上5px 左右10px 下20px</li><li>padding 5px 10px 15px 20px 上5px 右10px 下15px 左20px、</li><li>内边距会影响盒子的大小（变大）在设置了宽高的情况下</li><li>遇到不同的文字显示，最应该使用padding将盒子撑开</li><li>不设置width/height属性，不会撑开盒子</li></ul><h3 id="外边距设置"><a href="#外边距设置" class="headerlink" title="外边距设置"></a>外边距设置</h3><ul><li>margin的复合写法和padding代表的含义一模一样</li><li>外边距实现块级元素水平居中</li><li>必须设置width，左右边距必须设置成auto  margin ：0 auto</li><li>行内元素或者行内块元素实现水平居中，给父级元素加上text-align</li><li>相邻盒子的外边距垂直合并的现象，选择大的为准</li><li>嵌套盒子的塌陷问题，在父子盒子都有外边距的情况下，会出现</li><li>解决办法：父盒子设置边框、设置内边距、设置 overflow：hidden</li><li>border：1px solid transparent 设置边框透明色</li></ul><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><ul><li>行内元素尽量只设置左右的内外边距，不要设置上下的</li><li>去掉li的小圆点 list-style：none</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jAVA"><span class="hljs-comment">//css的第一行代码</span><br>*&#123;<br>margin :<span class="hljs-number">0</span><br>padding:<span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><ul><li>border-radius : 10px;</li><li>原理是矩形和圆做交集</li><li>正方形变圆形 高度或者宽度的一半</li><li>矩形变成圆角形，设置为高度的一半</li><li>四个角可以分开变化</li></ul><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><ul><li>box-shadow : h-shadow v-shadow blur spread color inset </li><li>box-shadow : 10px 10px 10px -4px rgba(0,0 ,0 .3)</li><li>h-shadow :水平阴影</li><li>v-shadow：垂直阴影</li><li>blur：阴影是实在的还是虚的</li><li>spread：阴影的大小</li><li>color：颜色</li><li>inset：内阴影 默认外阴影 不用写 </li></ul><h2 id="二、css浮动"><a href="#二、css浮动" class="headerlink" title="二、css浮动"></a>二、css浮动</h2><h3 id="网页布局的3种方式"><a href="#网页布局的3种方式" class="headerlink" title="网页布局的3种方式"></a>网页布局的3种方式</h3><p><img src="G:\htmlProject\image\1.png"></p><p><img src="G:\htmlProject\image\2.png" alt="2"></p><p><img src="G:\htmlProject\image\3.png" alt="3"></p><ul><li><p>标准流：</p><ul><li><p>标签的3大类：块级元素、行内元素、行内块元素</p><p>块级元素的特点：自己独占一行；可以设置宽高；在不设置宽高的情况下，被内容撑开</p><p>行内元素的特点：和其他在一行，长度和宽度由内容决定</p></li></ul></li><li><p>浮动：</p><ul><li>多个块级元素纵向找标准流，多个块级元素横向排列找浮动</li><li>特性：<ol><li>脱标，脱离标准流；浮动的盒子不在保留原来的位置</li><li>多个盒子浮动，总是一行内显示，并且顶端对齐</li><li>浮动有行内块元素的属性，可以设置宽和高</li><li>行内块元素的宽度是内容撑开的</li><li>先设置div 的大小，在设置位置</li><li>浮动的盒子只会影响后面的盒子位置</li><li>先用标准流做上下位置，在用浮动做左右位置</li></ol></li></ul></li><li><p>定位：</p></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li>额外标签法：添加一个空标签在设置clear：both，空标签必须是块级元素</li><li>父级添加overflow：overflow：hidden</li><li>父级添加after</li><li><img src="G:\htmlProject\image\4.png"></li><li>父级添加双伪元素</li><li><img src="G:\htmlProject\image\6.png"></li></ol><h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3><p>定位=定位模式+边偏移</p><p>定位模式：position : relative absoulte fixed static </p><p>边偏移：top bottom left right </p><p>相对定位：</p><ol><li>相对自己原来的位置来进行移动的，和浏览器和父级都没有关系</li><li>不脱标，原来的位置继续保留</li><li>典型应用是给绝对位置做父级</li></ol><p>绝对定位</p><ol><li>如果没有祖先元素，或者祖先元素没有定位，那么绝对位置以浏览器为标准，进行移动</li><li>祖先有定位。以最近的一级作为参考</li><li>绝对定位脱标，不在占有原来的位置</li><li>子绝父相（在学成在线的页面中可以完善）</li></ol><p>固定定位</p><ol><li>以浏览器的可视窗口为参考</li><li>不在占有原来的位置，脱标</li><li>可以看成特殊的绝对定位</li><li>小技巧在版心的右侧：在浏览器的50%，在版心的margin-left：一半</li></ol><p>粘性定位</p><p>不常用，兼容性太差</p><h3 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h3><p>盒子加了固定或者绝对定位，不设置宽高，默认内容的大小</p><p>浮动的盒子不会压住文字，绝对位置的盒子会</p><h3 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h3><p>display：none ,block  隐藏以后位置不会保留</p><p>visibility：visible，hidden 掩藏后，位置会保留</p><p>overflow：溢出的部分隐藏，auto：在需要的时候才显示滚动条，scroll：无论怎样都显示滚动条</p><h2 id="三、css高级技巧"><a href="#三、css高级技巧" class="headerlink" title="三、css高级技巧"></a>三、css高级技巧</h2><h3 id="精灵技术："><a href="#精灵技术：" class="headerlink" title="精灵技术："></a>精灵技术：</h3><p><img src="https://gitee.com/porous-crystal/blog-img/raw/master/img/20210712235808.jpg" alt="example"></p><p>为了减少服务器接收和发送的次数，提高响应的速度</p><p>核心就是background-position的用法</p><h3 id="字体图标："><a href="#字体图标：" class="headerlink" title="字体图标："></a>字体图标：</h3><h3 id="css三角："><a href="#css三角：" class="headerlink" title="css三角："></a>css三角：</h3><p>没有大小的div，在加上3个透明边框，一个有颜色的边框</p><h3 id="css用户界面样式："><a href="#css用户界面样式：" class="headerlink" title="css用户界面样式："></a>css用户界面样式：</h3><p>鼠标的移动样式：cursor</p><p>轮廓线：outline：0</p><p>文本域防止拖拽：resize：none</p><p>行内元素或行内块元素：文字和图片垂直居中 vertical-align：middle</p><p>溢出文本的省略号：单行和多行</p>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 知识点</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/vuevue%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue简介"><a href="#一、vue简介" class="headerlink" title="一、vue简介"></a>一、vue简介</h2><ol><li><p>vue是javascript框架</p></li><li><p>简化了Dom操作</p></li><li><p>响应式的数据交互</p></li><li><p>组件开发</p></li></ol><h2 id="二、第一个vue程序"><a href="#二、第一个vue程序" class="headerlink" title="二、第一个vue程序"></a>二、第一个vue程序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;第一个vue程序&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br>    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;第一个vue程序&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="三、el-挂载点"><a href="#三、el-挂载点" class="headerlink" title="三、el:挂载点"></a>三、el:挂载点</h2><p>可以使用id、class、标签选择器，但是一般选择id选择器</p><h2 id="四、data：数据对象"><a href="#四、data：数据对象" class="headerlink" title="四、data：数据对象"></a>四、data：数据对象</h2><p>vue用到的数据定义在data中</p><p>data中可以写复杂的数据类型</p><p>渲染复杂的数据类型，遵守js语法即可</p><h2 id="五、本地应用"><a href="#五、本地应用" class="headerlink" title="五、本地应用"></a>五、本地应用</h2><h2 id="六、vue指令"><a href="#六、vue指令" class="headerlink" title="六、vue指令"></a>六、vue指令</h2><p>一组带v-xxx的vue指令</p><h2 id="v-text："><a href="#v-text：" class="headerlink" title="v-text："></a>v-text：</h2><p>v-text 会覆盖h2内部的值 </p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h2><p>v-html和v-text的属性一样，但是在有html属性的时候，会渲染成html标签</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><p>为元素绑定事件，</p><p>可以传入自定义的参数</p><p>@keyup.enter=”” 按回车键触发事件</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show:"></a>v-show:</h2><p>v-show 实质操纵的是元素的dispaly属性，在频繁显示和隐藏的时候，推荐使用</p><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if:"></a>v-if:</h2><p>v-if实质操纵的是Dom树，会有内存的损耗，一般不要用</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h2><p>可以设置元素的属性值，</p><h2 id="v-for："><a href="#v-for：" class="headerlink" title="v-for："></a>v-for：</h2><p>一般和数组联合使用，实现循环</p><p>v-for= “item in intArr  “    </p><p>v-for=” （item,index ）in intArr”</p><p>item代表的就是intArr里的值，</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model:"></a>v-model:</h2><p>便捷的设置和获取表单元素的值</p><p>绑定的数据会和表单元素的值相关联</p><p>一变全变，相互影响</p><h2 id="七、总结："><a href="#七、总结：" class="headerlink" title="七、总结："></a>七、总结：</h2><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">v-text：可以表示成<span class="hljs-comment">&#123;&#123; &#125;</span>&#125;<br><br>v-<span class="hljs-keyword">on</span>：可以表示成@ 为元素绑定事件的 绑定<span class="hljs-function"><span class="hljs-keyword">method</span>里的方法</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">bind</span>：可以表示成：可以改变元素的值 绑定<span class="hljs-title">data</span>里的数据</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">v</span>-<span class="hljs-title">model</span>：实现数据的双向绑定</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue svg组件</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentvue%20svg%E7%BB%84%E4%BB%B6/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/componentvue%20svg%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、手写svg组件"><a href="#一、手写svg组件" class="headerlink" title="一、手写svg组件"></a>一、手写svg组件</h2><ol><li><p>手写一个svg组件（在componment文件下，新建文件SvgIcon）</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;svg class=&quot;svg-icon&quot; aria-hidden=&quot;true&quot;&gt;<br>        &lt;use :xlink:href=&quot;iconName&quot;/&gt;<br>    &lt;/svg&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        name: &#x27;svg-icon&#x27;,<br>        props: &#123;<br>            iconClass: &#123;<br>                type: String,<br>                required: true<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            iconName() &#123;<br>                return `#icon-$&#123;this.iconClass&#125;`<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>    .svg-icon &#123;<br>        width: 1em;<br>        height: 1em;<br>        vertical-align: -0.15em;<br>        fill: currentColor;<br>        overflow: hidden;<br>        margin-right: 10px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>在iconfont生成xxx.js文件，（这个文件里包含需要的svg图片），导入index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;&quot;&gt;<br>...<br>&lt;!--    引入svg(password)图标--&gt;<br>&lt;!--    &lt;script src=&quot;//at.alicdn.com/t/font_2648240_79u0g7z36jm.js&quot;&gt;&lt;/script&gt;--&gt;<br>    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;<br>  &lt;/head&gt;<br>...<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home&quot;&gt;<br>    &lt;svg-icon icon-class=&quot;password&quot;/&gt;<br>&lt;!--    svg原生写法--&gt;<br>&lt;!--    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;--&gt;<br>&lt;!--      &lt;use xlink:href=&quot;#icon-password&quot;&gt;&lt;/use&gt;--&gt;<br>&lt;!--    &lt;/svg&gt;--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>优化实现自动导入，在src文件下新建icons/svg文件，新建index.js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">import Vue from &#x27;vue&#x27;<br>import SvgIcon from &quot;@/components/SvgIcon.vue&quot;;<br><br>Vue.component(&#x27;svg-icon&#x27;, SvgIcon)<br><br>// 自动导入<br>const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)<br>const req = require.context(&#x27;./svg&#x27;, false, /\.svg$/)<br>// 打印以.svg命名的所有文件<br>// console.log(req.keys())<br>const result = requireAll(req)<br>console.log(&#x27;********result*****&#x27;)<br>console.log(result)<br></code></pre></div></td></tr></table></figure></li><li><p>环境安装，基于webpack将svg打包成svg-sprite，安装 npm install svg-sprite-loader -D , 安装 npm install svgo-D</p></li><li><p>配置vue.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> path.join(__dirname, dir)<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1. 取消默认 file-loader 对 svg 文件的处理</span><br>        config.module<br>            .rule(<span class="hljs-string">&#x27;svg&#x27;</span>) <span class="hljs-comment">// 对 svg 规则的配置</span><br>            .exclude <span class="hljs-comment">// 添加忽略文件夹, 忽略file-loader对这个文件夹下的svg文件处理</span><br>            <span class="hljs-comment">// 建议使用绝对路径</span><br>            <span class="hljs-comment">// .add(&#x27;./src/assets/icons/svg&#x27;) // 相对路径</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>)) <span class="hljs-comment">// 绝对路径</span><br>            .end()<br>        config.module<br>            .rule(<span class="hljs-string">&#x27;icons&#x27;</span>) <span class="hljs-comment">// 配置 icons 的规则</span><br>            .test(<span class="hljs-regexp">/\.svg$/</span>) <span class="hljs-comment">// 匹配以 .svg 结尾的文件</span><br>            .include <span class="hljs-comment">// 添加要处理的文件夹</span><br>            .add(resolve(<span class="hljs-string">&#x27;./src/icon&#x27;</span>))<br>            .end()<br>            .use(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>) <span class="hljs-comment">// 使用 svg-sprite-loader 处理</span><br>            .loader(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>            .options(&#123;<br>                <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span> <span class="hljs-comment">// 配置 symbol id, 需要使用这个 id 来使用 svg 图标</span><br>            &#125;)<br>            .end()<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>vue.config.js 是基于vue的webpack配置文件，放在项目的根目录下</p></li><li><p>webpack.config.js是webpack的配置文件，vue/react都可以使用</p></li><li><p>vue-cli 2.0时代，webpack的配置文件写在config/index.js 文件</p></li><li><p>vue-cli 3.0 时代，没有了config文件夹，vue.config.js 放在根目录下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>component</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/"/>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/webpackwebpack/</url>
    
    <content type="html"><![CDATA[<h2 id="一、webpack基础"><a href="#一、webpack基础" class="headerlink" title="一、webpack基础"></a>一、webpack基础</h2><ol><li>webpack是前端资源加载或者打包的工具</li><li>webpack 3.0 的版本没有问题</li><li>webpack4.0 的版本需要安装webpack-cli </li><li>全局安装在任何项目中都可以使用，如果是局部安装（本地安装）只能在当前项目中使用</li><li>webpack可以打包js，json文件</li><li>如果需要打包其他类型的文件，需要loader</li><li>loader解决不了的问题，需要plugin插件</li><li>webpack有entry入口文件，output出口文件。可以有多个入口，但是只能有一个出口</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
